{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/ng2-material-dropdown/fesm5/ng2-material-dropdown.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;yDA4ByD;;;;;;;;;;;;;;;;;;;;;;;;;;oBAO/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA+HrB;;;;;gDAGwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+CA6DkB;;;;;;;;;;;;;;;;;;;;;;oBAO3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mDAkM+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAkC3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sDA0G8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOlC;;;;;;KAMf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAmBqB","file":"ng2-material-dropdown.js","sourcesContent":["import { __decorate } from 'tslib';\nimport { EventEmitter, ElementRef, Output, Input, Component, Injectable, Renderer2, ContentChildren, ContentChild, HostListener, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n\nvar Ng2DropdownButton = /** @class */ (function () {\n    function Ng2DropdownButton(element) {\n        this.element = element;\n        this.onMenuToggled = new EventEmitter();\n        this.showCaret = true;\n    }\n    /**\n     * @name toggleMenu\n     * @desc emits event to toggle menu\n     */\n    Ng2DropdownButton.prototype.toggleMenu = function () {\n        this.onMenuToggled.emit(true);\n    };\n    /**\n     * @name getPosition\n     * @desc returns position of the button\n     */\n    Ng2DropdownButton.prototype.getPosition = function () {\n        return this.element.nativeElement.getBoundingClientRect();\n    };\n    Ng2DropdownButton.ctorParameters = function () { return [\n        { type: ElementRef }\n    ]; };\n    __decorate([\n        Output()\n    ], Ng2DropdownButton.prototype, \"onMenuToggled\", void 0);\n    __decorate([\n        Input()\n    ], Ng2DropdownButton.prototype, \"showCaret\", void 0);\n    Ng2DropdownButton = __decorate([\n        Component({\n            selector: 'ng2-dropdown-button',\n            template: \"<button class='ng2-dropdown-button' type=\\\"button\\\" (click)=\\\"toggleMenu()\\\" tabindex=\\\"0s\\\">\\n    <span class=\\\"ng2-dropdown-button__label\\\">\\n        <ng-content></ng-content>\\n    </span>\\n\\n    <span class=\\\"ng2-dropdown-button__caret\\\" *ngIf=\\\"showCaret\\\">\\n        <svg enable-background=\\\"new 0 0 32 32\\\" height=\\\"16px\\\" id=\\\"\\u0421\\u043B\\u043E\\u0439_1\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 32 32\\\" width=\\\"16px\\\" xml:space=\\\"preserve\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"><path d=\\\"M24.285,11.284L16,19.571l-8.285-8.288c-0.395-0.395-1.034-0.395-1.429,0  c-0.394,0.395-0.394,1.035,0,1.43l8.999,9.002l0,0l0,0c0.394,0.395,1.034,0.395,1.428,0l8.999-9.002  c0.394-0.395,0.394-1.036,0-1.431C25.319,10.889,24.679,10.889,24.285,11.284z\\\" fill=\\\"#121313\\\" id=\\\"Expand_More\\\"/><g/><g/><g/><g/><g/><g/></svg>\\n    </span>\\n</button>\\n\",\n            styles: [\".ng2-dropdown-button{font-family:Roboto,\\\"Helvetica Neue\\\",Helvetica,Arial;background:#fff;padding:.45rem .25rem;font-size:14px;letter-spacing:.08rem;color:#444;outline:0;cursor:pointer;font-weight:400;border:none;border-bottom:1px solid #efefef;text-align:left;min-width:100px;width:100%;display:flex;flex-direction:row;max-width:150px}.ng2-dropdown-button:hover{color:#222}.ng2-dropdown-button:active,.ng2-dropdown-button:focus{color:#222;border-bottom:2px solid #2196f3}.ng2-dropdown-button__label{flex:1 1 95%}.ng2-dropdown-button__caret{width:12px;height:12px;display:flex;flex:1 1 6%}:host-context(.ng2-dropdown-button--icon) .ng2-dropdown-button{border:none;min-width:40px;width:40px;border-radius:100%;transition:.2s;text-align:center;height:40px;padding:.5em}:host-context(.ng2-dropdown-button--icon) .ng2-dropdown-button:active{background:rgba(0,0,0,.2)}\"]\n        })\n    ], Ng2DropdownButton);\n    return Ng2DropdownButton;\n}());\n\nvar _a;\nvar KEYS = {\n    BACKSPACE: 9,\n    PREV: 38,\n    NEXT: 40,\n    ENTER: 13,\n    ESCAPE: 27\n};\n/**\n * @name onSwitchNext\n * @param index\n * @param items\n * @param state\n */\nvar onSwitchNext = function (index, items, state) {\n    if (index < items.length - 1) {\n        state.select(items[index + 1], true);\n    }\n};\nvar ɵ0 = onSwitchNext;\n/**\n * @name onSwitchPrev\n * @param index\n * @param items\n * @param state\n */\nvar onSwitchPrev = function (index, items, state) {\n    if (index > 0) {\n        state.select(items[index - 1], true);\n    }\n};\nvar ɵ1 = onSwitchPrev;\n/**\n * @name onBackspace\n * @param index\n * @param items\n * @param state\n */\nvar onBackspace = function (index, items, state) {\n    if (index < items.length - 1) {\n        state.select(items[index + 1], true);\n    }\n    else {\n        state.select(items[0], true);\n    }\n};\nvar ɵ2 = onBackspace;\nfunction onEscape() {\n    this.hide();\n}\n;\n/**\n * @name onItemClicked\n * @param index\n * @param items\n * @param state\n */\nvar onItemClicked = function (index, items, state) {\n    return state.selectedItem ? state.selectedItem.click() : undefined;\n};\nvar ɵ3 = onItemClicked;\nvar ACTIONS = (_a = {},\n    _a[KEYS.BACKSPACE] = onBackspace,\n    _a[KEYS.PREV] = onSwitchPrev,\n    _a[KEYS.NEXT] = onSwitchNext,\n    _a[KEYS.ENTER] = onItemClicked,\n    _a[KEYS.ESCAPE] = onEscape,\n    _a);\nfunction arrowKeysHandler(event) {\n    if ([38, 40].indexOf(event.keyCode) > -1) {\n        event.preventDefault();\n    }\n}\n\nvar Ng2DropdownState = /** @class */ (function () {\n    function Ng2DropdownState() {\n        this.onItemSelected = new EventEmitter();\n        this.onItemClicked = new EventEmitter();\n        this.onItemDestroyed = new EventEmitter();\n    }\n    Object.defineProperty(Ng2DropdownState.prototype, \"selectedItem\", {\n        /**\n         * @name selectedItem\n         * @desc getter for _selectedItem\n         */\n        get: function () {\n            return this._selectedItem;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @name selects a menu item and emits event\n     * @param item\n     */\n    Ng2DropdownState.prototype.select = function (item, dispatchEvent) {\n        if (dispatchEvent === void 0) { dispatchEvent = true; }\n        this._selectedItem = item;\n        if (!dispatchEvent || !item) {\n            return;\n        }\n        item.focus();\n        this.onItemSelected.emit(item);\n    };\n    /**\n     * @name unselect\n     * @desc sets _selectedItem as undefined\n     */\n    Ng2DropdownState.prototype.unselect = function () {\n        this._selectedItem = undefined;\n    };\n    return Ng2DropdownState;\n}());\n\nvar DropdownStateService = /** @class */ (function () {\n    function DropdownStateService() {\n        this.menuState = {\n            isVisible: false,\n            toString: function () {\n                return this.isVisible === true ? 'visible' : 'hidden';\n            }\n        };\n        this.dropdownState = new Ng2DropdownState();\n    }\n    DropdownStateService = __decorate([\n        Injectable()\n    ], DropdownStateService);\n    return DropdownStateService;\n}());\n\nvar Ng2MenuItem = /** @class */ (function () {\n    function Ng2MenuItem(state, element) {\n        this.state = state;\n        this.element = element;\n        /**\n         * @preventClose\n         * @desc if true, clicking on the item won't close the dropdown\n         */\n        this.preventClose = false;\n    }\n    Ng2MenuItem.prototype.ngOnDestroy = function () {\n        this.state.dropdownState.onItemDestroyed.emit(this);\n    };\n    Object.defineProperty(Ng2MenuItem.prototype, \"isSelected\", {\n        /**\n         * @name isSelected\n         * @desc returns current selected item\n         */\n        get: function () {\n            return this === this.state.dropdownState.selectedItem;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @name click\n     * @desc emits select event\n     */\n    Ng2MenuItem.prototype.select = function ($event) {\n        this.state.dropdownState.select(this, true);\n        if ($event) {\n            $event.stopPropagation();\n            $event.preventDefault();\n        }\n    };\n    /**\n     * @name click\n     * @desc emits click event\n     */\n    Ng2MenuItem.prototype.click = function () {\n        this.state.dropdownState.onItemClicked.emit(this);\n    };\n    /**\n     * @name focus\n     */\n    Ng2MenuItem.prototype.focus = function () {\n        this.element.nativeElement.children[0].focus();\n    };\n    Ng2MenuItem.ctorParameters = function () { return [\n        { type: DropdownStateService },\n        { type: ElementRef }\n    ]; };\n    __decorate([\n        Input()\n    ], Ng2MenuItem.prototype, \"preventClose\", void 0);\n    __decorate([\n        Input()\n    ], Ng2MenuItem.prototype, \"value\", void 0);\n    Ng2MenuItem = __decorate([\n        Component({\n            selector: 'ng2-menu-item',\n            template: \"\\n        <div\\n            class=\\\"ng2-menu-item\\\"\\n            role=\\\"button\\\"\\n            tabindex=\\\"0\\\"\\n            [class.ng2-menu-item--selected]=\\\"isSelected\\\"\\n            (keydown.enter)=\\\"click()\\\"\\n            (click)=\\\"click()\\\"\\n            (mouseover)=\\\"select()\\\"\\n        >\\n            <ng-content></ng-content>\\n        </div>\\n    \",\n            styles: [\".ng2-menu-item{font-family:Roboto,\\\"Helvetica Neue\\\",Helvetica,Arial;background:#fff;color:rgba(0,0,0,.87);cursor:pointer;font-size:.9em;text-transform:none;font-weight:400;letter-spacing:.03em;height:48px;line-height:48px;padding:.3em 1.25rem;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;transition:background .25s}.ng2-menu-item--selected{background:rgba(158,158,158,.2);outline:0}.ng2-menu-item:focus{outline:0}.ng2-menu-item:active{background:rgba(158,158,158,.4)}:host(ng2-menu-item) ::ng-deep [ng2-menu-item-icon]{vertical-align:middle;font-size:28px;width:1.5em;height:30px;color:rgba(0,0,0,.44)}\"]\n        })\n    ], Ng2MenuItem);\n    return Ng2MenuItem;\n}());\n\nvar Ng2DropdownMenu = /** @class */ (function () {\n    function Ng2DropdownMenu(dropdownState, element, renderer) {\n        this.dropdownState = dropdownState;\n        this.element = element;\n        this.renderer = renderer;\n        /**\n         * @name width\n         */\n        this.width = 4;\n        /**\n         * @description if set to true, the first element of the dropdown will be automatically focused\n         * @name focusFirstElement\n         */\n        this.focusFirstElement = true;\n        /**\n         * @name appendToBody\n         */\n        this.appendToBody = true;\n        /**\n         * @name zIndex\n         */\n        this.zIndex = 1000;\n        this.listeners = {\n            arrowHandler: undefined,\n            handleKeypress: undefined\n        };\n    }\n    /**\n     * @name show\n     * @shows menu and selects first item\n     */\n    Ng2DropdownMenu.prototype.show = function (position, dynamic) {\n        if (dynamic === void 0) { dynamic = true; }\n        var dc = typeof document !== 'undefined' ? document : undefined;\n        var wd = typeof window !== 'undefined' ? window : undefined;\n        if (!this.dropdownState.menuState.isVisible) {\n            // setting handlers\n            this.listeners.handleKeypress = this.renderer.listen(dc.body, 'keydown', this.handleKeypress.bind(this));\n            this.listeners.arrowHandler = this.renderer.listen(wd, 'keydown', arrowKeysHandler);\n        }\n        // update state\n        this.dropdownState.menuState.isVisible = true;\n        if (position) {\n            this.updatePosition(position, dynamic);\n        }\n    };\n    /**\n     * @name hide\n     * @desc hides menu\n     */\n    Ng2DropdownMenu.prototype.hide = function () {\n        this.dropdownState.menuState.isVisible = false;\n        // reset selected item state\n        this.dropdownState.dropdownState.unselect();\n        // call function to unlisten\n        this.listeners.arrowHandler && this.listeners.arrowHandler();\n        this.listeners.handleKeypress && this.listeners.handleKeypress();\n    };\n    /**\n     * @name updatePosition\n     * @desc updates the menu position every time it is toggled\n     * @param position {ClientRect}\n     * @param dynamic {boolean}\n     */\n    Ng2DropdownMenu.prototype.updatePosition = function (position, dynamic) {\n        this.position = position;\n        this.updateOnChange(dynamic);\n    };\n    /**\n     * @name handleKeypress\n     * @desc executes functions on keyPress based on the key pressed\n     * @param $event\n     */\n    Ng2DropdownMenu.prototype.handleKeypress = function ($event) {\n        var key = $event.keyCode;\n        var items = this.items.toArray();\n        var index = items.indexOf(this.dropdownState.dropdownState.selectedItem);\n        if (!ACTIONS.hasOwnProperty(key)) {\n            return;\n        }\n        ACTIONS[key].call(this, index, items, this.dropdownState.dropdownState);\n    };\n    /**\n     * @name getMenuElement\n     */\n    Ng2DropdownMenu.prototype.getMenuElement = function () {\n        return this.element.nativeElement.children[0];\n    };\n    /**\n     * @name calcPositionOffset\n     * @param position\n     */\n    Ng2DropdownMenu.prototype.calcPositionOffset = function (position) {\n        var wd = typeof window !== 'undefined' ? window : undefined;\n        var dc = typeof document !== 'undefined' ? document : undefined;\n        if (!wd || !dc || !position) {\n            return;\n        }\n        var element = this.getMenuElement();\n        var supportPageOffset = wd.pageXOffset !== undefined;\n        var isCSS1Compat = (dc.compatMode || '') === 'CSS1Compat';\n        var x = supportPageOffset\n            ? wd.pageXOffset\n            : isCSS1Compat\n                ? dc.documentElement.scrollLeft\n                : dc.body.scrollLeft;\n        var y = supportPageOffset\n            ? wd.pageYOffset\n            : isCSS1Compat\n                ? dc.documentElement.scrollTop\n                : dc.body.scrollTop;\n        var _a = this.applyOffset(position.top + (this.appendToBody ? y - 15 : 0) + \"px\", position.left + x - 5 + \"px\"), top = _a.top, left = _a.left;\n        var clientWidth = element.clientWidth;\n        var clientHeight = element.clientHeight;\n        var marginFromBottom = parseInt(top) + clientHeight + (this.appendToBody ? 0 : y - 15);\n        var marginFromRight = parseInt(left) + clientWidth;\n        var windowScrollHeight = wd.innerHeight + wd.scrollY;\n        var windowScrollWidth = wd.innerWidth + wd.scrollX;\n        if (marginFromBottom >= windowScrollHeight) {\n            top = parseInt(top.replace('px', '')) - clientHeight + \"px\";\n        }\n        if (marginFromRight >= windowScrollWidth) {\n            var marginRight = marginFromRight - windowScrollWidth + 30;\n            left = parseInt(left.replace('px', '')) - marginRight + \"px\";\n        }\n        return { top: top, left: left };\n    };\n    Ng2DropdownMenu.prototype.applyOffset = function (top, left) {\n        if (!this.offset) {\n            return { top: top, left: left };\n        }\n        var offset = this.offset.split(' ');\n        if (!offset[1]) {\n            offset[1] = '0';\n        }\n        top = parseInt(top.replace('px', '')) + parseInt(offset[0]) + \"px\";\n        left = parseInt(left.replace('px', '')) + parseInt(offset[1]) + \"px\";\n        return { top: top, left: left };\n    };\n    Ng2DropdownMenu.prototype.ngOnInit = function () {\n        var dc = typeof document !== 'undefined' ? document : undefined;\n        if (this.appendToBody) {\n            // append menu element to the body\n            dc.body.appendChild(this.element.nativeElement);\n        }\n    };\n    Ng2DropdownMenu.prototype.updateOnChange = function (dynamic) {\n        if (dynamic === void 0) { dynamic = true; }\n        var element = this.getMenuElement();\n        var position = this.calcPositionOffset(this.position);\n        if (position) {\n            this.renderer.setStyle(element, 'top', position.top.toString());\n            this.renderer.setStyle(element, 'left', position.left.toString());\n        }\n        // select first item unless user disabled this option\n        if (this.focusFirstElement &&\n            this.items.first &&\n            !this.dropdownState.dropdownState.selectedItem) {\n            this.dropdownState.dropdownState.select(this.items.first, false);\n        }\n    };\n    Ng2DropdownMenu.prototype.ngOnDestroy = function () {\n        var elem = this.element.nativeElement;\n        elem.parentNode.removeChild(elem);\n        if (this.listeners.handleKeypress) {\n            this.listeners.handleKeypress();\n        }\n    };\n    Ng2DropdownMenu.ctorParameters = function () { return [\n        { type: DropdownStateService },\n        { type: ElementRef },\n        { type: Renderer2 }\n    ]; };\n    __decorate([\n        Input()\n    ], Ng2DropdownMenu.prototype, \"width\", void 0);\n    __decorate([\n        Input()\n    ], Ng2DropdownMenu.prototype, \"focusFirstElement\", void 0);\n    __decorate([\n        Input()\n    ], Ng2DropdownMenu.prototype, \"offset\", void 0);\n    __decorate([\n        Input()\n    ], Ng2DropdownMenu.prototype, \"appendToBody\", void 0);\n    __decorate([\n        Input()\n    ], Ng2DropdownMenu.prototype, \"zIndex\", void 0);\n    __decorate([\n        ContentChildren(Ng2MenuItem, { descendants: true })\n    ], Ng2DropdownMenu.prototype, \"items\", void 0);\n    Ng2DropdownMenu = __decorate([\n        Component({\n            selector: 'ng2-dropdown-menu',\n            template: \"\\n        <!-- MENU -->\\n        <div\\n            class=\\\"ng2-dropdown-menu ng2-dropdown-menu---width--{{ width }}\\\"\\n            [class.ng2-dropdown-menu--inside-element]=\\\"!appendToBody\\\"\\n            [class.ng2-dropdown-menu--open]=\\\"dropdownState.menuState.isVisible\\\"\\n            [style.z-index]=\\\"zIndex\\\"\\n            [@fade]=\\\"dropdownState.menuState.toString()\\\"\\n        >\\n            <div\\n                class=\\\"ng2-dropdown-menu__options-container\\\"\\n                [@opacity]=\\\"dropdownState.menuState.toString()\\\"\\n            >\\n                <ng-content></ng-content>\\n            </div>\\n        </div>\\n\\n        <!-- BACKDROP -->\\n        <div\\n            class=\\\"ng2-dropdown-backdrop\\\"\\n            *ngIf=\\\"dropdownState.menuState.isVisible\\\"\\n            (click)=\\\"hide()\\\"\\n        ></div>\\n    \",\n            animations: [\n                trigger('fade', [\n                    state('visible', style({ opacity: 1, height: '*', width: '*' })),\n                    state('hidden', style({ opacity: 0, overflow: 'hidden', height: 0, width: 0 })),\n                    transition('hidden => visible', [\n                        animate('250ms ease-in', style({ opacity: 1, height: '*', width: '*' }))\n                    ]),\n                    transition('visible => hidden', [\n                        animate('350ms ease-out', style({ opacity: 0, width: 0, height: 0 }))\n                    ])\n                ]),\n                trigger('opacity', [\n                    transition('hidden => visible', [\n                        animate('450ms ease-in', keyframes([\n                            style({ opacity: 0, offset: 0 }),\n                            style({ opacity: 1, offset: 1 })\n                        ]))\n                    ]),\n                    transition('visible => hidden', [\n                        animate('250ms ease-out', keyframes([\n                            style({ opacity: 1, offset: 0 }),\n                            style({ opacity: 0.5, offset: 0.3 }),\n                            style({ opacity: 0, offset: 1 })\n                        ]))\n                    ])\n                ])\n            ],\n            styles: [\":host{display:block}.ng2-dropdown-menu{overflow-y:auto;box-shadow:0 1px 2px 0 rgba(0,0,0,.3);position:absolute;padding:.5em 0;background:#fff;border-radius:1px;max-height:400px;width:260px;min-height:0;display:block}.ng2-dropdown-menu.ng2-dropdown-menu--inside-element{position:fixed}.ng2-dropdown-menu.ng2-dropdown-menu--width--2{width:200px}.ng2-dropdown-menu.ng2-dropdown-menu--width--4{width:260px}.ng2-dropdown-menu.ng2-dropdown-menu--width--6{width:320px}.ng2-dropdown-backdrop{position:fixed;top:0;left:0;width:100%;height:100%;z-index:1;overflow:hidden}:host ::ng-deep .ng2-menu-divider{height:1px;min-height:1px;max-height:1px;width:100%;display:block;background:#f9f9f9}\"]\n        })\n    ], Ng2DropdownMenu);\n    return Ng2DropdownMenu;\n}());\n\nvar Ng2Dropdown = /** @class */ (function () {\n    function Ng2Dropdown(state) {\n        this.state = state;\n        this.dynamicUpdate = true;\n        // outputs\n        this.onItemClicked = new EventEmitter();\n        this.onItemSelected = new EventEmitter();\n        this.onShow = new EventEmitter();\n        this.onHide = new EventEmitter();\n    }\n    Ng2Dropdown.prototype.ngOnInit = function () {\n        var _this = this;\n        this.state.dropdownState.onItemClicked.subscribe(function (item) {\n            _this.onItemClicked.emit(item);\n            if (item.preventClose) {\n                return;\n            }\n            _this.hide.call(_this);\n        });\n        if (this.button) {\n            this.button.onMenuToggled.subscribe(function () {\n                _this.toggleMenu();\n            });\n        }\n        this.state.dropdownState.onItemSelected.subscribe(function (item) {\n            _this.onItemSelected.emit(item);\n        });\n        this.state.dropdownState.onItemDestroyed.subscribe(function (item) {\n            var newSelectedItem;\n            var items = _this.menu.items.toArray();\n            if (item !== _this.state.dropdownState.selectedItem) {\n                return;\n            }\n            if (_this.menu.focusFirstElement) {\n                newSelectedItem =\n                    item === items[0] && items.length > 1\n                        ? items[1]\n                        : items[0];\n            }\n            _this.state.dropdownState.select(newSelectedItem);\n        });\n    };\n    /**\n     * @name toggleMenu\n     * @desc toggles menu visibility\n     */\n    Ng2Dropdown.prototype.toggleMenu = function (position) {\n        if (position === void 0) { position = this.button.getPosition(); }\n        this.state.menuState.isVisible ? this.hide() : this.show(position);\n    };\n    /**\n     * - hides dropdown\n     * @name hide\n     */\n    Ng2Dropdown.prototype.hide = function () {\n        this.menu.hide();\n        this.onHide.emit(this);\n    };\n    /**\n     * - shows dropdown\n     * @name show\n     * @param position\n     */\n    Ng2Dropdown.prototype.show = function (position) {\n        if (position === void 0) { position = this.button.getPosition(); }\n        this.menu.show(position, this.dynamicUpdate);\n        this.onShow.emit(this);\n    };\n    /**\n     * @name scrollListener\n     */\n    Ng2Dropdown.prototype.scrollListener = function () {\n        if (this.button && this.dynamicUpdate) {\n            this.menu.updatePosition(this.button.getPosition(), true);\n        }\n    };\n    Ng2Dropdown.ctorParameters = function () { return [\n        { type: DropdownStateService }\n    ]; };\n    __decorate([\n        ContentChild(Ng2DropdownButton, { static: true })\n    ], Ng2Dropdown.prototype, \"button\", void 0);\n    __decorate([\n        ContentChild(Ng2DropdownMenu, { static: true })\n    ], Ng2Dropdown.prototype, \"menu\", void 0);\n    __decorate([\n        Input()\n    ], Ng2Dropdown.prototype, \"dynamicUpdate\", void 0);\n    __decorate([\n        Output()\n    ], Ng2Dropdown.prototype, \"onItemClicked\", void 0);\n    __decorate([\n        Output()\n    ], Ng2Dropdown.prototype, \"onItemSelected\", void 0);\n    __decorate([\n        Output()\n    ], Ng2Dropdown.prototype, \"onShow\", void 0);\n    __decorate([\n        Output()\n    ], Ng2Dropdown.prototype, \"onHide\", void 0);\n    __decorate([\n        HostListener('window:scroll')\n    ], Ng2Dropdown.prototype, \"scrollListener\", null);\n    Ng2Dropdown = __decorate([\n        Component({\n            selector: 'ng2-dropdown',\n            template: \"\\n        <div class=\\\"ng2-dropdown-container\\\">\\n            <ng-content select=\\\"ng2-dropdown-button\\\"></ng-content>\\n            <ng-content select=\\\"ng2-dropdown-menu\\\"></ng-content>\\n        </div>\\n    \",\n            providers: [DropdownStateService]\n        })\n    ], Ng2Dropdown);\n    return Ng2Dropdown;\n}());\n\nvar Ng2DropdownModule = /** @class */ (function () {\n    function Ng2DropdownModule() {\n    }\n    Ng2DropdownModule = __decorate([\n        NgModule({\n            exports: [\n                Ng2MenuItem,\n                Ng2DropdownButton,\n                Ng2DropdownMenu,\n                Ng2Dropdown\n            ],\n            declarations: [\n                Ng2Dropdown,\n                Ng2MenuItem,\n                Ng2DropdownButton,\n                Ng2DropdownMenu,\n            ],\n            imports: [\n                CommonModule\n            ]\n        })\n    ], Ng2DropdownModule);\n    return Ng2DropdownModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DropdownStateService, Ng2Dropdown, Ng2DropdownButton, Ng2DropdownMenu, Ng2DropdownModule, Ng2MenuItem };\n"]}