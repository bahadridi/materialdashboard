{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/ng2-nouislider/ng2-nouislider.js"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsNC,6HAuBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAiCA;;;;;CAGD,4IAMC;;;;;;;;;;;;0BAIyC","file":"ng2-nouislider.js","sourcesContent":["import { create } from 'nouislider';\nimport { Component, ElementRef, EventEmitter, Input, NgModule, Output, Renderer2, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nclass DefaultFormatter {\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    to(value) {\n        // formatting with http://stackoverflow.com/a/26463364/478584\n        return String(parseFloat(parseFloat(String(value)).toFixed(2)));\n    }\n    ;\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    from(value) {\n        return parseFloat(value);\n    }\n}\nclass NouisliderComponent {\n    /**\n     * @param {?} el\n     * @param {?} renderer\n     */\n    constructor(el, renderer) {\n        this.el = el;\n        this.renderer = renderer;\n        this.config = {};\n        this.change = new EventEmitter(true);\n        this.update = new EventEmitter(true);\n        this.slide = new EventEmitter(true);\n        this.set = new EventEmitter(true);\n        this.start = new EventEmitter(true);\n        this.end = new EventEmitter(true);\n        this.onChange = Function.prototype;\n        this.onTouched = Function.prototype;\n        this.eventHandler = (emitter, values, handle, unencoded) => {\n            let /** @type {?} */ v = this.toValues(values);\n            let /** @type {?} */ emitEvents = false;\n            if (this.value === undefined) {\n                this.value = v;\n                return;\n            }\n            if (Array.isArray(v) && this.value[handle] != v[handle]) {\n                emitEvents = true;\n            }\n            if (!Array.isArray(v) && this.value != v) {\n                emitEvents = true;\n            }\n            if (emitEvents) {\n                emitter.emit(v);\n                this.onChange(v);\n            }\n            if (Array.isArray(v)) {\n                this.value[handle] = v[handle];\n            }\n            else {\n                this.value = v;\n            }\n        };\n        this.defaultKeyHandler = (e) => {\n            let /** @type {?} */ stepSize = this.slider.steps();\n            let /** @type {?} */ index = parseInt(((e.target)).getAttribute('data-handle'));\n            let /** @type {?} */ sign = 1;\n            let /** @type {?} */ multiplier = 1;\n            let /** @type {?} */ step = 0;\n            let /** @type {?} */ delta = 0;\n            switch (e.which) {\n                case 34:// PageDown\n                    multiplier = this.config.pageSteps;\n                case 40: // ArrowDown\n                case 37:// ArrowLeft\n                    sign = -1;\n                    step = stepSize[index][0];\n                    e.preventDefault();\n                    break;\n                case 33:// PageUp\n                    multiplier = this.config.pageSteps;\n                case 38: // ArrowUp\n                case 39:// ArrowRight\n                    step = stepSize[index][1];\n                    e.preventDefault();\n                    break;\n                default:\n                    break;\n            }\n            delta = sign * multiplier * step;\n            let /** @type {?} */ newValue;\n            if (Array.isArray(this.value)) {\n                newValue = [].concat(this.value);\n                newValue[index] = newValue[index] + delta;\n            }\n            else {\n                newValue = this.value + delta;\n            }\n            this.slider.set(newValue);\n        };\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        let /** @type {?} */ inputsConfig = JSON.parse(JSON.stringify({\n            behaviour: this.behaviour,\n            connect: this.connect,\n            limit: this.limit,\n            start: this.formControl !== undefined ? this.formControl.value : this.ngModel,\n            step: this.step,\n            pageSteps: this.pageSteps,\n            keyboard: this.keyboard,\n            onKeydown: this.onKeydown,\n            range: this.range || this.config.range || { min: this.min, max: this.max },\n            tooltips: this.tooltips,\n            snap: this.snap,\n            animate: this.animate\n        }));\n        inputsConfig.tooltips = this.tooltips || this.config.tooltips;\n        inputsConfig.format = this.format || this.config.format || new DefaultFormatter();\n        this.slider = create(this.el.nativeElement.querySelector('div'), Object.assign(this.config, inputsConfig));\n        this.handles = [].slice.call(this.el.nativeElement.querySelectorAll('.noUi-handle'));\n        if (this.config.keyboard) {\n            if (this.config.pageSteps === undefined) {\n                this.config.pageSteps = 10;\n            }\n            for (let /** @type {?} */ handle of this.handles) {\n                handle.setAttribute('tabindex', 0);\n                handle.addEventListener('click', () => {\n                    handle.focus();\n                });\n                if (this.config.onKeydown === undefined) {\n                    handle.addEventListener('keydown', this.defaultKeyHandler);\n                }\n                else {\n                    handle.addEventListener('keydown', this.config.onKeydown);\n                }\n            }\n        }\n        this.slider.on('set', (values, handle, unencoded) => {\n            this.eventHandler(this.set, values, handle, unencoded);\n        });\n        this.slider.on('update', (values, handle, unencoded) => {\n            this.update.emit(this.toValues(values));\n        });\n        this.slider.on('change', (values, handle, unencoded) => {\n            this.change.emit(this.toValues(values));\n        });\n        this.slider.on('slide', (values, handle, unencoded) => {\n            this.eventHandler(this.slide, values, handle, unencoded);\n        });\n        this.slider.on('start', (values, handle, unencoded) => {\n            this.start.emit(this.toValues(values));\n        });\n        this.slider.on('end', (values, handle, unencoded) => {\n            this.end.emit(this.toValues(values));\n        });\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (this.slider && (changes.min || changes.max || changes.step || changes.range)) {\n            setTimeout(() => {\n                this.slider.updateOptions({\n                    range: Object.assign({}, {\n                        min: this.min,\n                        max: this.max\n                    }, this.range || {}),\n                    step: this.step\n                });\n            });\n        }\n    }\n    /**\n     * @param {?} values\n     * @return {?}\n     */\n    toValues(values) {\n        let /** @type {?} */ v = values.map(this.config.format.from);\n        return (v.length == 1 ? v[0] : v);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.slider) {\n            setTimeout(() => {\n                this.slider.set(value);\n            });\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        isDisabled\n            ? this.renderer.setAttribute(this.el.nativeElement.childNodes[0], 'disabled', 'true')\n            : this.renderer.removeAttribute(this.el.nativeElement.childNodes[0], 'disabled');\n    }\n}\nNouisliderComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'nouislider',\n                host: {\n                    '[class.ng2-nouislider]': 'true'\n                },\n                template: '<div [attr.disabled]=\"disabled ? true : undefined\"></div>',\n                styles: [`\n    :host {\n      display: block;\n      margin-top: 1rem;\n      margin-bottom: 1rem;\n    }\n  `],\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => NouisliderComponent),\n                        multi: true\n                    }\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nNouisliderComponent.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n];\nNouisliderComponent.propDecorators = {\n    'disabled': [{ type: Input },],\n    'behaviour': [{ type: Input },],\n    'connect': [{ type: Input },],\n    'limit': [{ type: Input },],\n    'min': [{ type: Input },],\n    'max': [{ type: Input },],\n    'snap': [{ type: Input },],\n    'animate': [{ type: Input },],\n    'range': [{ type: Input },],\n    'step': [{ type: Input },],\n    'format': [{ type: Input },],\n    'pageSteps': [{ type: Input },],\n    'config': [{ type: Input },],\n    'ngModel': [{ type: Input },],\n    'keyboard': [{ type: Input },],\n    'onKeydown': [{ type: Input },],\n    'formControl': [{ type: Input },],\n    'tooltips': [{ type: Input },],\n    'change': [{ type: Output },],\n    'update': [{ type: Output },],\n    'slide': [{ type: Output },],\n    'set': [{ type: Output },],\n    'start': [{ type: Output },],\n    'end': [{ type: Output },],\n};\n\nclass NouisliderModule {\n}\nNouisliderModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [NouisliderComponent],\n                declarations: [NouisliderComponent],\n            },] },\n];\n/**\n * @nocollapse\n */\nNouisliderModule.ctorParameters = () => [];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DefaultFormatter, NouisliderComponent, NouisliderModule };\n"]}