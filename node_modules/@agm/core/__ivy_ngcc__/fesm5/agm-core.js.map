{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@agm/core/fesm5/agm-core.js"],"names":[],"mappings":"AAAA;;;;;;;;;AAMA;;KAEK;;;;;gDAGiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAgPiB,AAEhC;;;;;;gGACsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BAmEE,AAExB;;;;;;8EACc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAiDe,AAI7B;;;;;;;;;;;oBACmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCA0FM,AAEzB;;;;;;uGACe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CAkSoB,AAInC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAgGiB,AAE5B;;;;;;uGACkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDA8QuB,AAIzC;;;;;;;;;;;;;;;oBACc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAsDc,AAE5B;;;;;;uEACkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BAkFM,AAIxB;;;;;;;;;;;;;;;oBAGc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCA2HW,AAEzB;;;;;;uGACe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAiFc,AAE7B;;;;;;;gIAEmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDA0IwB,AAK3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAuDY,AAE3B;;;;;;uGACiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CA8IsB,AAIvC;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCA0La,AAE1B;;;;;;uGACgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sDA8K+B,AAE/C;;;;;;uGACiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCA0FW,AAE5B;;;;;;uGACkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAkoBW,AAwB7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CAwU2B,AAYnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4CAyT0B,AAIrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0DAiFuC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAGlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wDA0CgC,AAOjD;;;;;;;;;;;;;;;;;;;;oBACkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CAuSqB,AAIvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDA2S4B,AAIzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAiDa,AAI3B;;;;;;;;;;;oBACiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BA8GM,AAEvB;;;;;;;uEACa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAkIgB,AAE7B;;;;;;;;;;;;;;;;kCAGmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBAgEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAGF","file":"agm-core.js","sourcesContent":["import { __decorate, __metadata, __param, __awaiter, __generator, __spread, __read, __extends } from 'tslib';\nimport { Injectable, NgZone, Input, Directive, EventEmitter, Output, Self, ElementRef, Component, Inject, PLATFORM_ID, QueryList, ContentChildren, forwardRef, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Optional, LOCALE_ID, NgModule } from '@angular/core';\nimport { Observable, BehaviorSubject, from, timer, Subject, fromEventPattern, merge, ReplaySubject, bindCallback, of, throwError } from 'rxjs';\nimport { flatMap, sample, switchMap, map, shareReplay, distinctUntilChanged, takeUntil, startWith, skip, multicast } from 'rxjs/operators';\nimport { isPlatformServer } from '@angular/common';\n\nvar MapsAPILoader = /** @class */ (function () {\n    function MapsAPILoader() {\n    }\n    MapsAPILoader = __decorate([\n        Injectable()\n    ], MapsAPILoader);\n    return MapsAPILoader;\n}());\n\n/**\n * Wrapper class that handles the communication with the Google Maps Javascript\n * API v3\n */\nvar GoogleMapsAPIWrapper = /** @class */ (function () {\n    function GoogleMapsAPIWrapper(_loader, _zone) {\n        var _this = this;\n        this._loader = _loader;\n        this._zone = _zone;\n        this._map =\n            new Promise(function (resolve) { _this._mapResolver = resolve; });\n    }\n    GoogleMapsAPIWrapper.prototype.createMap = function (el, mapOptions) {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this._loader.load().then(function () {\n                var map = new google.maps.Map(el, mapOptions);\n                _this._mapResolver(map);\n                return;\n            });\n        });\n    };\n    GoogleMapsAPIWrapper.prototype.setMapOptions = function (options) {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            _this._map.then(function (m) { m.setOptions(options); });\n        });\n    };\n    /**\n     * Creates a google map marker with the map context\n     */\n    GoogleMapsAPIWrapper.prototype.createMarker = function (options, addToMap) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        if (addToMap === void 0) { addToMap = true; }\n        return this._zone.runOutsideAngular(function () {\n            return _this._map.then(function (map) {\n                if (addToMap) {\n                    options.map = map;\n                }\n                return new google.maps.Marker(options);\n            });\n        });\n    };\n    GoogleMapsAPIWrapper.prototype.createInfoWindow = function (options) {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this._map.then(function () { return new google.maps.InfoWindow(options); });\n        });\n    };\n    /**\n     * Creates a google.map.Circle for the current map.\n     */\n    GoogleMapsAPIWrapper.prototype.createCircle = function (options) {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this._map.then(function (map) {\n                if (typeof options.strokePosition === 'string') {\n                    options.strokePosition = google.maps.StrokePosition[options.strokePosition];\n                }\n                options.map = map;\n                return new google.maps.Circle(options);\n            });\n        });\n    };\n    /**\n     * Creates a google.map.Rectangle for the current map.\n     */\n    GoogleMapsAPIWrapper.prototype.createRectangle = function (options) {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this._map.then(function (map) {\n                options.map = map;\n                return new google.maps.Rectangle(options);\n            });\n        });\n    };\n    GoogleMapsAPIWrapper.prototype.createPolyline = function (options) {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this.getNativeMap().then(function (map) {\n                var line = new google.maps.Polyline(options);\n                line.setMap(map);\n                return line;\n            });\n        });\n    };\n    GoogleMapsAPIWrapper.prototype.createPolygon = function (options) {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this.getNativeMap().then(function (map) {\n                var polygon = new google.maps.Polygon(options);\n                polygon.setMap(map);\n                return polygon;\n            });\n        });\n    };\n    /**\n     * Creates a new google.map.Data layer for the current map\n     */\n    GoogleMapsAPIWrapper.prototype.createDataLayer = function (options) {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this._map.then(function (m) {\n                var data = new google.maps.Data(options);\n                data.setMap(m);\n                return data;\n            });\n        });\n    };\n    /**\n     * Creates a TransitLayer instance for a map\n     * @param {TransitLayerOptions} options - used for setting layer options\n     * @returns {Promise<TransitLayer>} a new transit layer object\n     */\n    GoogleMapsAPIWrapper.prototype.createTransitLayer = function (options) {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this._map.then(function (map) {\n                var newLayer = new google.maps.TransitLayer();\n                newLayer.setMap(options.visible ? map : null);\n                return newLayer;\n            });\n        });\n    };\n    /**\n     * Creates a BicyclingLayer instance for a map\n     * @param {BicyclingLayerOptions} options - used for setting layer options\n     * @returns {Promise<BicyclingLayer>} a new bicycling layer object\n     */\n    GoogleMapsAPIWrapper.prototype.createBicyclingLayer = function (options) {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this._map.then(function (map) {\n                var newLayer = new google.maps.BicyclingLayer();\n                newLayer.setMap(options.visible ? map : null);\n                return newLayer;\n            });\n        });\n    };\n    /**\n     * Determines if given coordinates are insite a Polygon path.\n     */\n    GoogleMapsAPIWrapper.prototype.containsLocation = function (latLng, polygon) {\n        return google.maps.geometry.poly.containsLocation(latLng, polygon);\n    };\n    GoogleMapsAPIWrapper.prototype.subscribeToMapEvent = function (eventName) {\n        var _this = this;\n        return new Observable(function (observer) {\n            _this._map.then(function (m) {\n                m.addListener(eventName, function (arg) { _this._zone.run(function () { return observer.next(arg); }); });\n            });\n        });\n    };\n    GoogleMapsAPIWrapper.prototype.clearInstanceListeners = function () {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            _this._map.then(function (map) {\n                google.maps.event.clearInstanceListeners(map);\n            });\n        });\n    };\n    GoogleMapsAPIWrapper.prototype.setCenter = function (latLng) {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this._map.then(function (map) { return map.setCenter(latLng); });\n        });\n    };\n    GoogleMapsAPIWrapper.prototype.getZoom = function () {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this._map.then(function (map) { return map.getZoom(); });\n        });\n    };\n    GoogleMapsAPIWrapper.prototype.getBounds = function () {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this._map.then(function (map) { return map.getBounds(); });\n        });\n    };\n    GoogleMapsAPIWrapper.prototype.getMapTypeId = function () {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this._map.then(function (map) { return map.getMapTypeId(); });\n        });\n    };\n    GoogleMapsAPIWrapper.prototype.setZoom = function (zoom) {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this._map.then(function (map) { return map.setZoom(zoom); });\n        });\n    };\n    GoogleMapsAPIWrapper.prototype.getCenter = function () {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this._map.then(function (map) { return map.getCenter(); });\n        });\n    };\n    GoogleMapsAPIWrapper.prototype.panTo = function (latLng) {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this._map.then(function (map) { return map.panTo(latLng); });\n        });\n    };\n    GoogleMapsAPIWrapper.prototype.panBy = function (x, y) {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this._map.then(function (map) { return map.panBy(x, y); });\n        });\n    };\n    GoogleMapsAPIWrapper.prototype.fitBounds = function (latLng, padding) {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this._map.then(function (map) { return map.fitBounds(latLng, padding); });\n        });\n    };\n    GoogleMapsAPIWrapper.prototype.panToBounds = function (latLng, padding) {\n        var _this = this;\n        return this._zone.runOutsideAngular(function () {\n            return _this._map.then(function (map) { return map.panToBounds(latLng, padding); });\n        });\n    };\n    /**\n     * Returns the native Google Maps Map instance. Be careful when using this instance directly.\n     */\n    GoogleMapsAPIWrapper.prototype.getNativeMap = function () { return this._map; };\n    /**\n     * Triggers the given event name on the map instance.\n     */\n    GoogleMapsAPIWrapper.prototype.triggerMapEvent = function (eventName) {\n        return this._map.then(function (m) { return google.maps.event.trigger(m, eventName); });\n    };\n    GoogleMapsAPIWrapper.ctorParameters = function () { return [\n        { type: MapsAPILoader },\n        { type: NgZone }\n    ]; };\n    GoogleMapsAPIWrapper = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [MapsAPILoader, NgZone])\n    ], GoogleMapsAPIWrapper);\n    return GoogleMapsAPIWrapper;\n}());\n\n/**\n * This class manages Transit and Bicycling Layers for a Google Map instance.\n */\nvar LayerManager = /** @class */ (function () {\n    function LayerManager(_wrapper) {\n        this._wrapper = _wrapper;\n        this._layers = new Map();\n    }\n    /**\n     * Adds a transit layer to a map instance.\n     * @param {AgmTransitLayer} layer - a TransitLayer object\n     * @param {TransitLayerOptions} options - TransitLayerOptions options\n     * @returns void\n     */\n    LayerManager.prototype.addTransitLayer = function (layer, options) {\n        var newLayer = this._wrapper.createTransitLayer(options);\n        this._layers.set(layer, newLayer);\n    };\n    /**\n     * Adds a bicycling layer to a map instance.\n     * @param {AgmBicyclingLayer} layer - a bicycling layer object\n     * @param {BicyclingLayerOptions} options - BicyclingLayer options\n     * @returns void\n     */\n    LayerManager.prototype.addBicyclingLayer = function (layer, options) {\n        var newLayer = this._wrapper.createBicyclingLayer(options);\n        this._layers.set(layer, newLayer);\n    };\n    /**\n     * Deletes a map layer\n     * @param {AgmTransitLayer|AgmBicyclingLayer} layer - the layer to delete\n     * @returns  Promise<void>\n     */\n    LayerManager.prototype.deleteLayer = function (layer) {\n        var _this = this;\n        return this._layers.get(layer).then(function (currentLayer) {\n            currentLayer.setMap(null);\n            _this._layers.delete(layer);\n        });\n    };\n    /**\n     * Hide/Show a google map layer\n     * @param { AgmTransitLayer|AgmBicyclingLayer} layer - the layer to hide/show\n     * @param {TransitLayerOptions|BicyclingLayerOptions} options - used to set visibility of the layer\n     * @returns Promise<void>\n     */\n    LayerManager.prototype.toggleLayerVisibility = function (layer, options) {\n        var _this = this;\n        return this._layers.get(layer).then(function (currentLayer) {\n            if (!options.visible) {\n                currentLayer.setMap(null);\n                return;\n            }\n            else {\n                return _this._wrapper.getNativeMap().then(function (map) {\n                    currentLayer.setMap(map);\n                });\n            }\n        });\n    };\n    LayerManager.ctorParameters = function () { return [\n        { type: GoogleMapsAPIWrapper }\n    ]; };\n    LayerManager = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper])\n    ], LayerManager);\n    return LayerManager;\n}());\n\nvar layerId = 0;\n/*\n * This directive adds a bicycling layer to a google map instance\n * <agm-bicycling-layer [visible]=\"true|false\"> <agm-bicycling-layer>\n * */\nvar AgmBicyclingLayer = /** @class */ (function () {\n    function AgmBicyclingLayer(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId++).toString();\n        /**\n         * Hide/show bicycling layer\n         */\n        this.visible = true;\n    }\n    AgmBicyclingLayer.prototype.ngOnInit = function () {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addBicyclingLayer(this, { visible: this.visible });\n        this._addedToManager = true;\n    };\n    AgmBicyclingLayer.prototype.ngOnChanges = function (changes) {\n        if (!this._addedToManager) {\n            return;\n        }\n        if (changes['visible'] != null) {\n            this._manager.toggleLayerVisibility(this, { visible: changes['visible'].currentValue });\n        }\n    };\n    /** @internal */\n    AgmBicyclingLayer.prototype.id = function () { return this._id; };\n    /** @internal */\n    AgmBicyclingLayer.prototype.toString = function () { return \"AgmBicyclingLayer-\" + this._id.toString(); };\n    /** @internal */\n    AgmBicyclingLayer.prototype.ngOnDestroy = function () {\n        this._manager.deleteLayer(this);\n    };\n    AgmBicyclingLayer.ctorParameters = function () { return [\n        { type: LayerManager }\n    ]; };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmBicyclingLayer.prototype, \"visible\", void 0);\n    AgmBicyclingLayer = __decorate([\n        Directive({\n            selector: 'agm-bicycling-layer',\n        }),\n        __metadata(\"design:paramtypes\", [LayerManager])\n    ], AgmBicyclingLayer);\n    return AgmBicyclingLayer;\n}());\n\nvar CircleManager = /** @class */ (function () {\n    function CircleManager(_apiWrapper, _zone) {\n        this._apiWrapper = _apiWrapper;\n        this._zone = _zone;\n        this._circles = new Map();\n    }\n    CircleManager.prototype.addCircle = function (circle) {\n        this._circles.set(circle, this._apiWrapper.createCircle({\n            center: { lat: circle.latitude, lng: circle.longitude },\n            clickable: circle.clickable,\n            draggable: circle.draggable,\n            editable: circle.editable,\n            fillColor: circle.fillColor,\n            fillOpacity: circle.fillOpacity,\n            radius: circle.radius,\n            strokeColor: circle.strokeColor,\n            strokeOpacity: circle.strokeOpacity,\n            strokePosition: circle.strokePosition,\n            strokeWeight: circle.strokeWeight,\n            visible: circle.visible,\n            zIndex: circle.zIndex,\n        }));\n    };\n    /**\n     * Removes the given circle from the map.\n     */\n    CircleManager.prototype.removeCircle = function (circle) {\n        var _this = this;\n        return this._circles.get(circle).then(function (c) {\n            c.setMap(null);\n            _this._circles.delete(circle);\n        });\n    };\n    CircleManager.prototype.setOptions = function (circle, options) {\n        return this._circles.get(circle).then(function (c) {\n            if (typeof options.strokePosition === 'string') {\n                options.strokePosition = google.maps.StrokePosition[options.strokePosition];\n            }\n            c.setOptions(options);\n        });\n    };\n    CircleManager.prototype.getBounds = function (circle) {\n        return this._circles.get(circle).then(function (c) { return c.getBounds(); });\n    };\n    CircleManager.prototype.getCenter = function (circle) {\n        return this._circles.get(circle).then(function (c) { return c.getCenter(); });\n    };\n    CircleManager.prototype.getRadius = function (circle) {\n        return this._circles.get(circle).then(function (c) { return c.getRadius(); });\n    };\n    CircleManager.prototype.setCenter = function (circle) {\n        return this._circles.get(circle).then(function (c) { return c.setCenter({ lat: circle.latitude, lng: circle.longitude }); });\n    };\n    CircleManager.prototype.setEditable = function (circle) {\n        return this._circles.get(circle).then(function (c) { return c.setEditable(circle.editable); });\n    };\n    CircleManager.prototype.setDraggable = function (circle) {\n        return this._circles.get(circle).then(function (c) { return c.setDraggable(circle.draggable); });\n    };\n    CircleManager.prototype.setVisible = function (circle) {\n        return this._circles.get(circle).then(function (c) { return c.setVisible(circle.visible); });\n    };\n    CircleManager.prototype.setRadius = function (circle) {\n        return this._circles.get(circle).then(function (c) { return c.setRadius(circle.radius); });\n    };\n    CircleManager.prototype.getNativeCircle = function (circle) {\n        return this._circles.get(circle);\n    };\n    CircleManager.prototype.createEventObservable = function (eventName, circle) {\n        var _this = this;\n        return new Observable(function (observer) {\n            var listener = null;\n            _this._circles.get(circle).then(function (c) {\n                listener = c.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });\n            });\n            return function () {\n                if (listener !== null) {\n                    listener.remove();\n                }\n            };\n        });\n    };\n    CircleManager.ctorParameters = function () { return [\n        { type: GoogleMapsAPIWrapper },\n        { type: NgZone }\n    ]; };\n    CircleManager = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n    ], CircleManager);\n    return CircleManager;\n}());\n\nvar AgmCircle = /** @class */ (function () {\n    function AgmCircle(_manager) {\n        this._manager = _manager;\n        /**\n         * Indicates whether this Circle handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this circle over the map. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this circle by dragging the control points shown at\n         * the center and around the circumference of the circle. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * The radius in meters on the Earth's surface.\n         */\n        this.radius = 0;\n        /**\n         * The stroke position. Defaults to CENTER.\n         * This property is not supported on Internet Explorer 8 and earlier.\n         */\n        this.strokePosition = 'CENTER';\n        /**\n         * The stroke width in pixels.\n         */\n        this.strokeWeight = 0;\n        /**\n         * Whether this circle is visible on the map. Defaults to true.\n         */\n        this.visible = true;\n        /**\n         * This event is fired when the circle's center is changed.\n         */\n        this.centerChange = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the circle.\n         */\n        this.circleClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the circle.\n         */\n        this.circleDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the circle.\n         */\n        this.drag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the circle.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the circle.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the circle.\n         */\n        this.mouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the circle.\n         */\n        this.mouseMove = new EventEmitter();\n        /**\n         * This event is fired on circle mouseout.\n         */\n        this.mouseOut = new EventEmitter();\n        /**\n         * This event is fired on circle mouseover.\n         */\n        this.mouseOver = new EventEmitter();\n        /**\n         * This event is fired when the DOM mouseup event is fired on the circle.\n         */\n        this.mouseUp = new EventEmitter();\n        /**\n         * This event is fired when the circle's radius is changed.\n         */\n        this.radiusChange = new EventEmitter();\n        /**\n         * This event is fired when the circle is right-clicked on.\n         */\n        this.rightClick = new EventEmitter();\n        this._circleAddedToManager = false;\n        this._eventSubscriptions = [];\n    }\n    AgmCircle_1 = AgmCircle;\n    /** @internal */\n    AgmCircle.prototype.ngOnInit = function () {\n        this._manager.addCircle(this);\n        this._circleAddedToManager = true;\n        this._registerEventListeners();\n    };\n    /** @internal */\n    AgmCircle.prototype.ngOnChanges = function (changes) {\n        if (!this._circleAddedToManager) {\n            return;\n        }\n        if (changes['latitude'] || changes['longitude']) {\n            this._manager.setCenter(this);\n        }\n        if (changes['editable']) {\n            this._manager.setEditable(this);\n        }\n        if (changes['draggable']) {\n            this._manager.setDraggable(this);\n        }\n        if (changes['visible']) {\n            this._manager.setVisible(this);\n        }\n        if (changes['radius']) {\n            this._manager.setRadius(this);\n        }\n        this._updateCircleOptionsChanges(changes);\n    };\n    AgmCircle.prototype._updateCircleOptionsChanges = function (changes) {\n        var options = {};\n        var optionKeys = Object.keys(changes).filter(function (k) { return AgmCircle_1._mapOptions.indexOf(k) !== -1; });\n        optionKeys.forEach(function (k) { options[k] = changes[k].currentValue; });\n        if (optionKeys.length > 0) {\n            this._manager.setOptions(this, options);\n        }\n    };\n    AgmCircle.prototype._registerEventListeners = function () {\n        var _this = this;\n        var events = new Map();\n        events.set('center_changed', this.centerChange);\n        events.set('click', this.circleClick);\n        events.set('dblclick', this.circleDblClick);\n        events.set('drag', this.drag);\n        events.set('dragend', this.dragEnd);\n        events.set('dragstart', this.dragStart);\n        events.set('mousedown', this.mouseDown);\n        events.set('mousemove', this.mouseMove);\n        events.set('mouseout', this.mouseOut);\n        events.set('mouseover', this.mouseOver);\n        events.set('mouseup', this.mouseUp);\n        events.set('radius_changed', this.radiusChange);\n        events.set('rightclick', this.rightClick);\n        events.forEach(function (eventEmitter, eventName) {\n            _this._eventSubscriptions.push(_this._manager.createEventObservable(eventName, _this).subscribe(function (value) {\n                switch (eventName) {\n                    case 'radius_changed':\n                        _this._manager.getRadius(_this).then(function (radius) { return eventEmitter.emit(radius); });\n                        break;\n                    case 'center_changed':\n                        _this._manager.getCenter(_this).then(function (center) {\n                            return eventEmitter.emit({ lat: center.lat(), lng: center.lng() });\n                        });\n                        break;\n                    default:\n                        eventEmitter.emit({ coords: { lat: value.latLng.lat(), lng: value.latLng.lng() } });\n                }\n            }));\n        });\n    };\n    /** @internal */\n    AgmCircle.prototype.ngOnDestroy = function () {\n        this._eventSubscriptions.forEach(function (s) { s.unsubscribe(); });\n        this._eventSubscriptions = null;\n        this._manager.removeCircle(this);\n    };\n    /**\n     * Gets the LatLngBounds of this Circle.\n     */\n    AgmCircle.prototype.getBounds = function () { return this._manager.getBounds(this); };\n    AgmCircle.prototype.getCenter = function () { return this._manager.getCenter(this); };\n    var AgmCircle_1;\n    AgmCircle._mapOptions = [\n        'fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight',\n        'visible', 'zIndex', 'clickable',\n    ];\n    AgmCircle.ctorParameters = function () { return [\n        { type: CircleManager }\n    ]; };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmCircle.prototype, \"latitude\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmCircle.prototype, \"longitude\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmCircle.prototype, \"clickable\", void 0);\n    __decorate([\n        Input('circleDraggable'),\n        __metadata(\"design:type\", Object)\n    ], AgmCircle.prototype, \"draggable\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmCircle.prototype, \"editable\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmCircle.prototype, \"fillColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmCircle.prototype, \"fillOpacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmCircle.prototype, \"radius\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmCircle.prototype, \"strokeColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmCircle.prototype, \"strokeOpacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmCircle.prototype, \"strokePosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmCircle.prototype, \"strokeWeight\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmCircle.prototype, \"visible\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmCircle.prototype, \"zIndex\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmCircle.prototype, \"centerChange\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmCircle.prototype, \"circleClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmCircle.prototype, \"circleDblClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmCircle.prototype, \"drag\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmCircle.prototype, \"dragEnd\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmCircle.prototype, \"dragStart\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmCircle.prototype, \"mouseDown\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmCircle.prototype, \"mouseMove\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmCircle.prototype, \"mouseOut\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmCircle.prototype, \"mouseOver\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmCircle.prototype, \"mouseUp\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmCircle.prototype, \"radiusChange\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmCircle.prototype, \"rightClick\", void 0);\n    AgmCircle = AgmCircle_1 = __decorate([\n        Directive({\n            selector: 'agm-circle',\n        }),\n        __metadata(\"design:paramtypes\", [CircleManager])\n    ], AgmCircle);\n    return AgmCircle;\n}());\n\n/**\n * Manages all Data Layers for a Google Map instance.\n */\nvar DataLayerManager = /** @class */ (function () {\n    function DataLayerManager(_wrapper, _zone) {\n        this._wrapper = _wrapper;\n        this._zone = _zone;\n        this._layers = new Map();\n    }\n    /**\n     * Adds a new Data Layer to the map.\n     */\n    DataLayerManager.prototype.addDataLayer = function (layer) {\n        var _this = this;\n        var newLayer = this._wrapper.createDataLayer({\n            style: layer.style,\n        })\n            .then(function (d) {\n            if (layer.geoJson) {\n                _this.getDataFeatures(d, layer.geoJson).then(function (features) { return d.features = features; });\n            }\n            return d;\n        });\n        this._layers.set(layer, newLayer);\n    };\n    DataLayerManager.prototype.deleteDataLayer = function (layer) {\n        var _this = this;\n        this._layers.get(layer).then(function (l) {\n            l.setMap(null);\n            _this._layers.delete(layer);\n        });\n    };\n    DataLayerManager.prototype.updateGeoJson = function (layer, geoJson) {\n        var _this = this;\n        this._layers.get(layer).then(function (l) {\n            l.forEach(function (feature) {\n                l.remove(feature);\n                var index = l.features.indexOf(feature, 0);\n                if (index > -1) {\n                    l.features.splice(index, 1);\n                }\n            });\n            _this.getDataFeatures(l, geoJson).then(function (features) { return l.features = features; });\n        });\n    };\n    DataLayerManager.prototype.setDataOptions = function (layer, options) {\n        this._layers.get(layer).then(function (l) {\n            l.setControlPosition(options.controlPosition);\n            l.setControls(options.controls);\n            l.setDrawingMode(options.drawingMode);\n            l.setStyle(options.style);\n        });\n    };\n    /**\n     * Creates a Google Maps event listener for the given DataLayer as an Observable\n     */\n    DataLayerManager.prototype.createEventObservable = function (eventName, layer) {\n        var _this = this;\n        return new Observable(function (observer) {\n            _this._layers.get(layer).then(function (d) {\n                d.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });\n            });\n        });\n    };\n    /**\n     * Extract features from a geoJson using google.maps Data Class\n     * @param d : google.maps.Data class instance\n     * @param geoJson : url or geojson object\n     */\n    DataLayerManager.prototype.getDataFeatures = function (d, geoJson) {\n        return new Promise(function (resolve, reject) {\n            if (typeof geoJson === 'object') {\n                try {\n                    var features = d.addGeoJson(geoJson);\n                    resolve(features);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            }\n            else if (typeof geoJson === 'string') {\n                d.loadGeoJson(geoJson, null, resolve);\n            }\n            else {\n                reject(\"Impossible to extract features from geoJson: wrong argument type\");\n            }\n        });\n    };\n    DataLayerManager.ctorParameters = function () { return [\n        { type: GoogleMapsAPIWrapper },\n        { type: NgZone }\n    ]; };\n    DataLayerManager = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n    ], DataLayerManager);\n    return DataLayerManager;\n}());\n\nvar layerId$1 = 0;\n/**\n * AgmDataLayer enables the user to add data layers to the map.\n *\n * ### Example\n * ```typescript\n * import { Component } from 'angular2/core';\n * import { AgmMap, AgmDataLayer } from\n * 'angular-google-maps/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  directives: [AgmMap, AgmDataLayer],\n *  styles: [`\n *    .agm-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n * <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n * \t  <agm-data-layer [geoJson]=\"geoJsonObject\" (layerClick)=\"clicked($event)\" [style]=\"styleFunc\">\n * \t  </agm-data-layer>\n * </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = -25.274449;\n *   lng: number = 133.775060;\n *   zoom: number = 5;\n *\n * clicked(clickEvent) {\n *    console.log(clickEvent);\n *  }\n *\n *  styleFunc(feature) {\n *    return ({\n *      clickable: false,\n *      fillColor: feature.getProperty('color'),\n *      strokeWeight: 1\n *    });\n *  }\n *\n *  geoJsonObject: Object = {\n *    \"type\": \"FeatureCollection\",\n *    \"features\": [\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"G\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"71\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [123.61, -22.14], [122.38, -21.73], [121.06, -21.69], [119.66, -22.22], [119.00, -23.40],\n *              [118.65, -24.76], [118.43, -26.07], [118.78, -27.56], [119.22, -28.57], [120.23, -29.49],\n *              [121.77, -29.87], [123.57, -29.64], [124.45, -29.03], [124.71, -27.95], [124.80, -26.70],\n *              [124.80, -25.60], [123.61, -25.64], [122.56, -25.64], [121.72, -25.72], [121.81, -26.62],\n *              [121.86, -26.98], [122.60, -26.90], [123.57, -27.05], [123.57, -27.68], [123.35, -28.18],\n *              [122.51, -28.38], [121.77, -28.26], [121.02, -27.91], [120.49, -27.21], [120.14, -26.50],\n *              [120.10, -25.64], [120.27, -24.52], [120.67, -23.68], [121.72, -23.32], [122.43, -23.48],\n *              [123.04, -24.04], [124.54, -24.28], [124.58, -23.20], [123.61, -22.14]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"red\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [128.84, -25.76], [128.18, -25.60], [127.96, -25.52], [127.88, -25.52], [127.70, -25.60],\n *              [127.26, -25.79], [126.60, -26.11], [126.16, -26.78], [126.12, -27.68], [126.21, -28.42],\n *              [126.69, -29.49], [127.74, -29.80], [128.80, -29.72], [129.41, -29.03], [129.72, -27.95],\n *              [129.68, -27.21], [129.33, -26.23], [128.84, -25.76]\n *            ],\n *            [\n *              [128.45, -27.44], [128.32, -26.94], [127.70, -26.82], [127.35, -27.05], [127.17, -27.80],\n *              [127.57, -28.22], [128.10, -28.42], [128.49, -27.80], [128.45, -27.44]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"yellow\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [131.87, -25.76], [131.35, -26.07], [130.95, -26.78], [130.82, -27.64], [130.86, -28.53],\n *              [131.26, -29.22], [131.92, -29.76], [132.45, -29.87], [133.06, -29.76], [133.72, -29.34],\n *              [134.07, -28.80], [134.20, -27.91], [134.07, -27.21], [133.81, -26.31], [133.37, -25.83],\n *              [132.71, -25.64], [131.87, -25.76]\n *            ],\n *            [\n *              [133.15, -27.17], [132.71, -26.86], [132.09, -26.90], [131.74, -27.56], [131.79, -28.26],\n *              [132.36, -28.45], [132.93, -28.34], [133.15, -27.76], [133.15, -27.17]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"g\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"103\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [138.12, -25.04], [136.84, -25.16], [135.96, -25.36], [135.26, -25.99], [135, -26.90],\n *              [135.04, -27.91], [135.26, -28.88], [136.05, -29.45], [137.02, -29.49], [137.81, -29.49],\n *              [137.94, -29.99], [137.90, -31.20], [137.85, -32.24], [136.88, -32.69], [136.45, -32.36],\n *              [136.27, -31.80], [134.95, -31.84], [135.17, -32.99], [135.52, -33.43], [136.14, -33.76],\n *              [137.06, -33.83], [138.12, -33.65], [138.86, -33.21], [139.30, -32.28], [139.30, -31.24],\n *              [139.30, -30.14], [139.21, -28.96], [139.17, -28.22], [139.08, -27.41], [139.08, -26.47],\n *              [138.99, -25.40], [138.73, -25.00], [138.12, -25.04]\n *            ],\n *            [\n *              [137.50, -26.54], [136.97, -26.47], [136.49, -26.58], [136.31, -27.13], [136.31, -27.72],\n *              [136.58, -27.99], [137.50, -28.03], [137.68, -27.68], [137.59, -26.78], [137.50, -26.54]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"l\",\n *          \"color\": \"green\",\n *          \"rank\": \"12\",\n *          \"ascii\": \"108\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [140.14, -21.04], [140.31, -29.42], [141.67, -29.49], [141.59, -20.92], [140.14, -21.04]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"e\",\n *          \"color\": \"red\",\n *          \"rank\": \"5\",\n *          \"ascii\": \"101\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [144.14, -27.41], [145.67, -27.52], [146.86, -27.09], [146.82, -25.64], [146.25, -25.04],\n *              [145.45, -24.68], [144.66, -24.60], [144.09, -24.76], [143.43, -25.08], [142.99, -25.40],\n *              [142.64, -26.03], [142.64, -27.05], [142.64, -28.26], [143.30, -29.11], [144.18, -29.57],\n *              [145.41, -29.64], [146.46, -29.19], [146.64, -28.72], [146.82, -28.14], [144.84, -28.42],\n *              [144.31, -28.26], [144.14, -27.41]\n *            ],\n *            [\n *              [144.18, -26.39], [144.53, -26.58], [145.19, -26.62], [145.72, -26.35], [145.81, -25.91],\n *              [145.41, -25.68], [144.97, -25.68], [144.49, -25.64], [144, -25.99], [144.18, -26.39]\n *            ]\n *          ]\n *        }\n *      }\n *    ]\n *  };\n * }\n * ```\n */\nvar AgmDataLayer = /** @class */ (function () {\n    function AgmDataLayer(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId$1++).toString();\n        this._subscriptions = [];\n        /**\n         * This event is fired when a feature in the layer is clicked.\n         */\n        this.layerClick = new EventEmitter();\n        /**\n         * The geoJson to be displayed\n         */\n        this.geoJson = null;\n    }\n    AgmDataLayer_1 = AgmDataLayer;\n    AgmDataLayer.prototype.ngOnInit = function () {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addDataLayer(this);\n        this._addedToManager = true;\n        this._addEventListeners();\n    };\n    AgmDataLayer.prototype._addEventListeners = function () {\n        var _this = this;\n        var listeners = [\n            { name: 'click', handler: function (ev) { return _this.layerClick.emit(ev); } },\n        ];\n        listeners.forEach(function (obj) {\n            var os = _this._manager.createEventObservable(obj.name, _this).subscribe(obj.handler);\n            _this._subscriptions.push(os);\n        });\n    };\n    /** @internal */\n    AgmDataLayer.prototype.id = function () { return this._id; };\n    /** @internal */\n    AgmDataLayer.prototype.toString = function () { return \"AgmDataLayer-\" + this._id.toString(); };\n    /** @internal */\n    AgmDataLayer.prototype.ngOnDestroy = function () {\n        this._manager.deleteDataLayer(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach(function (s) { return s.unsubscribe(); });\n    };\n    /** @internal */\n    AgmDataLayer.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        if (!this._addedToManager) {\n            return;\n        }\n        var geoJsonChange = changes['geoJson'];\n        if (geoJsonChange) {\n            this._manager.updateGeoJson(this, geoJsonChange.currentValue);\n        }\n        var dataOptions = {};\n        AgmDataLayer_1._dataOptionsAttributes.forEach(function (k) { return dataOptions[k] = changes.hasOwnProperty(k) ? changes[k].currentValue : _this[k]; });\n        this._manager.setDataOptions(this, dataOptions);\n    };\n    var AgmDataLayer_1;\n    AgmDataLayer._dataOptionsAttributes = ['style'];\n    AgmDataLayer.ctorParameters = function () { return [\n        { type: DataLayerManager }\n    ]; };\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmDataLayer.prototype, \"layerClick\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmDataLayer.prototype, \"geoJson\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], AgmDataLayer.prototype, \"style\", void 0);\n    AgmDataLayer = AgmDataLayer_1 = __decorate([\n        Directive({\n            selector: 'agm-data-layer',\n        }),\n        __metadata(\"design:paramtypes\", [DataLayerManager])\n    ], AgmDataLayer);\n    return AgmDataLayer;\n}());\n\n/**\n * Class to implement when you what to be able to make it work with the auto fit bounds feature\n * of AGM.\n */\nvar FitBoundsAccessor = /** @class */ (function () {\n    function FitBoundsAccessor() {\n    }\n    return FitBoundsAccessor;\n}());\n/**\n * The FitBoundsService is responsible for computing the bounds of the a single map.\n */\nvar FitBoundsService = /** @class */ (function () {\n    function FitBoundsService(loader) {\n        var _this = this;\n        this._boundsChangeSampleTime$ = new BehaviorSubject(200);\n        this._includeInBounds$ = new BehaviorSubject(new Map());\n        this.bounds$ = from(loader.load()).pipe(flatMap(function () { return _this._includeInBounds$; }), sample(this._boundsChangeSampleTime$.pipe(switchMap(function (time) { return timer(0, time); }))), map(function (includeInBounds) { return _this._generateBounds(includeInBounds); }), shareReplay(1));\n    }\n    FitBoundsService.prototype._generateBounds = function (includeInBounds) {\n        var bounds = new google.maps.LatLngBounds();\n        includeInBounds.forEach(function (b) { return bounds.extend(b); });\n        return bounds;\n    };\n    FitBoundsService.prototype.addToBounds = function (latLng) {\n        var id = this._createIdentifier(latLng);\n        if (this._includeInBounds$.value.has(id)) {\n            return;\n        }\n        var map = this._includeInBounds$.value;\n        map.set(id, latLng);\n        this._includeInBounds$.next(map);\n    };\n    FitBoundsService.prototype.removeFromBounds = function (latLng) {\n        var map = this._includeInBounds$.value;\n        map.delete(this._createIdentifier(latLng));\n        this._includeInBounds$.next(map);\n    };\n    FitBoundsService.prototype.changeFitBoundsChangeSampleTime = function (timeMs) {\n        this._boundsChangeSampleTime$.next(timeMs);\n    };\n    FitBoundsService.prototype.getBounds$ = function () {\n        return this.bounds$;\n    };\n    FitBoundsService.prototype._createIdentifier = function (latLng) {\n        return latLng.lat + \"+\" + latLng.lng;\n    };\n    FitBoundsService.ctorParameters = function () { return [\n        { type: MapsAPILoader }\n    ]; };\n    FitBoundsService = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [MapsAPILoader])\n    ], FitBoundsService);\n    return FitBoundsService;\n}());\n\n/**\n * Adds the given directive to the auto fit bounds feature when the value is true.\n * To make it work with you custom AGM component, you also have to implement the {@link FitBoundsAccessor} abstract class.\n * @example\n * <agm-marker [agmFitBounds]=\"true\"></agm-marker>\n */\nvar AgmFitBounds = /** @class */ (function () {\n    function AgmFitBounds(_fitBoundsAccessor, _fitBoundsService) {\n        this._fitBoundsAccessor = _fitBoundsAccessor;\n        this._fitBoundsService = _fitBoundsService;\n        /**\n         * If the value is true, the element gets added to the bounds of the map.\n         * Default: true.\n         */\n        this.agmFitBounds = true;\n        this._destroyed$ = new Subject();\n        this._latestFitBoundsDetails = null;\n    }\n    /**\n     * @internal\n     */\n    AgmFitBounds.prototype.ngOnChanges = function () {\n        this._updateBounds();\n    };\n    /**\n     * @internal\n     */\n    AgmFitBounds.prototype.ngOnInit = function () {\n        var _this = this;\n        this._fitBoundsAccessor\n            .getFitBoundsDetails$()\n            .pipe(distinctUntilChanged(function (x, y) {\n            return x.latLng.lat === y.latLng.lat && x.latLng.lng === y.latLng.lng;\n        }), takeUntil(this._destroyed$))\n            .subscribe(function (details) { return _this._updateBounds(details); });\n    };\n    /*\n     Either the location changed, or visible status changed.\n     Possible state changes are\n     invisible -> visible\n     visible -> invisible\n     visible -> visible (new location)\n    */\n    AgmFitBounds.prototype._updateBounds = function (newFitBoundsDetails) {\n        // either visibility will change, or location, so remove the old one anyway\n        if (this._latestFitBoundsDetails) {\n            this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n            // don't set latestFitBoundsDetails to null, because we can toggle visibility from\n            // true -> false -> true, in which case we still need old value cached here\n        }\n        if (newFitBoundsDetails) {\n            this._latestFitBoundsDetails = newFitBoundsDetails;\n        }\n        if (!this._latestFitBoundsDetails) {\n            return;\n        }\n        if (this.agmFitBounds === true) {\n            this._fitBoundsService.addToBounds(this._latestFitBoundsDetails.latLng);\n        }\n    };\n    /**\n     * @internal\n     */\n    AgmFitBounds.prototype.ngOnDestroy = function () {\n        this._destroyed$.next();\n        this._destroyed$.complete();\n        if (this._latestFitBoundsDetails !== null) {\n            this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n        }\n    };\n    AgmFitBounds.ctorParameters = function () { return [\n        { type: FitBoundsAccessor, decorators: [{ type: Self }] },\n        { type: FitBoundsService }\n    ]; };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmFitBounds.prototype, \"agmFitBounds\", void 0);\n    AgmFitBounds = __decorate([\n        Directive({\n            selector: '[agmFitBounds]',\n        }),\n        __param(0, Self()),\n        __metadata(\"design:paramtypes\", [FitBoundsAccessor,\n            FitBoundsService])\n    ], AgmFitBounds);\n    return AgmFitBounds;\n}());\n\nvar MarkerManager = /** @class */ (function () {\n    function MarkerManager(_mapsWrapper, _zone) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._markers = new Map();\n    }\n    MarkerManager.prototype.convertAnimation = function (uiAnim) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (uiAnim === null) {\n                    return [2 /*return*/, null];\n                }\n                else {\n                    return [2 /*return*/, this._mapsWrapper.getNativeMap().then(function () { return google.maps.Animation[uiAnim]; })];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    MarkerManager.prototype.deleteMarker = function (marker) {\n        var _this = this;\n        var m = this._markers.get(marker);\n        if (m == null) {\n            // marker already deleted\n            return Promise.resolve();\n        }\n        return m.then(function (m) {\n            return _this._zone.run(function () {\n                m.setMap(null);\n                _this._markers.delete(marker);\n            });\n        });\n    };\n    MarkerManager.prototype.updateMarkerPosition = function (marker) {\n        return this._markers.get(marker).then(function (m) { return m.setPosition({ lat: marker.latitude, lng: marker.longitude }); });\n    };\n    MarkerManager.prototype.updateTitle = function (marker) {\n        return this._markers.get(marker).then(function (m) { return m.setTitle(marker.title); });\n    };\n    MarkerManager.prototype.updateLabel = function (marker) {\n        return this._markers.get(marker).then(function (m) { m.setLabel(marker.label); });\n    };\n    MarkerManager.prototype.updateDraggable = function (marker) {\n        return this._markers.get(marker).then(function (m) { return m.setDraggable(marker.draggable); });\n    };\n    MarkerManager.prototype.updateIcon = function (marker) {\n        return this._markers.get(marker).then(function (m) { return m.setIcon(marker.iconUrl); });\n    };\n    MarkerManager.prototype.updateOpacity = function (marker) {\n        return this._markers.get(marker).then(function (m) { return m.setOpacity(marker.opacity); });\n    };\n    MarkerManager.prototype.updateVisible = function (marker) {\n        return this._markers.get(marker).then(function (m) { return m.setVisible(marker.visible); });\n    };\n    MarkerManager.prototype.updateZIndex = function (marker) {\n        return this._markers.get(marker).then(function (m) { return m.setZIndex(marker.zIndex); });\n    };\n    MarkerManager.prototype.updateClickable = function (marker) {\n        return this._markers.get(marker).then(function (m) { return m.setClickable(marker.clickable); });\n    };\n    MarkerManager.prototype.updateAnimation = function (marker) {\n        return __awaiter(this, void 0, void 0, function () {\n            var m, _a, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0: return [4 /*yield*/, this._markers.get(marker)];\n                    case 1:\n                        m = _c.sent();\n                        _b = (_a = m).setAnimation;\n                        return [4 /*yield*/, this.convertAnimation(marker.animation)];\n                    case 2:\n                        _b.apply(_a, [_c.sent()]);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MarkerManager.prototype.addMarker = function (marker) {\n        var _this = this;\n        var markerPromise = new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {\n            var _a, _b, _c;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _b = (_a = this._mapsWrapper).createMarker;\n                        _c = {\n                            position: { lat: marker.latitude, lng: marker.longitude },\n                            label: marker.label,\n                            draggable: marker.draggable,\n                            icon: marker.iconUrl,\n                            opacity: marker.opacity,\n                            visible: marker.visible,\n                            zIndex: marker.zIndex,\n                            title: marker.title,\n                            clickable: marker.clickable\n                        };\n                        return [4 /*yield*/, this.convertAnimation(marker.animation)];\n                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.animation = _d.sent(),\n                                _c)]).then(resolve)];\n                }\n            });\n        }); });\n        this._markers.set(marker, markerPromise);\n    };\n    MarkerManager.prototype.getNativeMarker = function (marker) {\n        return this._markers.get(marker);\n    };\n    MarkerManager.prototype.createEventObservable = function (eventName, marker) {\n        var _this = this;\n        return new Observable(function (observer) {\n            _this._markers.get(marker).then(function (m) {\n                m.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });\n            });\n        });\n    };\n    MarkerManager.ctorParameters = function () { return [\n        { type: GoogleMapsAPIWrapper },\n        { type: NgZone }\n    ]; };\n    MarkerManager = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n    ], MarkerManager);\n    return MarkerManager;\n}());\n\nvar InfoWindowManager = /** @class */ (function () {\n    function InfoWindowManager(_mapsWrapper, _zone, _markerManager) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._markerManager = _markerManager;\n        this._infoWindows = new Map();\n    }\n    InfoWindowManager.prototype.deleteInfoWindow = function (infoWindow) {\n        var _this = this;\n        var iWindow = this._infoWindows.get(infoWindow);\n        if (iWindow == null) {\n            // info window already deleted\n            return Promise.resolve();\n        }\n        return iWindow.then(function (i) {\n            return _this._zone.run(function () {\n                i.close();\n                _this._infoWindows.delete(infoWindow);\n            });\n        });\n    };\n    InfoWindowManager.prototype.setPosition = function (infoWindow) {\n        return this._infoWindows.get(infoWindow).then(function (i) { return i.setPosition({\n            lat: infoWindow.latitude,\n            lng: infoWindow.longitude,\n        }); });\n    };\n    InfoWindowManager.prototype.setZIndex = function (infoWindow) {\n        return this._infoWindows.get(infoWindow)\n            .then(function (i) { return i.setZIndex(infoWindow.zIndex); });\n    };\n    InfoWindowManager.prototype.open = function (infoWindow) {\n        var _this = this;\n        return this._infoWindows.get(infoWindow).then(function (w) {\n            if (infoWindow.hostMarker != null) {\n                return _this._markerManager.getNativeMarker(infoWindow.hostMarker).then(function (marker) {\n                    return _this._mapsWrapper.getNativeMap().then(function (map) { return w.open(map, marker); });\n                });\n            }\n            return _this._mapsWrapper.getNativeMap().then(function (map) { return w.open(map); });\n        });\n    };\n    InfoWindowManager.prototype.close = function (infoWindow) {\n        return this._infoWindows.get(infoWindow).then(function (w) { return w.close(); });\n    };\n    InfoWindowManager.prototype.setOptions = function (infoWindow, options) {\n        return this._infoWindows.get(infoWindow).then(function (i) { return i.setOptions(options); });\n    };\n    InfoWindowManager.prototype.addInfoWindow = function (infoWindow) {\n        var options = {\n            content: infoWindow.content,\n            maxWidth: infoWindow.maxWidth,\n            zIndex: infoWindow.zIndex,\n            disableAutoPan: infoWindow.disableAutoPan,\n        };\n        if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {\n            options.position = { lat: infoWindow.latitude, lng: infoWindow.longitude };\n        }\n        var infoWindowPromise = this._mapsWrapper.createInfoWindow(options);\n        this._infoWindows.set(infoWindow, infoWindowPromise);\n    };\n    /**\n     * Creates a Google Maps event listener for the given InfoWindow as an Observable\n     */\n    InfoWindowManager.prototype.createEventObservable = function (eventName, infoWindow) {\n        var _this = this;\n        return new Observable(function (observer) {\n            _this._infoWindows.get(infoWindow).then(function (i) {\n                i.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });\n            });\n        });\n    };\n    InfoWindowManager.ctorParameters = function () { return [\n        { type: GoogleMapsAPIWrapper },\n        { type: NgZone },\n        { type: MarkerManager }\n    ]; };\n    InfoWindowManager = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone,\n            MarkerManager])\n    ], InfoWindowManager);\n    return InfoWindowManager;\n}());\n\nvar infoWindowId = 0;\n/**\n * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *        <agm-info-window [disableAutoPan]=\"true\">\n *          Hi, this is the content of the <strong>info window</strong>\n *        </agm-info-window>\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nvar AgmInfoWindow = /** @class */ (function () {\n    function AgmInfoWindow(_infoWindowManager, _el) {\n        this._infoWindowManager = _infoWindowManager;\n        this._el = _el;\n        /**\n         * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\n         */\n        this.isOpen = false;\n        /**\n         * Emits an event when the info window is closed.\n         */\n        this.infoWindowClose = new EventEmitter();\n        this._infoWindowAddedToManager = false;\n        this._id = (infoWindowId++).toString();\n    }\n    AgmInfoWindow_1 = AgmInfoWindow;\n    AgmInfoWindow.prototype.ngOnInit = function () {\n        this.content = this._el.nativeElement.querySelector('.agm-info-window-content');\n        this._infoWindowManager.addInfoWindow(this);\n        this._infoWindowAddedToManager = true;\n        this._updateOpenState();\n        this._registerEventListeners();\n    };\n    /** @internal */\n    AgmInfoWindow.prototype.ngOnChanges = function (changes) {\n        if (!this._infoWindowAddedToManager) {\n            return;\n        }\n        if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' &&\n            typeof this.longitude === 'number') {\n            this._infoWindowManager.setPosition(this);\n        }\n        if (changes['zIndex']) {\n            this._infoWindowManager.setZIndex(this);\n        }\n        if (changes['isOpen']) {\n            this._updateOpenState();\n        }\n        this._setInfoWindowOptions(changes);\n    };\n    AgmInfoWindow.prototype._registerEventListeners = function () {\n        var _this = this;\n        this._infoWindowManager.createEventObservable('closeclick', this).subscribe(function () {\n            _this.isOpen = false;\n            _this.infoWindowClose.emit();\n        });\n    };\n    AgmInfoWindow.prototype._updateOpenState = function () {\n        this.isOpen ? this.open() : this.close();\n    };\n    AgmInfoWindow.prototype._setInfoWindowOptions = function (changes) {\n        var options = {};\n        var optionKeys = Object.keys(changes).filter(function (k) { return AgmInfoWindow_1._infoWindowOptionsInputs.indexOf(k) !== -1; });\n        optionKeys.forEach(function (k) { options[k] = changes[k].currentValue; });\n        this._infoWindowManager.setOptions(this, options);\n    };\n    /**\n     * Opens the info window.\n     */\n    AgmInfoWindow.prototype.open = function () { return this._infoWindowManager.open(this); };\n    /**\n     * Closes the info window.\n     */\n    AgmInfoWindow.prototype.close = function () {\n        var _this = this;\n        return this._infoWindowManager.close(this).then(function () { _this.infoWindowClose.emit(); });\n    };\n    /** @internal */\n    AgmInfoWindow.prototype.id = function () { return this._id; };\n    /** @internal */\n    AgmInfoWindow.prototype.toString = function () { return 'AgmInfoWindow-' + this._id.toString(); };\n    /** @internal */\n    AgmInfoWindow.prototype.ngOnDestroy = function () { this._infoWindowManager.deleteInfoWindow(this); };\n    var AgmInfoWindow_1;\n    AgmInfoWindow._infoWindowOptionsInputs = ['disableAutoPan', 'maxWidth'];\n    AgmInfoWindow.ctorParameters = function () { return [\n        { type: InfoWindowManager },\n        { type: ElementRef }\n    ]; };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmInfoWindow.prototype, \"latitude\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmInfoWindow.prototype, \"longitude\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AgmInfoWindow.prototype, \"disableAutoPan\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmInfoWindow.prototype, \"zIndex\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmInfoWindow.prototype, \"maxWidth\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmInfoWindow.prototype, \"isOpen\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmInfoWindow.prototype, \"infoWindowClose\", void 0);\n    AgmInfoWindow = AgmInfoWindow_1 = __decorate([\n        Component({\n            selector: 'agm-info-window',\n            template: \"<div class='agm-info-window-content'>\\n      <ng-content></ng-content>\\n    </div>\\n  \"\n        }),\n        __metadata(\"design:paramtypes\", [InfoWindowManager, ElementRef])\n    ], AgmInfoWindow);\n    return AgmInfoWindow;\n}());\n\n/**\n * Manages all KML Layers for a Google Map instance.\n */\nvar KmlLayerManager = /** @class */ (function () {\n    function KmlLayerManager(_wrapper, _zone) {\n        this._wrapper = _wrapper;\n        this._zone = _zone;\n        this._layers = new Map();\n    }\n    /**\n     * Adds a new KML Layer to the map.\n     */\n    KmlLayerManager.prototype.addKmlLayer = function (layer) {\n        var newLayer = this._wrapper.getNativeMap().then(function (m) {\n            return new google.maps.KmlLayer({\n                clickable: layer.clickable,\n                map: m,\n                preserveViewport: layer.preserveViewport,\n                screenOverlays: layer.screenOverlays,\n                suppressInfoWindows: layer.suppressInfoWindows,\n                url: layer.url,\n                zIndex: layer.zIndex,\n            });\n        });\n        this._layers.set(layer, newLayer);\n    };\n    KmlLayerManager.prototype.setOptions = function (layer, options) {\n        this._layers.get(layer).then(function (l) { return l.setOptions(options); });\n    };\n    KmlLayerManager.prototype.deleteKmlLayer = function (layer) {\n        var _this = this;\n        this._layers.get(layer).then(function (l) {\n            l.setMap(null);\n            _this._layers.delete(layer);\n        });\n    };\n    /**\n     * Creates a Google Maps event listener for the given KmlLayer as an Observable\n     */\n    KmlLayerManager.prototype.createEventObservable = function (eventName, layer) {\n        var _this = this;\n        return new Observable(function (observer) {\n            _this._layers.get(layer).then(function (m) {\n                m.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });\n            });\n        });\n    };\n    KmlLayerManager.ctorParameters = function () { return [\n        { type: GoogleMapsAPIWrapper },\n        { type: NgZone }\n    ]; };\n    KmlLayerManager = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n    ], KmlLayerManager);\n    return KmlLayerManager;\n}());\n\nvar layerId$2 = 0;\nvar AgmKmlLayer = /** @class */ (function () {\n    function AgmKmlLayer(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId$2++).toString();\n        this._subscriptions = [];\n        /**\n         * If true, the layer receives mouse events. Default value is true.\n         */\n        this.clickable = true;\n        /**\n         * By default, the input map is centered and zoomed to the bounding box of the contents of the\n         * layer.\n         * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom\n         * were never set.\n         */\n        this.preserveViewport = false;\n        /**\n         * Whether to render the screen overlays. Default true.\n         */\n        this.screenOverlays = true;\n        /**\n         * Suppress the rendering of info windows when layer features are clicked.\n         */\n        this.suppressInfoWindows = false;\n        /**\n         * The URL of the KML document to display.\n         */\n        this.url = null;\n        /**\n         * The z-index of the layer.\n         */\n        this.zIndex = null;\n        /**\n         * This event is fired when a feature in the layer is clicked.\n         */\n        this.layerClick = new EventEmitter();\n        /**\n         * This event is fired when the KML layers default viewport has changed.\n         */\n        this.defaultViewportChange = new EventEmitter();\n        /**\n         * This event is fired when the KML layer has finished loading.\n         * At this point it is safe to read the status property to determine if the layer loaded\n         * successfully.\n         */\n        this.statusChange = new EventEmitter();\n    }\n    AgmKmlLayer_1 = AgmKmlLayer;\n    AgmKmlLayer.prototype.ngOnInit = function () {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addKmlLayer(this);\n        this._addedToManager = true;\n        this._addEventListeners();\n    };\n    AgmKmlLayer.prototype.ngOnChanges = function (changes) {\n        if (!this._addedToManager) {\n            return;\n        }\n        this._updatePolygonOptions(changes);\n    };\n    AgmKmlLayer.prototype._updatePolygonOptions = function (changes) {\n        var options = Object.keys(changes)\n            .filter(function (k) { return AgmKmlLayer_1._kmlLayerOptions.indexOf(k) !== -1; })\n            .reduce(function (obj, k) {\n            obj[k] = changes[k].currentValue;\n            return obj;\n        }, {});\n        if (Object.keys(options).length > 0) {\n            this._manager.setOptions(this, options);\n        }\n    };\n    AgmKmlLayer.prototype._addEventListeners = function () {\n        var _this = this;\n        var listeners = [\n            { name: 'click', handler: function (ev) { return _this.layerClick.emit(ev); } },\n            { name: 'defaultviewport_changed', handler: function () { return _this.defaultViewportChange.emit(); } },\n            { name: 'status_changed', handler: function () { return _this.statusChange.emit(); } },\n        ];\n        listeners.forEach(function (obj) {\n            var os = _this._manager.createEventObservable(obj.name, _this).subscribe(obj.handler);\n            _this._subscriptions.push(os);\n        });\n    };\n    /** @internal */\n    AgmKmlLayer.prototype.id = function () { return this._id; };\n    /** @internal */\n    AgmKmlLayer.prototype.toString = function () { return \"AgmKmlLayer-\" + this._id.toString(); };\n    /** @internal */\n    AgmKmlLayer.prototype.ngOnDestroy = function () {\n        this._manager.deleteKmlLayer(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach(function (s) { return s.unsubscribe(); });\n    };\n    var AgmKmlLayer_1;\n    AgmKmlLayer._kmlLayerOptions = ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];\n    AgmKmlLayer.ctorParameters = function () { return [\n        { type: KmlLayerManager }\n    ]; };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmKmlLayer.prototype, \"clickable\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmKmlLayer.prototype, \"preserveViewport\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmKmlLayer.prototype, \"screenOverlays\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmKmlLayer.prototype, \"suppressInfoWindows\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmKmlLayer.prototype, \"url\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmKmlLayer.prototype, \"zIndex\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmKmlLayer.prototype, \"layerClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmKmlLayer.prototype, \"defaultViewportChange\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmKmlLayer.prototype, \"statusChange\", void 0);\n    AgmKmlLayer = AgmKmlLayer_1 = __decorate([\n        Directive({\n            selector: 'agm-kml-layer',\n        }),\n        __metadata(\"design:paramtypes\", [KmlLayerManager])\n    ], AgmKmlLayer);\n    return AgmKmlLayer;\n}());\n\nfunction createMVCEventObservable(array) {\n    var eventNames = ['insert_at', 'remove_at', 'set_at'];\n    return fromEventPattern(function (handler) { return eventNames.map(function (evName) { return array.addListener(evName, function (index, previous) { return handler.apply(array, [{ 'newArr': array.getArray(), evName: evName, index: index, previous: previous }]); }); }); }, function (_handler, evListeners) { return evListeners.forEach(function (evListener) { return evListener.remove(); }); });\n}\nvar MvcArrayMock = /** @class */ (function () {\n    function MvcArrayMock() {\n        this.vals = [];\n        this.listeners = {\n            'remove_at': [],\n            'insert_at': [],\n            'set_at': [],\n        };\n    }\n    MvcArrayMock.prototype.clear = function () {\n        for (var i = this.vals.length - 1; i >= 0; i--) {\n            this.removeAt(i);\n        }\n    };\n    MvcArrayMock.prototype.getArray = function () {\n        return __spread(this.vals);\n    };\n    MvcArrayMock.prototype.getAt = function (i) {\n        return this.vals[i];\n    };\n    MvcArrayMock.prototype.getLength = function () {\n        return this.vals.length;\n    };\n    MvcArrayMock.prototype.insertAt = function (i, elem) {\n        this.vals.splice(i, 0, elem);\n        this.listeners.insert_at.map(function (listener) { return listener(i); });\n    };\n    MvcArrayMock.prototype.pop = function () {\n        var _this = this;\n        var deleted = this.vals.pop();\n        this.listeners.remove_at.map(function (listener) { return listener(_this.vals.length, deleted); });\n        return deleted;\n    };\n    MvcArrayMock.prototype.push = function (elem) {\n        var _this = this;\n        this.vals.push(elem);\n        this.listeners.insert_at.map(function (listener) { return listener(_this.vals.length - 1); });\n        return this.vals.length;\n    };\n    MvcArrayMock.prototype.removeAt = function (i) {\n        var deleted = this.vals.splice(i, 1)[0];\n        this.listeners.remove_at.map(function (listener) { return listener(i, deleted); });\n        return deleted;\n    };\n    MvcArrayMock.prototype.setAt = function (i, elem) {\n        var deleted = this.vals[i];\n        this.vals[i] = elem;\n        this.listeners.set_at.map(function (listener) { return listener(i, deleted); });\n    };\n    MvcArrayMock.prototype.forEach = function (callback) {\n        this.vals.forEach(callback);\n    };\n    MvcArrayMock.prototype.addListener = function (eventName, handler) {\n        var listenerArr = this.listeners[eventName];\n        listenerArr.push(handler);\n        return {\n            remove: function () {\n                listenerArr.splice(listenerArr.indexOf(handler), 1);\n            },\n        };\n    };\n    return MvcArrayMock;\n}());\n\nvar PolygonManager = /** @class */ (function () {\n    function PolygonManager(_mapsWrapper, _zone) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._polygons = new Map();\n    }\n    PolygonManager.prototype.addPolygon = function (path) {\n        var polygonPromise = this._mapsWrapper.createPolygon({\n            clickable: path.clickable,\n            draggable: path.draggable,\n            editable: path.editable,\n            fillColor: path.fillColor,\n            fillOpacity: path.fillOpacity,\n            geodesic: path.geodesic,\n            paths: path.paths,\n            strokeColor: path.strokeColor,\n            strokeOpacity: path.strokeOpacity,\n            strokeWeight: path.strokeWeight,\n            visible: path.visible,\n            zIndex: path.zIndex,\n        });\n        this._polygons.set(path, polygonPromise);\n    };\n    PolygonManager.prototype.updatePolygon = function (polygon) {\n        var _this = this;\n        var m = this._polygons.get(polygon);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then(function (l) { return _this._zone.run(function () { l.setPaths(polygon.paths); }); });\n    };\n    PolygonManager.prototype.setPolygonOptions = function (path, options) {\n        return this._polygons.get(path).then(function (l) { l.setOptions(options); });\n    };\n    PolygonManager.prototype.deletePolygon = function (paths) {\n        var _this = this;\n        var m = this._polygons.get(paths);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then(function (l) {\n            return _this._zone.run(function () {\n                l.setMap(null);\n                _this._polygons.delete(paths);\n            });\n        });\n    };\n    PolygonManager.prototype.getPath = function (polygon) {\n        return this._polygons.get(polygon)\n            .then(function (polygon) { return polygon.getPath().getArray(); });\n    };\n    PolygonManager.prototype.getPaths = function (polygon) {\n        return this._polygons.get(polygon)\n            .then(function (polygon) { return polygon.getPaths().getArray().map(function (p) { return p.getArray(); }); });\n    };\n    PolygonManager.prototype.createEventObservable = function (eventName, path) {\n        var _this = this;\n        return new Observable(function (observer) {\n            _this._polygons.get(path).then(function (l) {\n                l.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });\n            });\n        });\n    };\n    PolygonManager.prototype.createPathEventObservable = function (agmPolygon) {\n        return __awaiter(this, void 0, void 0, function () {\n            var polygon, paths, pathsChanges$;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._polygons.get(agmPolygon)];\n                    case 1:\n                        polygon = _a.sent();\n                        paths = polygon.getPaths();\n                        pathsChanges$ = createMVCEventObservable(paths);\n                        return [2 /*return*/, pathsChanges$.pipe(startWith({ newArr: paths.getArray() }), // in order to subscribe to them all\n                            switchMap(function (parentMVEvent) { return merge.apply(void 0, __spread(// rest parameter\n                            parentMVEvent.newArr.map(function (chMVC, index) {\n                                return createMVCEventObservable(chMVC)\n                                    .pipe(map(function (chMVCEvent) { return ({ parentMVEvent: parentMVEvent, chMVCEvent: chMVCEvent, pathIndex: index }); }));\n                            }))).pipe(startWith({ parentMVEvent: parentMVEvent, chMVCEvent: null, pathIndex: null })); }), // start the merged ob with an event signinifing change to parent\n                            skip(1), // skip the manually added event\n                            map(function (_a) {\n                                var parentMVEvent = _a.parentMVEvent, chMVCEvent = _a.chMVCEvent, pathIndex = _a.pathIndex;\n                                var retVal;\n                                if (!chMVCEvent) {\n                                    retVal = {\n                                        newArr: parentMVEvent.newArr.map(function (subArr) { return subArr.getArray().map(function (latLng) { return latLng.toJSON(); }); }),\n                                        eventName: parentMVEvent.evName,\n                                        index: parentMVEvent.index,\n                                    };\n                                    if (parentMVEvent.previous) {\n                                        retVal.previous = parentMVEvent.previous.getArray();\n                                    }\n                                }\n                                else {\n                                    retVal = {\n                                        newArr: parentMVEvent.newArr.map(function (subArr) { return subArr.getArray().map(function (latLng) { return latLng.toJSON(); }); }),\n                                        pathIndex: pathIndex,\n                                        eventName: chMVCEvent.evName,\n                                        index: chMVCEvent.index,\n                                    };\n                                    if (chMVCEvent.previous) {\n                                        retVal.previous = chMVCEvent.previous;\n                                    }\n                                }\n                                return retVal;\n                            }))];\n                }\n            });\n        });\n    };\n    PolygonManager.ctorParameters = function () { return [\n        { type: GoogleMapsAPIWrapper },\n        { type: NgZone }\n    ]; };\n    PolygonManager = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n    ], PolygonManager);\n    return PolygonManager;\n}());\n\nvar PolylineManager = /** @class */ (function () {\n    function PolylineManager(_mapsWrapper, _zone) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._polylines = new Map();\n    }\n    PolylineManager_1 = PolylineManager;\n    PolylineManager._convertPoints = function (line) {\n        var path = line._getPoints().map(function (point) {\n            return { lat: point.latitude, lng: point.longitude };\n        });\n        return path;\n    };\n    PolylineManager._convertPath = function (path) {\n        var symbolPath = google.maps.SymbolPath[path];\n        if (typeof symbolPath === 'number') {\n            return symbolPath;\n        }\n        else {\n            return path;\n        }\n    };\n    PolylineManager._convertIcons = function (line) {\n        var icons = line._getIcons().map(function (agmIcon) { return ({\n            fixedRotation: agmIcon.fixedRotation,\n            offset: agmIcon.offset,\n            repeat: agmIcon.repeat,\n            icon: {\n                anchor: new google.maps.Point(agmIcon.anchorX, agmIcon.anchorY),\n                fillColor: agmIcon.fillColor,\n                fillOpacity: agmIcon.fillOpacity,\n                path: PolylineManager_1._convertPath(agmIcon.path),\n                rotation: agmIcon.rotation,\n                scale: agmIcon.scale,\n                strokeColor: agmIcon.strokeColor,\n                strokeOpacity: agmIcon.strokeOpacity,\n                strokeWeight: agmIcon.strokeWeight,\n            },\n        }); });\n        // prune undefineds;\n        icons.forEach(function (icon) {\n            Object.entries(icon).forEach(function (_a) {\n                var _b = __read(_a, 2), key = _b[0], val = _b[1];\n                if (typeof val === 'undefined') {\n                    delete icon[key];\n                }\n            });\n            if (typeof icon.icon.anchor.x === 'undefined' ||\n                typeof icon.icon.anchor.y === 'undefined') {\n                delete icon.icon.anchor;\n            }\n        });\n        return icons;\n    };\n    PolylineManager.prototype.addPolyline = function (line) {\n        var _this = this;\n        var polylinePromise = this._mapsWrapper.getNativeMap()\n            .then(function () { return [PolylineManager_1._convertPoints(line),\n            PolylineManager_1._convertIcons(line)]; })\n            .then(function (_a) {\n            var _b = __read(_a, 2), path = _b[0], icons = _b[1];\n            return _this._mapsWrapper.createPolyline({\n                clickable: line.clickable,\n                draggable: line.draggable,\n                editable: line.editable,\n                geodesic: line.geodesic,\n                strokeColor: line.strokeColor,\n                strokeOpacity: line.strokeOpacity,\n                strokeWeight: line.strokeWeight,\n                visible: line.visible,\n                zIndex: line.zIndex,\n                path: path,\n                icons: icons,\n            });\n        });\n        this._polylines.set(line, polylinePromise);\n    };\n    PolylineManager.prototype.updatePolylinePoints = function (line) {\n        var _this = this;\n        var path = PolylineManager_1._convertPoints(line);\n        var m = this._polylines.get(line);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then(function (l) { return _this._zone.run(function () { l.setPath(path); }); });\n    };\n    PolylineManager.prototype.updateIconSequences = function (line) {\n        return __awaiter(this, void 0, void 0, function () {\n            var icons, m;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._mapsWrapper.getNativeMap()];\n                    case 1:\n                        _a.sent();\n                        icons = PolylineManager_1._convertIcons(line);\n                        m = this._polylines.get(line);\n                        if (m == null) {\n                            return [2 /*return*/];\n                        }\n                        return [2 /*return*/, m.then(function (l) { return _this._zone.run(function () { return l.setOptions({ icons: icons }); }); })];\n                }\n            });\n        });\n    };\n    PolylineManager.prototype.setPolylineOptions = function (line, options) {\n        return this._polylines.get(line).then(function (l) { l.setOptions(options); });\n    };\n    PolylineManager.prototype.deletePolyline = function (line) {\n        var _this = this;\n        var m = this._polylines.get(line);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then(function (l) {\n            return _this._zone.run(function () {\n                l.setMap(null);\n                _this._polylines.delete(line);\n            });\n        });\n    };\n    PolylineManager.prototype.getMVCPath = function (agmPolyline) {\n        return __awaiter(this, void 0, void 0, function () {\n            var polyline;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._polylines.get(agmPolyline)];\n                    case 1:\n                        polyline = _a.sent();\n                        return [2 /*return*/, polyline.getPath()];\n                }\n            });\n        });\n    };\n    PolylineManager.prototype.getPath = function (agmPolyline) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getMVCPath(agmPolyline)];\n                    case 1: return [2 /*return*/, (_a.sent()).getArray()];\n                }\n            });\n        });\n    };\n    PolylineManager.prototype.createEventObservable = function (eventName, line) {\n        var _this = this;\n        return new Observable(function (observer) {\n            _this._polylines.get(line).then(function (l) {\n                l.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });\n            });\n        });\n    };\n    PolylineManager.prototype.createPathEventObservable = function (line) {\n        return __awaiter(this, void 0, void 0, function () {\n            var mvcPath;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getMVCPath(line)];\n                    case 1:\n                        mvcPath = _a.sent();\n                        return [2 /*return*/, createMVCEventObservable(mvcPath)];\n                }\n            });\n        });\n    };\n    var PolylineManager_1;\n    PolylineManager.ctorParameters = function () { return [\n        { type: GoogleMapsAPIWrapper },\n        { type: NgZone }\n    ]; };\n    PolylineManager = PolylineManager_1 = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n    ], PolylineManager);\n    return PolylineManager;\n}());\n\nvar RectangleManager = /** @class */ (function () {\n    function RectangleManager(_apiWrapper, _zone) {\n        this._apiWrapper = _apiWrapper;\n        this._zone = _zone;\n        this._rectangles = new Map();\n    }\n    RectangleManager.prototype.addRectangle = function (rectangle) {\n        this._rectangles.set(rectangle, this._apiWrapper.createRectangle({\n            bounds: {\n                north: rectangle.north,\n                east: rectangle.east,\n                south: rectangle.south,\n                west: rectangle.west,\n            },\n            clickable: rectangle.clickable,\n            draggable: rectangle.draggable,\n            editable: rectangle.editable,\n            fillColor: rectangle.fillColor,\n            fillOpacity: rectangle.fillOpacity,\n            strokeColor: rectangle.strokeColor,\n            strokeOpacity: rectangle.strokeOpacity,\n            strokePosition: rectangle.strokePosition,\n            strokeWeight: rectangle.strokeWeight,\n            visible: rectangle.visible,\n            zIndex: rectangle.zIndex,\n        }));\n    };\n    /**\n     * Removes the given rectangle from the map.\n     */\n    RectangleManager.prototype.removeRectangle = function (rectangle) {\n        var _this = this;\n        return this._rectangles.get(rectangle).then(function (r) {\n            r.setMap(null);\n            _this._rectangles.delete(rectangle);\n        });\n    };\n    RectangleManager.prototype.setOptions = function (rectangle, options) {\n        return this._rectangles.get(rectangle).then(function (r) { return r.setOptions(options); });\n    };\n    RectangleManager.prototype.getBounds = function (rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) { return r.getBounds(); });\n    };\n    RectangleManager.prototype.setBounds = function (rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) {\n            return r.setBounds({\n                north: rectangle.north,\n                east: rectangle.east,\n                south: rectangle.south,\n                west: rectangle.west,\n            });\n        });\n    };\n    RectangleManager.prototype.setEditable = function (rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) {\n            return r.setEditable(rectangle.editable);\n        });\n    };\n    RectangleManager.prototype.setDraggable = function (rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) {\n            return r.setDraggable(rectangle.draggable);\n        });\n    };\n    RectangleManager.prototype.setVisible = function (rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) {\n            return r.setVisible(rectangle.visible);\n        });\n    };\n    RectangleManager.prototype.createEventObservable = function (eventName, rectangle) {\n        var _this = this;\n        return Observable.create(function (observer) {\n            var listener = null;\n            _this._rectangles.get(rectangle).then(function (r) {\n                listener = r.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });\n            });\n            return function () {\n                if (listener !== null) {\n                    listener.remove();\n                }\n            };\n        });\n    };\n    RectangleManager.ctorParameters = function () { return [\n        { type: GoogleMapsAPIWrapper },\n        { type: NgZone }\n    ]; };\n    RectangleManager = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n    ], RectangleManager);\n    return RectangleManager;\n}());\n\n/**\n * AgmMap renders a Google Map.\n * **Important note**: To be able see a map in the browser, you have to define a height for the\n * element `agm-map`.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *    </agm-map>\n *  `\n * })\n * ```\n */\nvar AgmMap = /** @class */ (function () {\n    function AgmMap(_elem, _mapsWrapper, _platformId, _fitBoundsService, _zone) {\n        this._elem = _elem;\n        this._mapsWrapper = _mapsWrapper;\n        this._platformId = _platformId;\n        this._fitBoundsService = _fitBoundsService;\n        this._zone = _zone;\n        /**\n         * The longitude that defines the center of the map.\n         */\n        this.longitude = 0;\n        /**\n         * The latitude that defines the center of the map.\n         */\n        this.latitude = 0;\n        /**\n         * The zoom level of the map. The default zoom level is 8.\n         */\n        this.zoom = 8;\n        /**\n         * Enables/disables if map is draggable.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = true;\n        /**\n         * Enables/disables zoom and center on double click. Enabled by default.\n         */\n        this.disableDoubleClickZoom = false;\n        /**\n         * Enables/disables all default UI of the Google map. Please note: When the map is created, this\n         * value cannot get updated.\n         */\n        this.disableDefaultUI = false;\n        /**\n         * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\n         */\n        this.scrollwheel = true;\n        /**\n         * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\n         * enabled by default.\n         */\n        this.keyboardShortcuts = true;\n        /**\n         * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\n         * modes, these styles will only apply to labels and geometry.\n         */\n        this.styles = [];\n        /**\n         * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\n         * used to\n         * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\n         */\n        this.usePanning = false;\n        /**\n         * Sets the viewport to contain the given bounds.\n         * If this option to `true`, the bounds get automatically computed from all elements that use the {@link AgmFitBounds} directive.\n         */\n        this.fitBounds = false;\n        /**\n         * The initial enabled/disabled state of the Scale control. This is disabled by default.\n         */\n        this.scaleControl = false;\n        /**\n         * The initial enabled/disabled state of the Map type control.\n         */\n        this.mapTypeControl = false;\n        /**\n         * The initial enabled/disabled state of the Pan control.\n         */\n        this.panControl = false;\n        /**\n         * The initial enabled/disabled state of the Rotate control.\n         */\n        this.rotateControl = false;\n        /**\n         * The initial enabled/disabled state of the Fullscreen control.\n         */\n        this.fullscreenControl = false;\n        /**\n         * The map mapTypeId. Defaults to 'roadmap'.\n         */\n        this.mapTypeId = 'roadmap';\n        /**\n         * When false, map icons are not clickable. A map icon represents a point of interest,\n         * also known as a POI. By default map icons are clickable.\n         */\n        this.clickableIcons = true;\n        /**\n         * A map icon represents a point of interest, also known as a POI.\n         * When map icons are clickable by default, an info window is displayed.\n         * When this property is set to false, the info window will not be shown but the click event\n         * will still fire\n         */\n        this.showDefaultInfoWindow = true;\n        /**\n         * This setting controls how gestures on the map are handled.\n         * Allowed values:\n         * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)\n         * - 'greedy'      (All touch gestures pan or zoom the map.)\n         * - 'none'        (The map cannot be panned or zoomed by user gestures.)\n         * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.\n         */\n        this.gestureHandling = 'auto';\n        /**\n         * Controls the automatic switching behavior for the angle of incidence of\n         * the map. The only allowed values are 0 and 45. The value 0 causes the map\n         * to always use a 0° overhead view regardless of the zoom level and\n         * viewport. The value 45 causes the tilt angle to automatically switch to\n         * 45 whenever 45° imagery is available for the current zoom level and\n         * viewport, and switch back to 0 whenever 45° imagery is not available\n         * (this is the default behavior). 45° imagery is only available for\n         * satellite and hybrid map types, within some locations, and at some zoom\n         * levels. Note: getTilt returns the current tilt angle, not the value\n         * specified by this option. Because getTilt and this option refer to\n         * different things, do not bind() the tilt property; doing so may yield\n         * unpredictable effects. (Default of AGM is 0 (disabled). Enable it with value 45.)\n         */\n        this.tilt = 0;\n        this._observableSubscriptions = [];\n        /**\n         * This event emitter gets emitted when the user clicks on the map (but not when they click on a\n         * marker or infoWindow).\n         */\n        this.mapClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user right-clicks on the map (but not when they click\n         * on a marker or infoWindow).\n         */\n        this.mapRightClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n         * on a marker or infoWindow).\n         */\n        this.mapDblClick = new EventEmitter();\n        /**\n         * This event emitter is fired when the map center changes.\n         */\n        this.centerChange = new EventEmitter();\n        /**\n         * This event is fired when the viewport bounds have changed.\n         */\n        this.boundsChange = new EventEmitter();\n        /**\n         * This event is fired when the mapTypeId property changes.\n         */\n        this.mapTypeIdChange = new EventEmitter();\n        /**\n         * This event is fired when the map becomes idle after panning or zooming.\n         */\n        this.idle = new EventEmitter();\n        /**\n         * This event is fired when the zoom level has changed.\n         */\n        this.zoomChange = new EventEmitter();\n        /**\n         * This event is fired when the google map is fully initialized.\n         * You get the google.maps.Map instance as a result of this EventEmitter.\n         */\n        this.mapReady = new EventEmitter();\n        /**\n         * This event is fired when the visible tiles have finished loading.\n         */\n        this.tilesLoaded = new EventEmitter();\n    }\n    AgmMap_1 = AgmMap;\n    /** @internal */\n    AgmMap.prototype.ngOnInit = function () {\n        if (isPlatformServer(this._platformId)) {\n            // The code is running on the server, do nothing\n            return;\n        }\n        // todo: this should be solved with a new component and a viewChild decorator\n        var container = this._elem.nativeElement.querySelector('.agm-map-container-inner');\n        this._initMapInstance(container);\n    };\n    AgmMap.prototype._initMapInstance = function (el) {\n        var _this = this;\n        this._mapsWrapper.createMap(el, {\n            center: { lat: this.latitude || 0, lng: this.longitude || 0 },\n            zoom: this.zoom,\n            minZoom: this.minZoom,\n            maxZoom: this.maxZoom,\n            controlSize: this.controlSize,\n            disableDefaultUI: this.disableDefaultUI,\n            disableDoubleClickZoom: this.disableDoubleClickZoom,\n            scrollwheel: this.scrollwheel,\n            backgroundColor: this.backgroundColor,\n            draggable: this.draggable,\n            draggableCursor: this.draggableCursor,\n            draggingCursor: this.draggingCursor,\n            keyboardShortcuts: this.keyboardShortcuts,\n            styles: this.styles,\n            zoomControl: this.zoomControl,\n            zoomControlOptions: this.zoomControlOptions,\n            streetViewControl: this.streetViewControl,\n            streetViewControlOptions: this.streetViewControlOptions,\n            scaleControl: this.scaleControl,\n            scaleControlOptions: this.scaleControlOptions,\n            mapTypeControl: this.mapTypeControl,\n            mapTypeControlOptions: this.mapTypeControlOptions,\n            panControl: this.panControl,\n            panControlOptions: this.panControlOptions,\n            rotateControl: this.rotateControl,\n            rotateControlOptions: this.rotateControlOptions,\n            fullscreenControl: this.fullscreenControl,\n            fullscreenControlOptions: this.fullscreenControlOptions,\n            mapTypeId: this.mapTypeId,\n            clickableIcons: this.clickableIcons,\n            gestureHandling: this.gestureHandling,\n            tilt: this.tilt,\n            restriction: this.restriction,\n        })\n            .then(function () { return _this._mapsWrapper.getNativeMap(); })\n            .then(function (map) { return _this.mapReady.emit(map); });\n        // register event listeners\n        this._handleMapCenterChange();\n        this._handleMapZoomChange();\n        this._handleMapMouseEvents();\n        this._handleBoundsChange();\n        this._handleMapTypeIdChange();\n        this._handleTilesLoadedEvent();\n        this._handleIdleEvent();\n    };\n    /** @internal */\n    AgmMap.prototype.ngOnDestroy = function () {\n        // unsubscribe all registered observable subscriptions\n        this._observableSubscriptions.forEach(function (s) { return s.unsubscribe(); });\n        // remove all listeners from the map instance\n        this._mapsWrapper.clearInstanceListeners();\n        if (this._fitBoundsSubscription) {\n            this._fitBoundsSubscription.unsubscribe();\n        }\n    };\n    /* @internal */\n    AgmMap.prototype.ngOnChanges = function (changes) {\n        this._updateMapOptionsChanges(changes);\n        this._updatePosition(changes);\n    };\n    AgmMap.prototype._updateMapOptionsChanges = function (changes) {\n        var options = {};\n        var optionKeys = Object.keys(changes).filter(function (k) { return AgmMap_1._mapOptionsAttributes.indexOf(k) !== -1; });\n        optionKeys.forEach(function (k) { options[k] = changes[k].currentValue; });\n        this._mapsWrapper.setMapOptions(options);\n    };\n    /**\n     * Triggers a resize event on the google map instance.\n     * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\n     * Returns a promise that gets resolved after the event was triggered.\n     */\n    AgmMap.prototype.triggerResize = function (recenter) {\n        var _this = this;\n        if (recenter === void 0) { recenter = true; }\n        // Note: When we would trigger the resize event and show the map in the same turn (which is a\n        // common case for triggering a resize event), then the resize event would not\n        // work (to show the map), so we trigger the event in a timeout.\n        return new Promise(function (resolve) {\n            setTimeout(function () {\n                return _this._mapsWrapper.triggerMapEvent('resize').then(function () {\n                    if (recenter) {\n                        _this.fitBounds != null ? _this._fitBounds() : _this._setCenter();\n                    }\n                    resolve();\n                });\n            });\n        });\n    };\n    AgmMap.prototype._updatePosition = function (changes) {\n        if (changes['latitude'] == null && changes['longitude'] == null &&\n            !changes['fitBounds']) {\n            // no position update needed\n            return;\n        }\n        // we prefer fitBounds in changes\n        if ('fitBounds' in changes) {\n            this._fitBounds();\n            return;\n        }\n        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n            return;\n        }\n        this._setCenter();\n    };\n    AgmMap.prototype._setCenter = function () {\n        var newCenter = {\n            lat: this.latitude,\n            lng: this.longitude,\n        };\n        if (this.usePanning) {\n            this._mapsWrapper.panTo(newCenter);\n        }\n        else {\n            this._mapsWrapper.setCenter(newCenter);\n        }\n    };\n    AgmMap.prototype._fitBounds = function () {\n        switch (this.fitBounds) {\n            case true:\n                this._subscribeToFitBoundsUpdates();\n                break;\n            case false:\n                if (this._fitBoundsSubscription) {\n                    this._fitBoundsSubscription.unsubscribe();\n                }\n                break;\n            default:\n                this._updateBounds(this.fitBounds, this.fitBoundsPadding);\n        }\n    };\n    AgmMap.prototype._subscribeToFitBoundsUpdates = function () {\n        var _this = this;\n        this._zone.runOutsideAngular(function () {\n            _this._fitBoundsSubscription = _this._fitBoundsService.getBounds$().subscribe(function (b) {\n                _this._zone.run(function () { return _this._updateBounds(b, _this.fitBoundsPadding); });\n            });\n        });\n    };\n    AgmMap.prototype._updateBounds = function (bounds, padding) {\n        if (!bounds) {\n            return;\n        }\n        if (this._isLatLngBoundsLiteral(bounds) && typeof google !== 'undefined' && google && google.maps && google.maps.LatLngBounds) {\n            var newBounds = new google.maps.LatLngBounds();\n            newBounds.union(bounds);\n            bounds = newBounds;\n        }\n        if (this.usePanning) {\n            this._mapsWrapper.panToBounds(bounds, padding);\n            return;\n        }\n        this._mapsWrapper.fitBounds(bounds, padding);\n    };\n    AgmMap.prototype._isLatLngBoundsLiteral = function (bounds) {\n        return bounds != null && bounds.extend === undefined;\n    };\n    AgmMap.prototype._handleMapCenterChange = function () {\n        var _this = this;\n        var s = this._mapsWrapper.subscribeToMapEvent('center_changed').subscribe(function () {\n            _this._mapsWrapper.getCenter().then(function (center) {\n                _this.latitude = center.lat();\n                _this.longitude = center.lng();\n                _this.centerChange.emit({ lat: _this.latitude, lng: _this.longitude });\n            });\n        });\n        this._observableSubscriptions.push(s);\n    };\n    AgmMap.prototype._handleBoundsChange = function () {\n        var _this = this;\n        var s = this._mapsWrapper.subscribeToMapEvent('bounds_changed').subscribe(function () {\n            _this._mapsWrapper.getBounds().then(function (bounds) { _this.boundsChange.emit(bounds); });\n        });\n        this._observableSubscriptions.push(s);\n    };\n    AgmMap.prototype._handleMapTypeIdChange = function () {\n        var _this = this;\n        var s = this._mapsWrapper.subscribeToMapEvent('maptypeid_changed').subscribe(function () {\n            _this._mapsWrapper.getMapTypeId().then(function (mapTypeId) { _this.mapTypeIdChange.emit(mapTypeId); });\n        });\n        this._observableSubscriptions.push(s);\n    };\n    AgmMap.prototype._handleMapZoomChange = function () {\n        var _this = this;\n        var s = this._mapsWrapper.subscribeToMapEvent('zoom_changed').subscribe(function () {\n            _this._mapsWrapper.getZoom().then(function (z) {\n                _this.zoom = z;\n                _this.zoomChange.emit(z);\n            });\n        });\n        this._observableSubscriptions.push(s);\n    };\n    AgmMap.prototype._handleIdleEvent = function () {\n        var _this = this;\n        var s = this._mapsWrapper.subscribeToMapEvent('idle').subscribe(function () { _this.idle.emit(void 0); });\n        this._observableSubscriptions.push(s);\n    };\n    AgmMap.prototype._handleTilesLoadedEvent = function () {\n        var _this = this;\n        var s = this._mapsWrapper.subscribeToMapEvent('tilesloaded').subscribe(function () { return _this.tilesLoaded.emit(void 0); });\n        this._observableSubscriptions.push(s);\n    };\n    AgmMap.prototype._handleMapMouseEvents = function () {\n        var _this = this;\n        var events = [\n            { name: 'click', emitter: this.mapClick },\n            { name: 'rightclick', emitter: this.mapRightClick },\n            { name: 'dblclick', emitter: this.mapDblClick },\n        ];\n        events.forEach(function (e) {\n            var s = _this._mapsWrapper.subscribeToMapEvent(e.name).subscribe(function (event) {\n                var value = {\n                    coords: {\n                        lat: event.latLng.lat(),\n                        lng: event.latLng.lng(),\n                    },\n                    placeId: event.placeId,\n                };\n                // the placeId will be undefined in case the event was not an IconMouseEvent (google types)\n                if (value.placeId && !_this.showDefaultInfoWindow) {\n                    event.stop();\n                }\n                e.emitter.emit(value);\n            });\n            _this._observableSubscriptions.push(s);\n        });\n    };\n    var AgmMap_1;\n    /**\n     * Map option attributes that can change over time\n     */\n    AgmMap._mapOptionsAttributes = [\n        'disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor',\n        'keyboardShortcuts', 'zoomControl', 'zoomControlOptions', 'styles', 'streetViewControl',\n        'streetViewControlOptions', 'zoom', 'mapTypeControl', 'mapTypeControlOptions', 'minZoom',\n        'maxZoom', 'panControl', 'panControlOptions', 'rotateControl', 'rotateControlOptions',\n        'fullscreenControl', 'fullscreenControlOptions', 'scaleControl', 'scaleControlOptions',\n        'mapTypeId', 'clickableIcons', 'gestureHandling', 'tilt', 'restriction',\n    ];\n    AgmMap.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: GoogleMapsAPIWrapper },\n        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n        { type: FitBoundsService },\n        { type: NgZone }\n    ]; };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"longitude\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"latitude\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"zoom\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmMap.prototype, \"minZoom\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmMap.prototype, \"maxZoom\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmMap.prototype, \"controlSize\", void 0);\n    __decorate([\n        Input('mapDraggable'),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"draggable\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"disableDoubleClickZoom\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"disableDefaultUI\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"scrollwheel\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmMap.prototype, \"backgroundColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmMap.prototype, \"draggableCursor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmMap.prototype, \"draggingCursor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"keyboardShortcuts\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AgmMap.prototype, \"zoomControl\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"zoomControlOptions\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], AgmMap.prototype, \"styles\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"usePanning\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AgmMap.prototype, \"streetViewControl\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"streetViewControlOptions\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"fitBounds\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"fitBoundsPadding\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"scaleControl\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"scaleControlOptions\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"mapTypeControl\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"mapTypeControlOptions\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"panControl\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"panControlOptions\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"rotateControl\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"rotateControlOptions\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"fullscreenControl\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"fullscreenControlOptions\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmMap.prototype, \"mapTypeId\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"clickableIcons\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"showDefaultInfoWindow\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmMap.prototype, \"gestureHandling\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"tilt\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMap.prototype, \"restriction\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmMap.prototype, \"mapClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmMap.prototype, \"mapRightClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmMap.prototype, \"mapDblClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmMap.prototype, \"centerChange\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmMap.prototype, \"boundsChange\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmMap.prototype, \"mapTypeIdChange\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmMap.prototype, \"idle\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmMap.prototype, \"zoomChange\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmMap.prototype, \"mapReady\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmMap.prototype, \"tilesLoaded\", void 0);\n    AgmMap = AgmMap_1 = __decorate([\n        Component({\n            selector: 'agm-map',\n            providers: [\n                CircleManager,\n                DataLayerManager,\n                DataLayerManager,\n                FitBoundsService,\n                GoogleMapsAPIWrapper,\n                InfoWindowManager,\n                KmlLayerManager,\n                LayerManager,\n                MarkerManager,\n                PolygonManager,\n                PolylineManager,\n                RectangleManager,\n            ],\n            host: {\n                // todo: deprecated - we will remove it with the next version\n                '[class.sebm-google-map-container]': 'true',\n            },\n            template: \"\\n              <div class='agm-map-container-inner sebm-google-map-container-inner'></div>\\n              <div class='agm-map-content'>\\n                <ng-content></ng-content>\\n              </div>\\n  \",\n            styles: [\"\\n    .agm-map-container-inner {\\n      width: inherit;\\n      height: inherit;\\n    }\\n    .agm-map-content {\\n      display:none;\\n    }\\n  \"]\n        }),\n        __param(2, Inject(PLATFORM_ID)),\n        __metadata(\"design:paramtypes\", [ElementRef,\n            GoogleMapsAPIWrapper,\n            Object,\n            FitBoundsService,\n            NgZone])\n    ], AgmMap);\n    return AgmMap;\n}());\n\nvar markerId = 0;\n/**\n * AgmMarker renders a map marker inside a {@link AgmMap}.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nvar AgmMarker = /** @class */ (function () {\n    function AgmMarker(_markerManager) {\n        this._markerManager = _markerManager;\n        /**\n         * If true, the marker can be dragged. Default value is false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If true, the marker is visible\n         */\n        this.visible = true;\n        /**\n         * Whether to automatically open the child info window when the marker is clicked.\n         */\n        this.openInfoWindow = true;\n        /**\n         * The marker's opacity between 0.0 and 1.0.\n         */\n        this.opacity = 1;\n        /**\n         * All markers are displayed on the map in order of their zIndex, with higher values displaying in\n         * front of markers with lower values. By default, markers are displayed according to their\n         * vertical position on screen, with lower markers appearing in front of markers further up the\n         * screen.\n         */\n        this.zIndex = 1;\n        /**\n         * If true, the marker can be clicked. Default value is true.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.clickable = true;\n        /**\n         * This event is fired when the marker's animation property changes.\n         *\n         * @memberof AgmMarker\n         */\n        this.animationChange = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the marker.\n         */\n        this.markerClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks twice on the marker.\n         */\n        this.markerDblClick = new EventEmitter();\n        /**\n         * This event is fired when the user rightclicks on the marker.\n         */\n        this.markerRightClick = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the marker.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the marker.\n         */\n        this.drag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the marker.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user mouses over the marker.\n         */\n        this.mouseOver = new EventEmitter();\n        /**\n         * This event is fired when the user mouses outside the marker.\n         */\n        this.mouseOut = new EventEmitter();\n        /** @internal */\n        this.infoWindow = new QueryList();\n        this._markerAddedToManger = false;\n        this._observableSubscriptions = [];\n        this._fitBoundsDetails$ = new ReplaySubject(1);\n        this._id = (markerId++).toString();\n    }\n    AgmMarker_1 = AgmMarker;\n    /* @internal */\n    AgmMarker.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.handleInfoWindowUpdate();\n        this.infoWindow.changes.subscribe(function () { return _this.handleInfoWindowUpdate(); });\n    };\n    AgmMarker.prototype.handleInfoWindowUpdate = function () {\n        var _this = this;\n        if (this.infoWindow.length > 1) {\n            throw new Error('Expected no more than one info window.');\n        }\n        this.infoWindow.forEach(function (marker) {\n            marker.hostMarker = _this;\n        });\n    };\n    /** @internal */\n    AgmMarker.prototype.ngOnChanges = function (changes) {\n        if (typeof this.latitude === 'string') {\n            this.latitude = Number(this.latitude);\n        }\n        if (typeof this.longitude === 'string') {\n            this.longitude = Number(this.longitude);\n        }\n        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n            return;\n        }\n        if (!this._markerAddedToManger) {\n            this._markerManager.addMarker(this);\n            this._updateFitBoundsDetails();\n            this._markerAddedToManger = true;\n            this._addEventListeners();\n            return;\n        }\n        if (changes['latitude'] || changes['longitude']) {\n            this._markerManager.updateMarkerPosition(this);\n            this._updateFitBoundsDetails();\n        }\n        if (changes['title']) {\n            this._markerManager.updateTitle(this);\n        }\n        if (changes['label']) {\n            this._markerManager.updateLabel(this);\n        }\n        if (changes['draggable']) {\n            this._markerManager.updateDraggable(this);\n        }\n        if (changes['iconUrl']) {\n            this._markerManager.updateIcon(this);\n        }\n        if (changes['opacity']) {\n            this._markerManager.updateOpacity(this);\n        }\n        if (changes['visible']) {\n            this._markerManager.updateVisible(this);\n        }\n        if (changes['zIndex']) {\n            this._markerManager.updateZIndex(this);\n        }\n        if (changes['clickable']) {\n            this._markerManager.updateClickable(this);\n        }\n        if (changes['animation']) {\n            this._markerManager.updateAnimation(this);\n        }\n    };\n    /** @internal */\n    AgmMarker.prototype.getFitBoundsDetails$ = function () {\n        return this._fitBoundsDetails$.asObservable();\n    };\n    AgmMarker.prototype._updateFitBoundsDetails = function () {\n        this._fitBoundsDetails$.next({ latLng: { lat: this.latitude, lng: this.longitude } });\n    };\n    AgmMarker.prototype._addEventListeners = function () {\n        var _this = this;\n        var cs = this._markerManager.createEventObservable('click', this).subscribe(function () {\n            if (_this.openInfoWindow) {\n                _this.infoWindow.forEach(function (infoWindow) { return infoWindow.open(); });\n            }\n            _this.markerClick.emit(_this);\n        });\n        this._observableSubscriptions.push(cs);\n        var dcs = this._markerManager.createEventObservable('dblclick', this).subscribe(function () {\n            _this.markerDblClick.emit(null);\n        });\n        this._observableSubscriptions.push(dcs);\n        var rc = this._markerManager.createEventObservable('rightclick', this).subscribe(function () {\n            _this.markerRightClick.emit(null);\n        });\n        this._observableSubscriptions.push(rc);\n        var ds = this._markerManager.createEventObservable('dragstart', this)\n            .subscribe(function (e) {\n            _this.dragStart.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\n        });\n        this._observableSubscriptions.push(ds);\n        var d = this._markerManager.createEventObservable('drag', this)\n            .subscribe(function (e) {\n            _this.drag.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\n        });\n        this._observableSubscriptions.push(d);\n        var de = this._markerManager.createEventObservable('dragend', this)\n            .subscribe(function (e) {\n            _this.dragEnd.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\n        });\n        this._observableSubscriptions.push(de);\n        var mover = this._markerManager.createEventObservable('mouseover', this)\n            .subscribe(function (e) {\n            _this.mouseOver.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\n        });\n        this._observableSubscriptions.push(mover);\n        var mout = this._markerManager.createEventObservable('mouseout', this)\n            .subscribe(function (e) {\n            _this.mouseOut.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\n        });\n        this._observableSubscriptions.push(mout);\n        var anChng = this._markerManager.createEventObservable('animation_changed', this)\n            .subscribe(function () {\n            _this.animationChange.emit(_this.animation);\n        });\n        this._observableSubscriptions.push(anChng);\n    };\n    /** @internal */\n    AgmMarker.prototype.id = function () { return this._id; };\n    /** @internal */\n    AgmMarker.prototype.toString = function () { return 'AgmMarker-' + this._id.toString(); };\n    /** @internal */\n    AgmMarker.prototype.ngOnDestroy = function () {\n        this._markerManager.deleteMarker(this);\n        // unsubscribe all registered observable subscriptions\n        this._observableSubscriptions.forEach(function (s) { return s.unsubscribe(); });\n    };\n    var AgmMarker_1;\n    AgmMarker.ctorParameters = function () { return [\n        { type: MarkerManager }\n    ]; };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmMarker.prototype, \"latitude\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmMarker.prototype, \"longitude\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmMarker.prototype, \"title\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMarker.prototype, \"label\", void 0);\n    __decorate([\n        Input('markerDraggable'),\n        __metadata(\"design:type\", Object)\n    ], AgmMarker.prototype, \"draggable\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmMarker.prototype, \"iconUrl\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMarker.prototype, \"visible\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMarker.prototype, \"openInfoWindow\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMarker.prototype, \"opacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmMarker.prototype, \"zIndex\", void 0);\n    __decorate([\n        Input('markerClickable'),\n        __metadata(\"design:type\", Object)\n    ], AgmMarker.prototype, \"clickable\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmMarker.prototype, \"animation\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], AgmMarker.prototype, \"animationChange\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmMarker.prototype, \"markerClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmMarker.prototype, \"markerDblClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmMarker.prototype, \"markerRightClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmMarker.prototype, \"dragStart\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmMarker.prototype, \"drag\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmMarker.prototype, \"dragEnd\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmMarker.prototype, \"mouseOver\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmMarker.prototype, \"mouseOut\", void 0);\n    __decorate([\n        ContentChildren(AgmInfoWindow),\n        __metadata(\"design:type\", QueryList)\n    ], AgmMarker.prototype, \"infoWindow\", void 0);\n    AgmMarker = AgmMarker_1 = __decorate([\n        Directive({\n            selector: 'agm-marker',\n            providers: [\n                { provide: FitBoundsAccessor, useExisting: forwardRef(function () { return AgmMarker_1; }) },\n            ],\n            inputs: [\n                'latitude', 'longitude', 'title', 'label', 'draggable: markerDraggable', 'iconUrl',\n                'openInfoWindow', 'opacity', 'visible', 'zIndex', 'animation',\n            ],\n            outputs: ['markerClick', 'dragStart', 'drag', 'dragEnd', 'mouseOver', 'mouseOut'],\n        }),\n        __metadata(\"design:paramtypes\", [MarkerManager])\n    ], AgmMarker);\n    return AgmMarker;\n}());\n\n/**\n * AgmPolygon renders a polygon on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polygon [paths]=\"paths\">\n *      </agm-polygon>\n *    </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = 0;\n *   lng: number = 0;\n *   zoom: number = 10;\n *   paths: Array<LatLngLiteral> = [\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ]\n *   // Nesting paths will create a hole where they overlap;\n *   nestedPaths: Array<Array<LatLngLiteral>> = [[\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ], [\n *     { lat: 0, lng: 15 },\n *     { lat: 0, lng: 20 },\n *     { lat: 5, lng: 20 },\n *     { lat: 5, lng: 15 },\n *     { lat: 0, lng: 15 }\n *   ]]\n * }\n * ```\n */\nvar AgmPolygon = /** @class */ (function () {\n    function AgmPolygon(_polygonManager) {\n        this._polygonManager = _polygonManager;\n        /**\n         * Indicates whether this Polygon handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this shape over the map. The geodesic\n         * property defines the mode of dragging. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this shape by dragging the control\n         * points shown at the vertices and on each segment. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * When true, edges of the polygon are interpreted as geodesic and will\n         * follow the curvature of the Earth. When false, edges of the polygon are\n         * rendered as straight lines in screen space. Note that the shape of a\n         * geodesic polygon may appear to change when dragged, as the dimensions\n         * are maintained relative to the surface of the earth. Defaults to false.\n         */\n        this.geodesic = false;\n        /**\n         * The ordered sequence of coordinates that designates a closed loop.\n         * Unlike polylines, a polygon may consist of one or more paths.\n         *  As a result, the paths property may specify one or more arrays of\n         * LatLng coordinates. Paths are closed automatically; do not repeat the\n         * first vertex of the path as the last vertex. Simple polygons may be\n         * defined using a single array of LatLngs. More complex polygons may\n         * specify an array of arrays. Any simple arrays are converted into Arrays.\n         * Inserting or removing LatLngs from the Array will automatically update\n         * the polygon on the map.\n         */\n        this.paths = [];\n        /**\n         * This event is fired when the DOM click event is fired on the Polygon.\n         */\n        this.polyClick = new EventEmitter();\n        /**\n         * This event is fired when the DOM dblclick event is fired on the Polygon.\n         */\n        this.polyDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the polygon.\n         */\n        this.polyDrag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the polygon.\n         */\n        this.polyDragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the polygon.\n         */\n        this.polyDragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the Polygon.\n         */\n        this.polyMouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the Polygon.\n         */\n        this.polyMouseMove = new EventEmitter();\n        /**\n         * This event is fired on Polygon mouseout.\n         */\n        this.polyMouseOut = new EventEmitter();\n        /**\n         * This event is fired on Polygon mouseover.\n         */\n        this.polyMouseOver = new EventEmitter();\n        /**\n         * This event is fired whe the DOM mouseup event is fired on the Polygon\n         */\n        this.polyMouseUp = new EventEmitter();\n        /**\n         * This event is fired when the Polygon is right-clicked on.\n         */\n        this.polyRightClick = new EventEmitter();\n        /**\n         * This event is fired after Polygon first path changes.\n         */\n        this.polyPathsChange = new EventEmitter();\n        this._polygonAddedToManager = false;\n        this._subscriptions = [];\n    }\n    AgmPolygon_1 = AgmPolygon;\n    /** @internal */\n    AgmPolygon.prototype.ngAfterContentInit = function () {\n        if (!this._polygonAddedToManager) {\n            this._init();\n        }\n    };\n    AgmPolygon.prototype.ngOnChanges = function (changes) {\n        if (!this._polygonAddedToManager) {\n            this._init();\n            return;\n        }\n        this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));\n    };\n    AgmPolygon.prototype._init = function () {\n        this._polygonManager.addPolygon(this);\n        this._polygonAddedToManager = true;\n        this._addEventListeners();\n    };\n    AgmPolygon.prototype._addEventListeners = function () {\n        var _this = this;\n        var handlers = [\n            { name: 'click', handler: function (ev) { return _this.polyClick.emit(ev); } },\n            { name: 'dblclick', handler: function (ev) { return _this.polyDblClick.emit(ev); } },\n            { name: 'drag', handler: function (ev) { return _this.polyDrag.emit(ev); } },\n            { name: 'dragend', handler: function (ev) { return _this.polyDragEnd.emit(ev); } },\n            { name: 'dragstart', handler: function (ev) { return _this.polyDragStart.emit(ev); } },\n            { name: 'mousedown', handler: function (ev) { return _this.polyMouseDown.emit(ev); } },\n            { name: 'mousemove', handler: function (ev) { return _this.polyMouseMove.emit(ev); } },\n            { name: 'mouseout', handler: function (ev) { return _this.polyMouseOut.emit(ev); } },\n            { name: 'mouseover', handler: function (ev) { return _this.polyMouseOver.emit(ev); } },\n            { name: 'mouseup', handler: function (ev) { return _this.polyMouseUp.emit(ev); } },\n            { name: 'rightclick', handler: function (ev) { return _this.polyRightClick.emit(ev); } },\n        ];\n        handlers.forEach(function (obj) {\n            var os = _this._polygonManager.createEventObservable(obj.name, _this).subscribe(obj.handler);\n            _this._subscriptions.push(os);\n        });\n        this._polygonManager.createPathEventObservable(this)\n            .then(function (paths$) {\n            var os = paths$.subscribe(function (pathEvent) { return _this.polyPathsChange.emit(pathEvent); });\n            _this._subscriptions.push(os);\n        });\n    };\n    AgmPolygon.prototype._updatePolygonOptions = function (changes) {\n        return Object.keys(changes)\n            .filter(function (k) { return AgmPolygon_1._polygonOptionsAttributes.indexOf(k) !== -1; })\n            .reduce(function (obj, k) {\n            obj[k] = changes[k].currentValue;\n            return obj;\n        }, {});\n    };\n    /** @internal */\n    AgmPolygon.prototype.id = function () { return this._id; };\n    /** @internal */\n    AgmPolygon.prototype.ngOnDestroy = function () {\n        this._polygonManager.deletePolygon(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach(function (s) { return s.unsubscribe(); });\n    };\n    AgmPolygon.prototype.getPath = function () {\n        return this._polygonManager.getPath(this);\n    };\n    AgmPolygon.prototype.getPaths = function () {\n        return this._polygonManager.getPaths(this);\n    };\n    var AgmPolygon_1;\n    AgmPolygon._polygonOptionsAttributes = [\n        'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map',\n        'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable',\n        'editable', 'visible',\n    ];\n    AgmPolygon.ctorParameters = function () { return [\n        { type: PolygonManager }\n    ]; };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmPolygon.prototype, \"clickable\", void 0);\n    __decorate([\n        Input('polyDraggable'),\n        __metadata(\"design:type\", Object)\n    ], AgmPolygon.prototype, \"draggable\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmPolygon.prototype, \"editable\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmPolygon.prototype, \"fillColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmPolygon.prototype, \"fillOpacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmPolygon.prototype, \"geodesic\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], AgmPolygon.prototype, \"paths\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmPolygon.prototype, \"strokeColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmPolygon.prototype, \"strokeOpacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmPolygon.prototype, \"strokeWeight\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AgmPolygon.prototype, \"visible\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmPolygon.prototype, \"zIndex\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolygon.prototype, \"polyClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolygon.prototype, \"polyDblClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolygon.prototype, \"polyDrag\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolygon.prototype, \"polyDragEnd\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolygon.prototype, \"polyDragStart\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolygon.prototype, \"polyMouseDown\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolygon.prototype, \"polyMouseMove\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolygon.prototype, \"polyMouseOut\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolygon.prototype, \"polyMouseOver\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolygon.prototype, \"polyMouseUp\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolygon.prototype, \"polyRightClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], AgmPolygon.prototype, \"polyPathsChange\", void 0);\n    AgmPolygon = AgmPolygon_1 = __decorate([\n        Directive({\n            selector: 'agm-polygon',\n        }),\n        __metadata(\"design:paramtypes\", [PolygonManager])\n    ], AgmPolygon);\n    return AgmPolygon;\n}());\n\n/**\n * AgmPolylineIcon enables to add polyline sequences to add arrows, circle,\n * or custom icons either along the entire line, or in a specific part of it.\n * See https://developers.google.com/maps/documentation/javascript/shapes#polyline_customize\n *\n * ### Example\n * ```html\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-icon-sequence [fixedRotation]=\"true\" [path]=\"'FORWARD_OPEN_ARROW'\">\n *          </agm-icon-sequence>\n *      </agm-polyline>\n *    </agm-map>\n * ```\n *\n * @export\n * @class AgmPolylineIcon\n */\nvar AgmPolylineIcon = /** @class */ (function () {\n    function AgmPolylineIcon() {\n    }\n    AgmPolylineIcon.prototype.ngOnInit = function () {\n        if (this.path == null) {\n            throw new Error('Icon Sequence path is required');\n        }\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], AgmPolylineIcon.prototype, \"fixedRotation\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmPolylineIcon.prototype, \"offset\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmPolylineIcon.prototype, \"repeat\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmPolylineIcon.prototype, \"anchorX\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmPolylineIcon.prototype, \"anchorY\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmPolylineIcon.prototype, \"fillColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmPolylineIcon.prototype, \"fillOpacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmPolylineIcon.prototype, \"path\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmPolylineIcon.prototype, \"rotation\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmPolylineIcon.prototype, \"scale\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmPolylineIcon.prototype, \"strokeColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmPolylineIcon.prototype, \"strokeOpacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmPolylineIcon.prototype, \"strokeWeight\", void 0);\n    AgmPolylineIcon = __decorate([\n        Directive({ selector: 'agm-polyline agm-icon-sequence' })\n    ], AgmPolylineIcon);\n    return AgmPolylineIcon;\n}());\n\n/**\n * AgmPolylinePoint represents one element of a polyline within a  {@link\n * AgmPolyline}\n */\nvar AgmPolylinePoint = /** @class */ (function () {\n    function AgmPolylinePoint() {\n        /**\n         * This event emitter gets emitted when the position of the point changed.\n         */\n        this.positionChanged = new EventEmitter();\n    }\n    AgmPolylinePoint_1 = AgmPolylinePoint;\n    AgmPolylinePoint.prototype.ngOnChanges = function (changes) {\n        if (changes['latitude'] || changes['longitude']) {\n            var position = {\n                lat: changes['latitude'] ? changes['latitude'].currentValue : this.latitude,\n                lng: changes['longitude'] ? changes['longitude'].currentValue : this.longitude,\n            };\n            this.positionChanged.emit(position);\n        }\n    };\n    /** @internal */\n    AgmPolylinePoint.prototype.getFitBoundsDetails$ = function () {\n        return this.positionChanged.pipe(startWith({ lat: this.latitude, lng: this.longitude }), map(function (position) { return ({ latLng: position }); }));\n    };\n    var AgmPolylinePoint_1;\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmPolylinePoint.prototype, \"latitude\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmPolylinePoint.prototype, \"longitude\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolylinePoint.prototype, \"positionChanged\", void 0);\n    AgmPolylinePoint = AgmPolylinePoint_1 = __decorate([\n        Directive({\n            selector: 'agm-polyline-point',\n            providers: [\n                { provide: FitBoundsAccessor, useExisting: forwardRef(function () { return AgmPolylinePoint_1; }) },\n            ],\n        }),\n        __metadata(\"design:paramtypes\", [])\n    ], AgmPolylinePoint);\n    return AgmPolylinePoint;\n}());\n\nvar polylineId = 0;\n/**\n * AgmPolyline renders a polyline on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\n *          </agm-polyline-point>\n *          <agm-polyline-point [latitude]=\"latB\" [longitude]=\"lngB\">\n *          </agm-polyline-point>\n *      </agm-polyline>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nvar AgmPolyline = /** @class */ (function () {\n    function AgmPolyline(_polylineManager) {\n        this._polylineManager = _polylineManager;\n        /**\n         * Indicates whether this Polyline handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this shape over the map. The geodesic property defines the\n         * mode of dragging. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this shape by dragging the control points shown at the\n         * vertices and on each segment. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of\n         * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.\n         * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions\n         * are maintained relative to the surface of the earth. Defaults to false.\n         */\n        this.geodesic = false;\n        /**\n         * Whether this polyline is visible on the map. Defaults to true.\n         */\n        this.visible = true;\n        /**\n         * This event is fired when the DOM click event is fired on the Polyline.\n         */\n        this.lineClick = new EventEmitter();\n        /**\n         * This event is fired when the DOM dblclick event is fired on the Polyline.\n         */\n        this.lineDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the polyline.\n         */\n        this.lineDrag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the polyline.\n         */\n        this.lineDragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the polyline.\n         */\n        this.lineDragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the Polyline.\n         */\n        this.lineMouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the Polyline.\n         */\n        this.lineMouseMove = new EventEmitter();\n        /**\n         * This event is fired on Polyline mouseout.\n         */\n        this.lineMouseOut = new EventEmitter();\n        /**\n         * This event is fired on Polyline mouseover.\n         */\n        this.lineMouseOver = new EventEmitter();\n        /**\n         * This event is fired whe the DOM mouseup event is fired on the Polyline\n         */\n        this.lineMouseUp = new EventEmitter();\n        /**\n         * This event is fired when the Polyline is right-clicked on.\n         */\n        this.lineRightClick = new EventEmitter();\n        /**\n         * This event is fired after Polyline's path changes.\n         */\n        this.polyPathChange = new EventEmitter();\n        this._polylineAddedToManager = false;\n        this._subscriptions = [];\n        this._id = (polylineId++).toString();\n    }\n    AgmPolyline_1 = AgmPolyline;\n    /** @internal */\n    AgmPolyline.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        if (this.points.length) {\n            this.points.forEach(function (point) {\n                var s = point.positionChanged.subscribe(function () { _this._polylineManager.updatePolylinePoints(_this); });\n                _this._subscriptions.push(s);\n            });\n        }\n        if (!this._polylineAddedToManager) {\n            this._init();\n        }\n        var pointSub = this.points.changes.subscribe(function () { return _this._polylineManager.updatePolylinePoints(_this); });\n        this._subscriptions.push(pointSub);\n        this._polylineManager.updatePolylinePoints(this);\n        var iconSub = this.iconSequences.changes.subscribe(function () { return _this._polylineManager.updateIconSequences(_this); });\n        this._subscriptions.push(iconSub);\n    };\n    AgmPolyline.prototype.ngOnChanges = function (changes) {\n        if (!this._polylineAddedToManager) {\n            this._init();\n            return;\n        }\n        var options = {};\n        var optionKeys = Object.keys(changes).filter(function (k) { return AgmPolyline_1._polylineOptionsAttributes.indexOf(k) !== -1; });\n        optionKeys.forEach(function (k) { return options[k] = changes[k].currentValue; });\n        this._polylineManager.setPolylineOptions(this, options);\n    };\n    AgmPolyline.prototype.getPath = function () {\n        return this._polylineManager.getPath(this);\n    };\n    AgmPolyline.prototype._init = function () {\n        this._polylineManager.addPolyline(this);\n        this._polylineAddedToManager = true;\n        this._addEventListeners();\n    };\n    AgmPolyline.prototype._addEventListeners = function () {\n        var _this = this;\n        var handlers = [\n            { name: 'click', handler: function (ev) { return _this.lineClick.emit(ev); } },\n            { name: 'dblclick', handler: function (ev) { return _this.lineDblClick.emit(ev); } },\n            { name: 'drag', handler: function (ev) { return _this.lineDrag.emit(ev); } },\n            { name: 'dragend', handler: function (ev) { return _this.lineDragEnd.emit(ev); } },\n            { name: 'dragstart', handler: function (ev) { return _this.lineDragStart.emit(ev); } },\n            { name: 'mousedown', handler: function (ev) { return _this.lineMouseDown.emit(ev); } },\n            { name: 'mousemove', handler: function (ev) { return _this.lineMouseMove.emit(ev); } },\n            { name: 'mouseout', handler: function (ev) { return _this.lineMouseOut.emit(ev); } },\n            { name: 'mouseover', handler: function (ev) { return _this.lineMouseOver.emit(ev); } },\n            { name: 'mouseup', handler: function (ev) { return _this.lineMouseUp.emit(ev); } },\n            { name: 'rightclick', handler: function (ev) { return _this.lineRightClick.emit(ev); } },\n        ];\n        handlers.forEach(function (obj) {\n            var os = _this._polylineManager.createEventObservable(obj.name, _this).subscribe(obj.handler);\n            _this._subscriptions.push(os);\n        });\n        this._polylineManager.createPathEventObservable(this).then(function (ob$) {\n            var os = ob$.subscribe(function (pathEvent) { return _this.polyPathChange.emit(pathEvent); });\n            _this._subscriptions.push(os);\n        });\n    };\n    /** @internal */\n    AgmPolyline.prototype._getPoints = function () {\n        if (this.points) {\n            return this.points.toArray();\n        }\n        return [];\n    };\n    AgmPolyline.prototype._getIcons = function () {\n        if (this.iconSequences) {\n            return this.iconSequences.toArray();\n        }\n        return [];\n    };\n    /** @internal */\n    AgmPolyline.prototype.id = function () { return this._id; };\n    /** @internal */\n    AgmPolyline.prototype.ngOnDestroy = function () {\n        this._polylineManager.deletePolyline(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach(function (s) { return s.unsubscribe(); });\n    };\n    var AgmPolyline_1;\n    AgmPolyline._polylineOptionsAttributes = [\n        'draggable', 'editable', 'visible', 'geodesic', 'strokeColor', 'strokeOpacity', 'strokeWeight',\n        'zIndex',\n    ];\n    AgmPolyline.ctorParameters = function () { return [\n        { type: PolylineManager }\n    ]; };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmPolyline.prototype, \"clickable\", void 0);\n    __decorate([\n        Input('polylineDraggable'),\n        __metadata(\"design:type\", Object)\n    ], AgmPolyline.prototype, \"draggable\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmPolyline.prototype, \"editable\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmPolyline.prototype, \"geodesic\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmPolyline.prototype, \"strokeColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmPolyline.prototype, \"strokeOpacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmPolyline.prototype, \"strokeWeight\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmPolyline.prototype, \"visible\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmPolyline.prototype, \"zIndex\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolyline.prototype, \"lineClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolyline.prototype, \"lineDblClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolyline.prototype, \"lineDrag\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolyline.prototype, \"lineDragEnd\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolyline.prototype, \"lineDragStart\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolyline.prototype, \"lineMouseDown\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolyline.prototype, \"lineMouseMove\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolyline.prototype, \"lineMouseOut\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolyline.prototype, \"lineMouseOver\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolyline.prototype, \"lineMouseUp\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmPolyline.prototype, \"lineRightClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], AgmPolyline.prototype, \"polyPathChange\", void 0);\n    __decorate([\n        ContentChildren(AgmPolylinePoint),\n        __metadata(\"design:type\", QueryList)\n    ], AgmPolyline.prototype, \"points\", void 0);\n    __decorate([\n        ContentChildren(AgmPolylineIcon),\n        __metadata(\"design:type\", QueryList)\n    ], AgmPolyline.prototype, \"iconSequences\", void 0);\n    AgmPolyline = AgmPolyline_1 = __decorate([\n        Directive({\n            selector: 'agm-polyline',\n        }),\n        __metadata(\"design:paramtypes\", [PolylineManager])\n    ], AgmPolyline);\n    return AgmPolyline;\n}());\n\nvar AgmRectangle = /** @class */ (function () {\n    function AgmRectangle(_manager) {\n        this._manager = _manager;\n        /**\n         * Indicates whether this Rectangle handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this rectangle over the map. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this rectangle by dragging the control points shown at\n         * the center and around the circumference of the rectangle. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * The stroke position. Defaults to CENTER.\n         * This property is not supported on Internet Explorer 8 and earlier.\n         */\n        this.strokePosition = 'CENTER';\n        /**\n         * The stroke width in pixels.\n         */\n        this.strokeWeight = 0;\n        /**\n         * Whether this rectangle is visible on the map. Defaults to true.\n         */\n        this.visible = true;\n        /**\n         * This event is fired when the rectangle's is changed.\n         */\n        this.boundsChange = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the rectangle.\n         */\n        this.rectangleClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the rectangle.\n         */\n        this.rectangleDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the rectangle.\n         */\n        this.drag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the rectangle.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the rectangle.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the rectangle.\n         */\n        this.mouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the rectangle.\n         */\n        this.mouseMove = new EventEmitter();\n        /**\n         * This event is fired on rectangle mouseout.\n         */\n        this.mouseOut = new EventEmitter();\n        /**\n         * This event is fired on rectangle mouseover.\n         */\n        this.mouseOver = new EventEmitter();\n        /**\n         * This event is fired when the DOM mouseup event is fired on the rectangle.\n         */\n        this.mouseUp = new EventEmitter();\n        /**\n         * This event is fired when the rectangle is right-clicked on.\n         */\n        this.rightClick = new EventEmitter();\n        this._rectangleAddedToManager = false;\n        this._eventSubscriptions = [];\n    }\n    AgmRectangle_1 = AgmRectangle;\n    /** @internal */\n    AgmRectangle.prototype.ngOnInit = function () {\n        this._manager.addRectangle(this);\n        this._rectangleAddedToManager = true;\n        this._registerEventListeners();\n    };\n    /** @internal */\n    AgmRectangle.prototype.ngOnChanges = function (changes) {\n        if (!this._rectangleAddedToManager) {\n            return;\n        }\n        if (changes['north'] ||\n            changes['east'] ||\n            changes['south'] ||\n            changes['west']) {\n            this._manager.setBounds(this);\n        }\n        if (changes['editable']) {\n            this._manager.setEditable(this);\n        }\n        if (changes['draggable']) {\n            this._manager.setDraggable(this);\n        }\n        if (changes['visible']) {\n            this._manager.setVisible(this);\n        }\n        this._updateRectangleOptionsChanges(changes);\n    };\n    AgmRectangle.prototype._updateRectangleOptionsChanges = function (changes) {\n        var options = {};\n        var optionKeys = Object.keys(changes).filter(function (k) { return AgmRectangle_1._mapOptions.indexOf(k) !== -1; });\n        optionKeys.forEach(function (k) {\n            options[k] = changes[k].currentValue;\n        });\n        if (optionKeys.length > 0) {\n            this._manager.setOptions(this, options);\n        }\n    };\n    AgmRectangle.prototype._registerEventListeners = function () {\n        var _this = this;\n        var events = new Map();\n        events.set('bounds_changed', this.boundsChange);\n        events.set('click', this.rectangleClick);\n        events.set('dblclick', this.rectangleDblClick);\n        events.set('drag', this.drag);\n        events.set('dragend', this.dragEnd);\n        events.set('dragStart', this.dragStart);\n        events.set('mousedown', this.mouseDown);\n        events.set('mousemove', this.mouseMove);\n        events.set('mouseout', this.mouseOut);\n        events.set('mouseover', this.mouseOver);\n        events.set('mouseup', this.mouseUp);\n        events.set('rightclick', this.rightClick);\n        events.forEach(function (eventEmitter, eventName) {\n            _this._eventSubscriptions.push(_this._manager\n                .createEventObservable(eventName, _this)\n                .subscribe(function (value) {\n                switch (eventName) {\n                    case 'bounds_changed':\n                        _this._manager.getBounds(_this).then(function (bounds) {\n                            return eventEmitter.emit({\n                                north: bounds.getNorthEast().lat(),\n                                east: bounds.getNorthEast().lng(),\n                                south: bounds.getSouthWest().lat(),\n                                west: bounds.getSouthWest().lng(),\n                            });\n                        });\n                        break;\n                    default:\n                        eventEmitter.emit({\n                            coords: { lat: value.latLng.lat(), lng: value.latLng.lng() },\n                        });\n                }\n            }));\n        });\n    };\n    /** @internal */\n    AgmRectangle.prototype.ngOnDestroy = function () {\n        this._eventSubscriptions.forEach(function (s) {\n            s.unsubscribe();\n        });\n        this._eventSubscriptions = null;\n        this._manager.removeRectangle(this);\n    };\n    /**\n     * Gets the LatLngBounds of this Rectangle.\n     */\n    AgmRectangle.prototype.getBounds = function () {\n        return this._manager.getBounds(this);\n    };\n    var AgmRectangle_1;\n    AgmRectangle._mapOptions = [\n        'fillColor',\n        'fillOpacity',\n        'strokeColor',\n        'strokeOpacity',\n        'strokePosition',\n        'strokeWeight',\n        'visible',\n        'zIndex',\n        'clickable',\n    ];\n    AgmRectangle.ctorParameters = function () { return [\n        { type: RectangleManager }\n    ]; };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmRectangle.prototype, \"north\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmRectangle.prototype, \"east\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmRectangle.prototype, \"south\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmRectangle.prototype, \"west\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmRectangle.prototype, \"clickable\", void 0);\n    __decorate([\n        Input('rectangleDraggable'),\n        __metadata(\"design:type\", Object)\n    ], AgmRectangle.prototype, \"draggable\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmRectangle.prototype, \"editable\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmRectangle.prototype, \"fillColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmRectangle.prototype, \"fillOpacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmRectangle.prototype, \"strokeColor\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmRectangle.prototype, \"strokeOpacity\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], AgmRectangle.prototype, \"strokePosition\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmRectangle.prototype, \"strokeWeight\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmRectangle.prototype, \"visible\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], AgmRectangle.prototype, \"zIndex\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmRectangle.prototype, \"boundsChange\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmRectangle.prototype, \"rectangleClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmRectangle.prototype, \"rectangleDblClick\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmRectangle.prototype, \"drag\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmRectangle.prototype, \"dragEnd\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmRectangle.prototype, \"dragStart\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmRectangle.prototype, \"mouseDown\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmRectangle.prototype, \"mouseMove\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmRectangle.prototype, \"mouseOut\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmRectangle.prototype, \"mouseOver\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmRectangle.prototype, \"mouseUp\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], AgmRectangle.prototype, \"rightClick\", void 0);\n    AgmRectangle = AgmRectangle_1 = __decorate([\n        Directive({\n            selector: 'agm-rectangle',\n        }),\n        __metadata(\"design:paramtypes\", [RectangleManager])\n    ], AgmRectangle);\n    return AgmRectangle;\n}());\n\nvar layerId$3 = 0;\n/*\n * This directive adds a transit layer to a google map instance\n * <agm-transit-layer [visible]=\"true|false\"> <agm-transit-layer>\n * */\nvar AgmTransitLayer = /** @class */ (function () {\n    function AgmTransitLayer(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId$3++).toString();\n        /**\n         * Hide/show transit layer\n         */\n        this.visible = true;\n    }\n    AgmTransitLayer.prototype.ngOnInit = function () {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addTransitLayer(this, { visible: this.visible });\n        this._addedToManager = true;\n    };\n    AgmTransitLayer.prototype.ngOnChanges = function (changes) {\n        if (!this._addedToManager) {\n            return;\n        }\n        if (changes['visible'] != null) {\n            this._manager.toggleLayerVisibility(this, { visible: changes['visible'].currentValue });\n        }\n    };\n    /** @internal */\n    AgmTransitLayer.prototype.id = function () { return this._id; };\n    /** @internal */\n    AgmTransitLayer.prototype.toString = function () { return \"AgmTransitLayer-\" + this._id.toString(); };\n    /** @internal */\n    AgmTransitLayer.prototype.ngOnDestroy = function () {\n        this._manager.deleteLayer(this);\n    };\n    AgmTransitLayer.ctorParameters = function () { return [\n        { type: LayerManager }\n    ]; };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], AgmTransitLayer.prototype, \"visible\", void 0);\n    AgmTransitLayer = __decorate([\n        Directive({\n            selector: 'agm-transit-layer',\n        }),\n        __metadata(\"design:paramtypes\", [LayerManager])\n    ], AgmTransitLayer);\n    return AgmTransitLayer;\n}());\n\nvar google$1;\nvar SymbolPath;\n(function (SymbolPath) {\n    SymbolPath[SymbolPath[\"BACKWARD_CLOSED_ARROW\"] = 3] = \"BACKWARD_CLOSED_ARROW\";\n    SymbolPath[SymbolPath[\"BACKWARD_OPEN_ARROW\"] = 4] = \"BACKWARD_OPEN_ARROW\";\n    SymbolPath[SymbolPath[\"CIRCLE\"] = 0] = \"CIRCLE\";\n    SymbolPath[SymbolPath[\"FORWARD_CLOSED_ARROW\"] = 1] = \"FORWARD_CLOSED_ARROW\";\n    SymbolPath[SymbolPath[\"FORWARD_OPEN_ARROW\"] = 2] = \"FORWARD_OPEN_ARROW\";\n})(SymbolPath || (SymbolPath = {}));\n/**\n * Identifiers used to specify the placement of controls on the map. Controls are\n * positioned relative to other controls in the same layout position. Controls that\n * are added first are positioned closer to the edge of the map.\n */\nvar ControlPosition;\n(function (ControlPosition) {\n    ControlPosition[ControlPosition[\"RIGHT_BOTTOM\"] = 0] = \"RIGHT_BOTTOM\";\n    ControlPosition[ControlPosition[\"TOP_LEFT\"] = 1] = \"TOP_LEFT\";\n    ControlPosition[ControlPosition[\"TOP_CENTER\"] = 2] = \"TOP_CENTER\";\n    ControlPosition[ControlPosition[\"TOP_RIGHT\"] = 3] = \"TOP_RIGHT\";\n    ControlPosition[ControlPosition[\"LEFT_CENTER\"] = 4] = \"LEFT_CENTER\";\n    ControlPosition[ControlPosition[\"LEFT_TOP\"] = 5] = \"LEFT_TOP\";\n    ControlPosition[ControlPosition[\"LEFT_BOTTOM\"] = 6] = \"LEFT_BOTTOM\";\n    ControlPosition[ControlPosition[\"RIGHT_TOP\"] = 7] = \"RIGHT_TOP\";\n    ControlPosition[ControlPosition[\"RIGHT_CENTER\"] = 8] = \"RIGHT_CENTER\";\n    ControlPosition[ControlPosition[\"BOTTOM_RIGHT\"] = 9] = \"BOTTOM_RIGHT\";\n    ControlPosition[ControlPosition[\"BOTTOM_LEFT\"] = 10] = \"BOTTOM_LEFT\";\n    ControlPosition[ControlPosition[\"BOTTOM_CENTER\"] = 11] = \"BOTTOM_CENTER\";\n})(ControlPosition || (ControlPosition = {}));\nvar MapTypeId;\n(function (MapTypeId) {\n    /** This map type displays a transparent layer of major streets on satellite images. */\n    MapTypeId[MapTypeId[\"HYBRID\"] = 0] = \"HYBRID\";\n    /** This map type displays a normal street map. */\n    MapTypeId[MapTypeId[\"ROADMAP\"] = 1] = \"ROADMAP\";\n    /** This map type displays satellite images. */\n    MapTypeId[MapTypeId[\"SATELLITE\"] = 2] = \"SATELLITE\";\n    /** This map type displays maps with physical features such as terrain and vegetation. */\n    MapTypeId[MapTypeId[\"TERRAIN\"] = 3] = \"TERRAIN\";\n})(MapTypeId || (MapTypeId = {}));\nvar MapTypeControlStyle;\n(function (MapTypeControlStyle) {\n    MapTypeControlStyle[MapTypeControlStyle[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    MapTypeControlStyle[MapTypeControlStyle[\"DROPDOWN_MENU\"] = 2] = \"DROPDOWN_MENU\";\n    MapTypeControlStyle[MapTypeControlStyle[\"HORIZONTAL_BAR\"] = 1] = \"HORIZONTAL_BAR\";\n})(MapTypeControlStyle || (MapTypeControlStyle = {}));\nvar ScaleControlStyle;\n(function (ScaleControlStyle) {\n    ScaleControlStyle[ScaleControlStyle[\"DEFAULT\"] = 0] = \"DEFAULT\";\n})(ScaleControlStyle || (ScaleControlStyle = {}));\nvar ZoomControlStyle;\n(function (ZoomControlStyle) {\n    ZoomControlStyle[ZoomControlStyle[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    ZoomControlStyle[ZoomControlStyle[\"LARGE\"] = 1] = \"LARGE\";\n    ZoomControlStyle[ZoomControlStyle[\"SMALL\"] = 2] = \"SMALL\";\n})(ZoomControlStyle || (ZoomControlStyle = {}));\nvar GeocoderLocationType;\n(function (GeocoderLocationType) {\n    GeocoderLocationType[\"APPROXIMATE\"] = \"APPROXIMATE\";\n    GeocoderLocationType[\"GEOMETRIC_CENTER\"] = \"GEOMETRIC_CENTER\";\n    GeocoderLocationType[\"RANGE_INTERPOLATED\"] = \"RANGE_INTERPOLATED\";\n    GeocoderLocationType[\"ROOFTOP\"] = \"ROOFTOP\";\n})(GeocoderLocationType || (GeocoderLocationType = {}));\nvar GeocoderStatus;\n(function (GeocoderStatus) {\n    GeocoderStatus[\"ERROR\"] = \"ERROR\";\n    GeocoderStatus[\"INVALID_REQUEST\"] = \"INVALID_REQUEST\";\n    GeocoderStatus[\"OK\"] = \"OK\";\n    GeocoderStatus[\"OVER_QUERY_LIMIT\"] = \"OVER_QUERY_LIMIT\";\n    GeocoderStatus[\"REQUEST_DENIED\"] = \"REQUEST_DENIED\";\n    GeocoderStatus[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    GeocoderStatus[\"ZERO_RESULTS\"] = \"ZERO_RESULTS\";\n})(GeocoderStatus || (GeocoderStatus = {}));\n\nvar AgmGeocoder = /** @class */ (function () {\n    function AgmGeocoder(loader) {\n        var _this = this;\n        var connectableGeocoder$ = new Observable(function (subscriber) {\n            loader.load().then(function () { return subscriber.next(); });\n        })\n            .pipe(map(function () { return _this._createGeocoder(); }), multicast(new ReplaySubject(1)));\n        connectableGeocoder$.connect(); // ignore the subscription\n        // since we will remain subscribed till application exits\n        this.geocoder$ = connectableGeocoder$;\n    }\n    AgmGeocoder.prototype.geocode = function (request) {\n        var _this = this;\n        return this.geocoder$.pipe(switchMap(function (geocoder) { return _this._getGoogleResults(geocoder, request); }));\n    };\n    AgmGeocoder.prototype._getGoogleResults = function (geocoder, request) {\n        var geocodeObservable = bindCallback(geocoder.geocode);\n        return geocodeObservable(request).pipe(switchMap(function (_a) {\n            var _b = __read(_a, 2), results = _b[0], status = _b[1];\n            if (status === GeocoderStatus.OK) {\n                return of(results);\n            }\n            return throwError(status);\n        }));\n    };\n    AgmGeocoder.prototype._createGeocoder = function () {\n        return new google.maps.Geocoder();\n    };\n    AgmGeocoder.ctorParameters = function () { return [\n        { type: MapsAPILoader }\n    ]; };\n    AgmGeocoder.ngInjectableDef = ɵɵdefineInjectable({ factory: function AgmGeocoder_Factory() { return new AgmGeocoder(ɵɵinject(MapsAPILoader)); }, token: AgmGeocoder, providedIn: \"root\" });\n    AgmGeocoder = __decorate([\n        Injectable({ providedIn: 'root' }),\n        __metadata(\"design:paramtypes\", [MapsAPILoader])\n    ], AgmGeocoder);\n    return AgmGeocoder;\n}());\n\nvar WindowRef = /** @class */ (function () {\n    function WindowRef() {\n    }\n    WindowRef.prototype.getNativeWindow = function () { return window; };\n    return WindowRef;\n}());\nvar DocumentRef = /** @class */ (function () {\n    function DocumentRef() {\n    }\n    DocumentRef.prototype.getNativeDocument = function () { return document; };\n    return DocumentRef;\n}());\nvar BROWSER_GLOBALS_PROVIDERS = [WindowRef, DocumentRef];\n\nvar GoogleMapsScriptProtocol;\n(function (GoogleMapsScriptProtocol) {\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTP\"] = 1] = \"HTTP\";\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTPS\"] = 2] = \"HTTPS\";\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"AUTO\"] = 3] = \"AUTO\";\n})(GoogleMapsScriptProtocol || (GoogleMapsScriptProtocol = {}));\n/**\n * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link\n * LazyMapsAPILoaderConfig}.\n */\nvar LAZY_MAPS_API_CONFIG = new InjectionToken('angular-google-maps LAZY_MAPS_API_CONFIG');\nvar LazyMapsAPILoader = /** @class */ (function (_super) {\n    __extends(LazyMapsAPILoader, _super);\n    function LazyMapsAPILoader(config, w, d, localeId) {\n        if (config === void 0) { config = null; }\n        var _this = _super.call(this) || this;\n        _this.localeId = localeId;\n        _this._SCRIPT_ID = 'agmGoogleMapsApiScript';\n        _this.callbackName = \"agmLazyMapsAPILoader\";\n        _this._config = config || {};\n        _this._windowRef = w;\n        _this._documentRef = d;\n        return _this;\n    }\n    LazyMapsAPILoader.prototype.load = function () {\n        var window = this._windowRef.getNativeWindow();\n        if (window.google && window.google.maps) {\n            // Google maps already loaded on the page.\n            return Promise.resolve();\n        }\n        if (this._scriptLoadingPromise) {\n            return this._scriptLoadingPromise;\n        }\n        // this can happen in HMR situations or Stackblitz.io editors.\n        var scriptOnPage = this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);\n        if (scriptOnPage) {\n            this._assignScriptLoadingPromise(scriptOnPage);\n            return this._scriptLoadingPromise;\n        }\n        var script = this._documentRef.getNativeDocument().createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.defer = true;\n        script.id = this._SCRIPT_ID;\n        script.src = this._getScriptSrc(this.callbackName);\n        this._assignScriptLoadingPromise(script);\n        this._documentRef.getNativeDocument().body.appendChild(script);\n        return this._scriptLoadingPromise;\n    };\n    LazyMapsAPILoader.prototype._assignScriptLoadingPromise = function (scriptElem) {\n        var _this = this;\n        this._scriptLoadingPromise = new Promise(function (resolve, reject) {\n            _this._windowRef.getNativeWindow()[_this.callbackName] = function () {\n                resolve();\n            };\n            scriptElem.onerror = function (error) {\n                reject(error);\n            };\n        });\n    };\n    LazyMapsAPILoader.prototype._getScriptSrc = function (callbackName) {\n        var protocolType = (this._config && this._config.protocol) || GoogleMapsScriptProtocol.HTTPS;\n        var protocol;\n        switch (protocolType) {\n            case GoogleMapsScriptProtocol.AUTO:\n                protocol = '';\n                break;\n            case GoogleMapsScriptProtocol.HTTP:\n                protocol = 'http:';\n                break;\n            case GoogleMapsScriptProtocol.HTTPS:\n                protocol = 'https:';\n                break;\n        }\n        var hostAndPath = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\n        var queryParams = {\n            v: this._config.apiVersion || 'quarterly',\n            callback: callbackName,\n            key: this._config.apiKey,\n            client: this._config.clientId,\n            channel: this._config.channel,\n            libraries: this._config.libraries,\n            region: this._config.region,\n            language: this._config.language || this.localeId !== 'en-US' ? this.localeId : null,\n        };\n        var params = Object.keys(queryParams)\n            .filter(function (k) { return queryParams[k] != null; })\n            .filter(function (k) {\n            // remove empty arrays\n            return !Array.isArray(queryParams[k]) ||\n                (Array.isArray(queryParams[k]) && queryParams[k].length > 0);\n        })\n            .map(function (k) {\n            // join arrays as comma seperated strings\n            var i = queryParams[k];\n            if (Array.isArray(i)) {\n                return { key: k, value: i.join(',') };\n            }\n            return { key: k, value: queryParams[k] };\n        })\n            .map(function (entry) {\n            return entry.key + \"=\" + entry.value;\n        })\n            .join('&');\n        return protocol + \"//\" + hostAndPath + \"?\" + params;\n    };\n    LazyMapsAPILoader.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LAZY_MAPS_API_CONFIG,] }] },\n        { type: WindowRef },\n        { type: DocumentRef },\n        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n    ]; };\n    LazyMapsAPILoader = __decorate([\n        Injectable(),\n        __param(0, Optional()), __param(0, Inject(LAZY_MAPS_API_CONFIG)),\n        __param(3, Inject(LOCALE_ID)),\n        __metadata(\"design:paramtypes\", [Object, WindowRef, DocumentRef, String])\n    ], LazyMapsAPILoader);\n    return LazyMapsAPILoader;\n}(MapsAPILoader));\n\n/**\n * When using the NoOpMapsAPILoader, the Google Maps API must be added to the page via a `<script>`\n * Tag.\n * It's important that the Google Maps API script gets loaded first on the page.\n */\nvar NoOpMapsAPILoader = /** @class */ (function () {\n    function NoOpMapsAPILoader() {\n    }\n    NoOpMapsAPILoader.prototype.load = function () {\n        if (!window.google || !window.google.maps) {\n            throw new Error('Google Maps API not loaded on page. Make sure window.google.maps is available!');\n        }\n        return Promise.resolve();\n    };\n    return NoOpMapsAPILoader;\n}());\n\n// exported map types\n\n/**\n * @internal\n */\nfunction coreDirectives() {\n    return [\n        AgmBicyclingLayer,\n        AgmCircle,\n        AgmDataLayer,\n        AgmFitBounds,\n        AgmInfoWindow,\n        AgmKmlLayer,\n        AgmMap,\n        AgmMarker,\n        AgmPolygon,\n        AgmPolyline,\n        AgmPolylineIcon,\n        AgmPolylinePoint,\n        AgmRectangle,\n        AgmTransitLayer,\n    ];\n}\n/**\n * The angular-google-maps core module. Contains all Directives/Services/Pipes\n * of the core module. Please use `AgmCoreModule.forRoot()` in your app module.\n */\nvar AgmCoreModule = /** @class */ (function () {\n    function AgmCoreModule() {\n    }\n    AgmCoreModule_1 = AgmCoreModule;\n    /**\n     * Please use this method when you register the module at the root level.\n     */\n    AgmCoreModule.forRoot = function (lazyMapsAPILoaderConfig) {\n        return {\n            ngModule: AgmCoreModule_1,\n            providers: __spread(BROWSER_GLOBALS_PROVIDERS, [\n                { provide: MapsAPILoader, useClass: LazyMapsAPILoader },\n                { provide: LAZY_MAPS_API_CONFIG, useValue: lazyMapsAPILoaderConfig },\n            ]),\n        };\n    };\n    var AgmCoreModule_1;\n    AgmCoreModule = AgmCoreModule_1 = __decorate([\n        NgModule({ declarations: coreDirectives(), exports: coreDirectives() })\n    ], AgmCoreModule);\n    return AgmCoreModule;\n}());\n\n// main modules\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AgmBicyclingLayer, AgmCircle, AgmCoreModule, AgmDataLayer, AgmFitBounds, AgmGeocoder, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMarker, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmTransitLayer, CircleManager, ControlPosition, DataLayerManager, FitBoundsAccessor, GeocoderLocationType, GeocoderStatus, GoogleMapsAPIWrapper, GoogleMapsScriptProtocol, InfoWindowManager, KmlLayerManager, LAZY_MAPS_API_CONFIG, LayerManager, LazyMapsAPILoader, MapTypeId, MapsAPILoader, MarkerManager, NoOpMapsAPILoader, PolygonManager, PolylineManager, RectangleManager, ScaleControlStyle, ZoomControlStyle, FitBoundsService as ɵa, coreDirectives as ɵb, WindowRef as ɵc, DocumentRef as ɵd, BROWSER_GLOBALS_PROVIDERS as ɵe };\n"]}