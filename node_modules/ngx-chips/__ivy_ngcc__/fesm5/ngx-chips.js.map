{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/ngx-chips/fesm5/ngx-chips.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;MAoBM;;;;;;;;gDAKgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6GhB;;;;;gDAGe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0JoC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDA8PP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAO7B;;;;;;;;;;;6CAWwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAmB3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BA+Ta,AAMxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAGc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAycc,AAK5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACkoCA8lCW,AAQ7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAEmB;;;;;;KAMrB;;;;;;;;;;;;;;;;;gDAOuB;;;;;;;;;;;;;;MActB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAgCiB","file":"ngx-chips.js","sourcesContent":["import { __decorate, __assign, __metadata, __awaiter, __generator, __extends, __spread } from 'tslib';\nimport { Pipe, Injectable, Input, Output, EventEmitter, ViewChild, Component, TemplateRef, HostBinding, HostListener, ElementRef, Renderer2, ChangeDetectorRef, ContentChildren, QueryList, Injector, forwardRef, ContentChild, ViewChildren, NgModule } from '@angular/core';\nimport { FormGroup, FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule, FormsModule, COMPOSITION_BUFFER_MODE } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Ng2Dropdown, Ng2DropdownModule } from 'ng2-material-dropdown';\nimport { debounceTime, filter, first, map } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\nvar escape = function (s) { return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'); };\nvar HighlightPipe = /** @class */ (function () {\n    function HighlightPipe() {\n    }\n    /**\n     * @name transform\n     * @param value {string}\n     * @param arg {string}\n     */\n    HighlightPipe.prototype.transform = function (value, arg) {\n        if (!arg.trim()) {\n            return value;\n        }\n        try {\n            var regex = new RegExp(\"(\" + escape(arg) + \")\", 'i');\n            return value.replace(regex, '<b>$1</b>');\n        }\n        catch (e) {\n            return value;\n        }\n    };\n    HighlightPipe = __decorate([\n        Pipe({\n            name: 'highlight'\n        })\n    ], HighlightPipe);\n    return HighlightPipe;\n}());\n\n/*\n** constants and default values for <tag-input>\n */\nvar PLACEHOLDER = '+ Tag';\nvar SECONDARY_PLACEHOLDER = 'Enter a new tag';\nvar KEYDOWN = 'keydown';\nvar KEYUP = 'keyup';\nvar MAX_ITEMS_WARNING = 'The number of items specified was greater than the property max-items.';\nvar ACTIONS_KEYS = {\n    DELETE: 'DELETE',\n    SWITCH_PREV: 'SWITCH_PREV',\n    SWITCH_NEXT: 'SWITCH_NEXT',\n    TAB: 'TAB'\n};\nvar KEY_PRESS_ACTIONS = {\n    8: ACTIONS_KEYS.DELETE,\n    37: ACTIONS_KEYS.SWITCH_PREV,\n    39: ACTIONS_KEYS.SWITCH_NEXT,\n    9: ACTIONS_KEYS.TAB\n};\nvar DRAG_AND_DROP_KEY = 'Text';\nvar NEXT = 'NEXT';\nvar PREV = 'PREV';\n\nvar DragProvider = /** @class */ (function () {\n    function DragProvider() {\n        this.state = {\n            dragging: false,\n            dropping: false,\n            index: undefined\n        };\n    }\n    /**\n     * @name setDraggedItem\n     * @param event\n     * @param tag\n     */\n    DragProvider.prototype.setDraggedItem = function (event, tag) {\n        if (event && event.dataTransfer) {\n            event.dataTransfer.setData(DRAG_AND_DROP_KEY, JSON.stringify(tag));\n        }\n    };\n    /**\n     * @name getDraggedItem\n     * @param event\n     */\n    DragProvider.prototype.getDraggedItem = function (event) {\n        if (event && event.dataTransfer) {\n            var data = event.dataTransfer.getData(DRAG_AND_DROP_KEY);\n            try {\n                return JSON.parse(data);\n            }\n            catch (_a) {\n                return;\n            }\n        }\n    };\n    /**\n     * @name setSender\n     * @param sender\n     */\n    DragProvider.prototype.setSender = function (sender) {\n        this.sender = sender;\n    };\n    /**\n     * @name setReceiver\n     * @param receiver\n     */\n    DragProvider.prototype.setReceiver = function (receiver) {\n        this.receiver = receiver;\n    };\n    /**\n     * @name onTagDropped\n     * @param tag\n     * @param indexDragged\n     * @param indexDropped\n     */\n    DragProvider.prototype.onTagDropped = function (tag, indexDragged, indexDropped) {\n        this.onDragEnd();\n        this.sender.onRemoveRequested(tag, indexDragged);\n        this.receiver.onAddingRequested(false, tag, indexDropped);\n    };\n    /**\n     * @name setState\n     * @param state\n     */\n    DragProvider.prototype.setState = function (state) {\n        this.state = __assign({}, this.state, state);\n    };\n    /**\n     * @name getState\n     * @param key\n     */\n    DragProvider.prototype.getState = function (key) {\n        return key ? this.state[key] : this.state;\n    };\n    /**\n     * @name onDragEnd\n     */\n    DragProvider.prototype.onDragEnd = function () {\n        this.setState({\n            dragging: false,\n            dropping: false,\n            index: undefined\n        });\n    };\n    DragProvider = __decorate([\n        Injectable()\n    ], DragProvider);\n    return DragProvider;\n}());\n\nvar defaults = {\n    tagInput: {\n        separatorKeys: [],\n        separatorKeyCodes: [],\n        maxItems: Infinity,\n        placeholder: PLACEHOLDER,\n        secondaryPlaceholder: SECONDARY_PLACEHOLDER,\n        validators: [],\n        asyncValidators: [],\n        onlyFromAutocomplete: false,\n        errorMessages: {},\n        theme: '',\n        onTextChangeDebounce: 250,\n        inputId: null,\n        inputClass: '',\n        clearOnBlur: false,\n        hideForm: false,\n        addOnBlur: false,\n        addOnPaste: false,\n        pasteSplitPattern: ',',\n        blinkIfDupe: true,\n        removable: true,\n        editable: false,\n        allowDupes: false,\n        modelAsStrings: false,\n        trimTags: true,\n        ripple: true,\n        tabIndex: '',\n        disable: false,\n        dragZone: '',\n        onRemoving: undefined,\n        onAdding: undefined,\n        displayBy: 'display',\n        identifyBy: 'value',\n        animationDuration: {\n            enter: '250ms',\n            leave: '150ms'\n        }\n    },\n    dropdown: {\n        displayBy: 'display',\n        identifyBy: 'value',\n        appendToBody: true,\n        offset: '50 0',\n        focusFirstElement: false,\n        showDropdownIfEmpty: false,\n        minimumTextLength: 1,\n        limitItemsTo: Infinity,\n        keepOpen: true,\n        dynamicUpdate: true,\n        zIndex: 1000,\n        matchingFn: matchingFn\n    }\n};\n/**\n * @name matchingFn\n * @param this\n * @param value\n * @param target\n */\nfunction matchingFn(value, target) {\n    var targetValue = target[this.displayBy].toString();\n    return targetValue && targetValue\n        .toLowerCase()\n        .indexOf(value.toLowerCase()) >= 0;\n}\n\nvar OptionsProvider = /** @class */ (function () {\n    function OptionsProvider() {\n    }\n    OptionsProvider.prototype.setOptions = function (options) {\n        OptionsProvider.defaults.tagInput = __assign({}, defaults.tagInput, options.tagInput);\n        OptionsProvider.defaults.dropdown = __assign({}, defaults.dropdown, options.dropdown);\n    };\n    OptionsProvider.defaults = defaults;\n    return OptionsProvider;\n}());\n\nfunction isObject(obj) {\n    return obj === Object(obj);\n}\nvar TagInputAccessor = /** @class */ (function () {\n    function TagInputAccessor() {\n        this._items = [];\n        /**\n         * @name displayBy\n         */\n        this.displayBy = OptionsProvider.defaults.tagInput.displayBy;\n        /**\n         * @name identifyBy\n         */\n        this.identifyBy = OptionsProvider.defaults.tagInput.identifyBy;\n    }\n    Object.defineProperty(TagInputAccessor.prototype, \"items\", {\n        get: function () {\n            return this._items;\n        },\n        set: function (items) {\n            this._items = items;\n            this._onChangeCallback(this._items);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TagInputAccessor.prototype.onTouched = function () {\n        this._onTouchedCallback();\n    };\n    TagInputAccessor.prototype.writeValue = function (items) {\n        this._items = items || [];\n    };\n    TagInputAccessor.prototype.registerOnChange = function (fn) {\n        this._onChangeCallback = fn;\n    };\n    TagInputAccessor.prototype.registerOnTouched = function (fn) {\n        this._onTouchedCallback = fn;\n    };\n    /**\n     * @name getItemValue\n     * @param item\n     * @param fromDropdown\n     */\n    TagInputAccessor.prototype.getItemValue = function (item, fromDropdown) {\n        if (fromDropdown === void 0) { fromDropdown = false; }\n        var property = fromDropdown && this.dropdown ? this.dropdown.identifyBy : this.identifyBy;\n        return isObject(item) ? item[property] : item;\n    };\n    /**\n     * @name getItemDisplay\n     * @param item\n     * @param fromDropdown\n     */\n    TagInputAccessor.prototype.getItemDisplay = function (item, fromDropdown) {\n        if (fromDropdown === void 0) { fromDropdown = false; }\n        var property = fromDropdown && this.dropdown ? this.dropdown.displayBy : this.displayBy;\n        return isObject(item) ? item[property] : item;\n    };\n    /**\n     * @name getItemsWithout\n     * @param index\n     */\n    TagInputAccessor.prototype.getItemsWithout = function (index) {\n        return this.items.filter(function (item, position) { return position !== index; });\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], TagInputAccessor.prototype, \"displayBy\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], TagInputAccessor.prototype, \"identifyBy\", void 0);\n    return TagInputAccessor;\n}());\n\n/**\n * @name listen\n * @param listenerType\n * @param action\n * @param condition\n */\nfunction listen(listenerType, action, condition) {\n    if (condition === void 0) { condition = true; }\n    // if the event provided does not exist, throw an error\n    if (!this.listeners.hasOwnProperty(listenerType)) {\n        throw new Error('The event entered may be wrong');\n    }\n    // if a condition is present and is false, exit early\n    if (!condition) {\n        return;\n    }\n    // fire listener\n    this.listeners[listenerType].push(action);\n}\n\nvar TagInputForm = /** @class */ (function () {\n    function TagInputForm() {\n        /**\n         * @name onSubmit\n         */\n        this.onSubmit = new EventEmitter();\n        /**\n         * @name onBlur\n         */\n        this.onBlur = new EventEmitter();\n        /**\n         * @name onFocus\n         */\n        this.onFocus = new EventEmitter();\n        /**\n         * @name onKeyup\n         */\n        this.onKeyup = new EventEmitter();\n        /**\n         * @name onKeydown\n         */\n        this.onKeydown = new EventEmitter();\n        /**\n         * @name inputTextChange\n         */\n        this.inputTextChange = new EventEmitter();\n        /**\n         * @name validators\n         */\n        this.validators = [];\n        /**\n         * @name asyncValidators\n         * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n         */\n        this.asyncValidators = [];\n        /**\n         * @name tabindex\n         * @desc pass through the specified tabindex to the input\n         */\n        this.tabindex = '';\n        /**\n         * @name disabled\n         */\n        this.disabled = false;\n        this.item = new FormControl({ value: '', disabled: this.disabled });\n    }\n    Object.defineProperty(TagInputForm.prototype, \"inputText\", {\n        /**\n         * @name inputText\n         */\n        get: function () {\n            return this.item.value;\n        },\n        /**\n         * @name inputText\n         * @param text {string}\n         */\n        set: function (text) {\n            this.item.setValue(text);\n            this.inputTextChange.emit(text);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TagInputForm.prototype.ngOnInit = function () {\n        this.item.setValidators(this.validators);\n        this.item.setAsyncValidators(this.asyncValidators);\n        // creating form\n        this.form = new FormGroup({\n            item: this.item\n        });\n    };\n    TagInputForm.prototype.ngOnChanges = function (changes) {\n        if (changes.disabled && !changes.disabled.firstChange) {\n            if (changes.disabled.currentValue) {\n                this.form.controls['item'].disable();\n            }\n            else {\n                this.form.controls['item'].enable();\n            }\n        }\n    };\n    Object.defineProperty(TagInputForm.prototype, \"value\", {\n        /**\n         * @name value\n         */\n        get: function () {\n            return this.form.get('item');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @name isInputFocused\n     */\n    TagInputForm.prototype.isInputFocused = function () {\n        var doc = typeof document !== 'undefined' ? document : undefined;\n        return doc ? doc.activeElement === this.input.nativeElement : false;\n    };\n    /**\n     * @name getErrorMessages\n     * @param messages\n     */\n    TagInputForm.prototype.getErrorMessages = function (messages) {\n        var _this = this;\n        return Object.keys(messages)\n            .filter(function (err) { return _this.value.hasError(err); })\n            .map(function (err) { return messages[err]; });\n    };\n    /**\n     * @name hasErrors\n     */\n    TagInputForm.prototype.hasErrors = function () {\n        var _a = this.form, dirty = _a.dirty, value = _a.value, valid = _a.valid;\n        return dirty && value.item && !valid;\n    };\n    /**\n     * @name focus\n     */\n    TagInputForm.prototype.focus = function () {\n        this.input.nativeElement.focus();\n    };\n    /**\n     * @name blur\n     */\n    TagInputForm.prototype.blur = function () {\n        this.input.nativeElement.blur();\n    };\n    /**\n     * @name getElementPosition\n     */\n    TagInputForm.prototype.getElementPosition = function () {\n        return this.input.nativeElement.getBoundingClientRect();\n    };\n    /**\n     * - removes input from the component\n     * @name destroy\n     */\n    TagInputForm.prototype.destroy = function () {\n        var input = this.input.nativeElement;\n        input.parentElement.removeChild(input);\n    };\n    /**\n     * @name onKeyDown\n     * @param $event\n     */\n    TagInputForm.prototype.onKeyDown = function ($event) {\n        this.inputText = this.value.value;\n        if ($event.key === 'Enter') {\n            this.submit($event);\n        }\n        else {\n            return this.onKeydown.emit($event);\n        }\n    };\n    /**\n     * @name onKeyUp\n     * @param $event\n     */\n    TagInputForm.prototype.onKeyUp = function ($event) {\n        this.inputText = this.value.value;\n        return this.onKeyup.emit($event);\n    };\n    /**\n     * @name submit\n     */\n    TagInputForm.prototype.submit = function ($event) {\n        $event.preventDefault();\n        this.onSubmit.emit($event);\n    };\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], TagInputForm.prototype, \"onSubmit\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], TagInputForm.prototype, \"onBlur\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], TagInputForm.prototype, \"onFocus\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], TagInputForm.prototype, \"onKeyup\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], TagInputForm.prototype, \"onKeydown\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], TagInputForm.prototype, \"inputTextChange\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], TagInputForm.prototype, \"placeholder\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], TagInputForm.prototype, \"validators\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], TagInputForm.prototype, \"asyncValidators\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], TagInputForm.prototype, \"inputId\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], TagInputForm.prototype, \"inputClass\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputForm.prototype, \"tabindex\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputForm.prototype, \"disabled\", void 0);\n    __decorate([\n        ViewChild('input', { static: false }),\n        __metadata(\"design:type\", Object)\n    ], TagInputForm.prototype, \"input\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], TagInputForm.prototype, \"inputText\", null);\n    TagInputForm = __decorate([\n        Component({\n            selector: 'tag-input-form',\n            template: \"<!-- form -->\\n<form (ngSubmit)=\\\"submit($event)\\\" [formGroup]=\\\"form\\\">\\n    <input #input\\n\\n           type=\\\"text\\\"\\n           class=\\\"ng2-tag-input__text-input\\\"\\n           autocomplete=\\\"off\\\"\\n           tabindex=\\\"{{ disabled ? -1 : tabindex ? tabindex : 0 }}\\\"\\n           minlength=\\\"1\\\"\\n           formControlName=\\\"item\\\"\\n\\n           [ngClass]=\\\"inputClass\\\"\\n           [attr.id]=\\\"inputId\\\"\\n           [attr.placeholder]=\\\"placeholder\\\"\\n           [attr.aria-label]=\\\"placeholder\\\"\\n           [attr.tabindex]=\\\"tabindex\\\"\\n           [attr.disabled]=\\\"disabled ? disabled : null\\\"\\n\\n           (focus)=\\\"onFocus.emit($event)\\\"\\n           (blur)=\\\"onBlur.emit($event)\\\"\\n           (keydown)=\\\"onKeyDown($event)\\\"\\n           (keyup)=\\\"onKeyUp($event)\\\"\\n    />\\n</form>\\n\",\n            styles: [\".dark tag:focus{box-shadow:0 0 0 1px #323232}.ng2-tag-input.bootstrap3-info{background-color:#fff;display:inline-block;color:#555;vertical-align:middle;max-width:100%;height:42px;line-height:44px}.ng2-tag-input.bootstrap3-info input{border:none;box-shadow:none;outline:0;background-color:transparent;padding:0 6px;margin:0;width:auto;max-width:inherit}.ng2-tag-input.bootstrap3-info .form-control input::-moz-placeholder{color:#777;opacity:1}.ng2-tag-input.bootstrap3-info .form-control input:-ms-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info .form-control input::-webkit-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info input:focus{border:none;box-shadow:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--focused{box-shadow:inset 0 1px 1px rgba(0,0,0,.4);border:1px solid #ccc}.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;transition:.25s;padding:.25rem 0;min-height:32px;cursor:text;border-bottom:2px solid #efefef}.ng2-tag-input:focus{outline:0}.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.ng2-tag-input.ng2-tag-input--focused{border-bottom:2px solid #2196f3}.ng2-tag-input.ng2-tag-input--invalid{border-bottom:2px solid #f44336}.ng2-tag-input.ng2-tag-input--loading{border:none}.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.ng2-tag-input form{margin:.1em 0}.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.minimal.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:1px solid transparent}.minimal.ng2-tag-input:focus{outline:0}.minimal.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.minimal.ng2-tag-input.ng2-tag-input--loading{border:none}.minimal.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.minimal.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.dark.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #444}.dark.ng2-tag-input:focus{outline:0}.dark.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.dark.ng2-tag-input.ng2-tag-input--loading{border:none}.dark.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.dark.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.bootstrap.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #efefef}.bootstrap.ng2-tag-input:focus{outline:0}.bootstrap.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.bootstrap.ng2-tag-input.ng2-tag-input--focused{border-bottom:2px solid #0275d8}.bootstrap.ng2-tag-input.ng2-tag-input--invalid{border-bottom:2px solid #d9534f}.bootstrap.ng2-tag-input.ng2-tag-input--loading{border:none}.bootstrap.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.bootstrap.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.bootstrap3-info.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;padding:4px;cursor:text;box-shadow:inset 0 1px 1px rgba(0,0,0,.075);border-radius:4px}.bootstrap3-info.ng2-tag-input:focus{outline:0}.bootstrap3-info.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid{box-shadow:inset 0 1px 1px #d9534f;border-bottom:1px solid #d9534f}.bootstrap3-info.ng2-tag-input.ng2-tag-input--loading{border:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.bootstrap3-info.ng2-tag-input form{margin:.1em 0}.bootstrap3-info.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.error-message{font-size:.8em;color:#f44336;margin:.5em 0 0}.bootstrap .error-message{color:#d9534f}.ng2-tag-input__text-input{display:inline;vertical-align:middle;border:none;padding:0 .5rem;height:38px;font-size:1em;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif}.ng2-tag-input__text-input:focus{outline:0}.ng2-tag-input__text-input[disabled=true]{opacity:.5;background:#fff}\"]\n        })\n    ], TagInputForm);\n    return TagInputForm;\n}());\n\nvar TagRipple = /** @class */ (function () {\n    function TagRipple() {\n        this.state = 'none';\n    }\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagRipple.prototype, \"state\", void 0);\n    TagRipple = __decorate([\n        Component({\n            selector: 'tag-ripple',\n            template: \"\\n        <div class=\\\"tag-ripple\\\" [@ink]=\\\"state\\\"></div>\\n    \",\n            animations: [\n                trigger('ink', [\n                    state('none', style({ width: 0, opacity: 0 })),\n                    transition('none => clicked', [\n                        animate(300, keyframes([\n                            style({ opacity: 1, offset: 0, width: '30%', borderRadius: '100%' }),\n                            style({ opacity: 1, offset: 0.5, width: '50%' }),\n                            style({ opacity: 0.5, offset: 1, width: '100%', borderRadius: '16px' })\n                        ]))\n                    ])\n                ])\n            ],\n            styles: [\"\\n        :host {\\n            width: 100%;\\n            height: 100%;\\n            left: 0;\\n            overflow: hidden;\\n            position: absolute;\\n        }\\n\\n        .tag-ripple {\\n            background: rgba(0, 0, 0, 0.1);\\n            top: 50%;\\n            left: 50%;\\n            height: 100%;\\n            transform: translate(-50%, -50%);\\n            position: absolute;\\n        }\\n    \"]\n        })\n    ], TagRipple);\n    return TagRipple;\n}());\n\n// mocking navigator\nvar navigator = typeof window !== 'undefined' ? window.navigator : {\n    userAgent: 'Chrome',\n    vendor: 'Google Inc'\n};\nvar isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\nvar TagComponent = /** @class */ (function () {\n    function TagComponent(element, renderer, cdRef) {\n        this.element = element;\n        this.renderer = renderer;\n        this.cdRef = cdRef;\n        /**\n         * @name disabled\n         */\n        this.disabled = false;\n        /**\n         * @name onSelect\n         */\n        this.onSelect = new EventEmitter();\n        /**\n         * @name onRemove\n         */\n        this.onRemove = new EventEmitter();\n        /**\n         * @name onBlur\n         */\n        this.onBlur = new EventEmitter();\n        /**\n         * @name onKeyDown\n         */\n        this.onKeyDown = new EventEmitter();\n        /**\n         * @name onTagEdited\n         */\n        this.onTagEdited = new EventEmitter();\n        /**\n         * @name editing\n         */\n        this.editing = false;\n        /**\n         * @name rippleState\n         */\n        this.rippleState = 'none';\n    }\n    Object.defineProperty(TagComponent.prototype, \"readonly\", {\n        /**\n         * @name readonly {boolean}\n         */\n        get: function () {\n            return typeof this.model !== 'string' && this.model.readonly === true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @name select\n     */\n    TagComponent.prototype.select = function ($event) {\n        if (this.readonly || this.disabled) {\n            return;\n        }\n        if ($event) {\n            $event.stopPropagation();\n        }\n        this.focus();\n        this.onSelect.emit(this.model);\n    };\n    /**\n     * @name remove\n     */\n    TagComponent.prototype.remove = function ($event) {\n        $event.stopPropagation();\n        this.onRemove.emit(this);\n    };\n    /**\n     * @name focus\n     */\n    TagComponent.prototype.focus = function () {\n        this.element.nativeElement.focus();\n    };\n    TagComponent.prototype.move = function () {\n        this.moving = true;\n    };\n    /**\n     * @name keydown\n     * @param event\n     */\n    TagComponent.prototype.keydown = function (event) {\n        if (this.editing) {\n            if (event.keyCode === 13) {\n                return this.disableEditMode(event);\n            }\n        }\n        else {\n            this.onKeyDown.emit({ event: event, model: this.model });\n        }\n    };\n    /**\n     * @name blink\n     */\n    TagComponent.prototype.blink = function () {\n        var classList = this.element.nativeElement.classList;\n        classList.add('blink');\n        setTimeout(function () { return classList.remove('blink'); }, 50);\n    };\n    /**\n     * @name toggleEditMode\n     */\n    TagComponent.prototype.toggleEditMode = function () {\n        if (this.editable) {\n            return this.editing ? undefined : this.activateEditMode();\n        }\n    };\n    /**\n     * @name onBlurred\n     * @param event\n     */\n    TagComponent.prototype.onBlurred = function (event) {\n        var _a;\n        // Checks if it is editable first before handeling the onBlurred event in order to prevent\n        // a bug in IE where tags are still editable with onlyFromAutocomplete set to true\n        if (!this.editable) {\n            return;\n        }\n        this.disableEditMode();\n        var value = event.target.innerText;\n        var result = typeof this.model === 'string'\n            ? value\n            : __assign({}, this.model, (_a = {}, _a[this.displayBy] = value, _a));\n        this.onBlur.emit(result);\n    };\n    /**\n     * @name getDisplayValue\n     * @param item\n     */\n    TagComponent.prototype.getDisplayValue = function (item) {\n        return typeof item === 'string' ? item : item[this.displayBy];\n    };\n    Object.defineProperty(TagComponent.prototype, \"isRippleVisible\", {\n        /**\n         * @desc returns whether the ripple is visible or not\n         * only works in Chrome\n         * @name isRippleVisible\n         */\n        get: function () {\n            return !this.readonly && !this.editing && isChrome && this.hasRipple;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @name disableEditMode\n     * @param $event\n     */\n    TagComponent.prototype.disableEditMode = function ($event) {\n        var classList = this.element.nativeElement.classList;\n        var input = this.getContentEditableText();\n        this.editing = false;\n        classList.remove('tag--editing');\n        if (!input) {\n            this.setContentEditableText(this.model);\n            return;\n        }\n        this.storeNewValue(input);\n        this.cdRef.detectChanges();\n        if ($event) {\n            $event.preventDefault();\n        }\n    };\n    /**\n     * @name isDeleteIconVisible\n     */\n    TagComponent.prototype.isDeleteIconVisible = function () {\n        return (!this.readonly && !this.disabled && this.removable && !this.editing);\n    };\n    /**\n     * @name getContentEditableText\n     */\n    TagComponent.prototype.getContentEditableText = function () {\n        var input = this.getContentEditable();\n        return input ? input.innerText.trim() : '';\n    };\n    /**\n     * @name setContentEditableText\n     * @param model\n     */\n    TagComponent.prototype.setContentEditableText = function (model) {\n        var input = this.getContentEditable();\n        var value = this.getDisplayValue(model);\n        input.innerText = value;\n    };\n    /**\n     * @name\n     */\n    TagComponent.prototype.activateEditMode = function () {\n        var classList = this.element.nativeElement.classList;\n        classList.add('tag--editing');\n        this.editing = true;\n    };\n    /**\n     * @name storeNewValue\n     * @param input\n     */\n    TagComponent.prototype.storeNewValue = function (input) {\n        var _a;\n        var _this = this;\n        var exists = function (tag) {\n            return typeof tag === 'string'\n                ? tag === input\n                : tag[_this.displayBy] === input;\n        };\n        var hasId = function () {\n            return _this.model[_this.identifyBy] !== _this.model[_this.displayBy];\n        };\n        // if the value changed, replace the value in the model\n        if (exists(this.model)) {\n            return;\n        }\n        var model = typeof this.model === 'string'\n            ? input\n            : (_a = {\n                    index: this.index\n                },\n                _a[this.identifyBy] = hasId()\n                    ? this.model[this.identifyBy]\n                    : input,\n                _a[this.displayBy] = input,\n                _a);\n        if (this.canAddTag(model)) {\n            this.onTagEdited.emit({ tag: model, index: this.index });\n        }\n        else {\n            this.setContentEditableText(this.model);\n        }\n    };\n    /**\n     * @name getContentEditable\n     */\n    TagComponent.prototype.getContentEditable = function () {\n        return this.element.nativeElement.querySelector('[contenteditable]');\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagComponent.prototype, \"model\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TagComponent.prototype, \"removable\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TagComponent.prototype, \"editable\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", TemplateRef)\n    ], TagComponent.prototype, \"template\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], TagComponent.prototype, \"displayBy\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], TagComponent.prototype, \"identifyBy\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], TagComponent.prototype, \"index\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TagComponent.prototype, \"hasRipple\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagComponent.prototype, \"disabled\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], TagComponent.prototype, \"canAddTag\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], TagComponent.prototype, \"onSelect\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], TagComponent.prototype, \"onRemove\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], TagComponent.prototype, \"onBlur\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], TagComponent.prototype, \"onKeyDown\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], TagComponent.prototype, \"onTagEdited\", void 0);\n    __decorate([\n        HostBinding('class.moving'),\n        __metadata(\"design:type\", Boolean)\n    ], TagComponent.prototype, \"moving\", void 0);\n    __decorate([\n        ViewChild(TagRipple, { static: false }),\n        __metadata(\"design:type\", TagRipple)\n    ], TagComponent.prototype, \"ripple\", void 0);\n    __decorate([\n        HostListener('keydown', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], TagComponent.prototype, \"keydown\", null);\n    TagComponent = __decorate([\n        Component({\n            selector: 'tag',\n            template: \"<div (click)=\\\"select($event)\\\"\\n     (dblclick)=\\\"toggleEditMode()\\\"\\n     (mousedown)=\\\"rippleState='clicked'\\\"\\n     (mouseup)=\\\"rippleState='none'\\\"\\n     [ngSwitch]=\\\"!!template\\\"\\n     [class.disabled]=\\\"disabled\\\"\\n     [attr.tabindex]=\\\"-1\\\"\\n     [attr.aria-label]=\\\"getDisplayValue(model)\\\">\\n\\n    <div *ngSwitchCase=\\\"true\\\" [attr.contenteditable]=\\\"editing\\\">\\n        <!-- CUSTOM TEMPLATE -->\\n        <ng-template\\n            [ngTemplateOutletContext]=\\\"{ item: model, index: index }\\\"\\n            [ngTemplateOutlet]=\\\"template\\\">\\n        </ng-template>\\n    </div>\\n\\n    <div *ngSwitchCase=\\\"false\\\" class=\\\"tag-wrapper\\\">\\n        <!-- TAG NAME -->\\n        <div [attr.contenteditable]=\\\"editing\\\"\\n             [attr.title]=\\\"getDisplayValue(model)\\\"\\n             class=\\\"tag__text inline\\\"\\n             spellcheck=\\\"false\\\"\\n             (keydown.enter)=\\\"disableEditMode($event)\\\"\\n             (keydown.escape)=\\\"disableEditMode($event)\\\"\\n             (click)=\\\"editing ? $event.stopPropagation() : undefined\\\"\\n             (blur)=\\\"onBlurred($event)\\\">\\n            {{ getDisplayValue(model) }}\\n        </div>\\n\\n        <!-- 'X' BUTTON -->\\n        <delete-icon\\n            aria-label=\\\"Remove tag\\\"\\n            role=\\\"button\\\"\\n            (click)=\\\"remove($event)\\\"\\n            *ngIf=\\\"isDeleteIconVisible()\\\">\\n        </delete-icon>\\n    </div>\\n</div>\\n\\n<tag-ripple [state]=\\\"rippleState\\\"\\n            [attr.tabindex]=\\\"-1\\\"\\n            *ngIf=\\\"isRippleVisible\\\">\\n</tag-ripple>\\n\",\n            styles: [\":host,:host>div,:host>div:focus{outline:0;overflow:hidden;transition:opacity 1s;z-index:1}:host{max-width:400px}:host.blink{-webkit-animation:.3s ease-in-out forwards blink;animation:.3s ease-in-out forwards blink}@-webkit-keyframes blink{0%{opacity:.3}}@keyframes blink{0%{opacity:.3}}:host .disabled{cursor:not-allowed}:host [contenteditable=true]{outline:0}.tag-wrapper{flex-direction:row;display:flex}.tag__text{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}\"]\n        }),\n        __metadata(\"design:paramtypes\", [ElementRef,\n            Renderer2,\n            ChangeDetectorRef])\n    ], TagComponent);\n    return TagComponent;\n}());\n\n/**\n * @name animations\n */\nvar animations = [\n    trigger('animation', [\n        state('in', style({\n            opacity: 1\n        })),\n        state('out', style({\n            opacity: 0\n        })),\n        transition(':enter', [\n            animate('{{ enter }}', keyframes([\n                style({ opacity: 0, offset: 0, transform: 'translate(0px, 20px)' }),\n                style({ opacity: 0.3, offset: 0.3, transform: 'translate(0px, -10px)' }),\n                style({ opacity: 0.5, offset: 0.5, transform: 'translate(0px, 0px)' }),\n                style({ opacity: 0.75, offset: 0.75, transform: 'translate(0px, 5px)' }),\n                style({ opacity: 1, offset: 1, transform: 'translate(0px, 0px)' })\n            ]))\n        ]),\n        transition(':leave', [\n            animate('{{ leave }}', keyframes([\n                style({ opacity: 1, transform: 'translateX(0)', offset: 0 }),\n                style({ opacity: 1, transform: 'translateX(-15px)', offset: 0.7 }),\n                style({ opacity: 0, transform: 'translateX(100%)', offset: 1.0 })\n            ]))\n        ])\n    ])\n];\n\nvar TagInputDropdown = /** @class */ (function () {\n    function TagInputDropdown(injector) {\n        var _this = this;\n        this.injector = injector;\n        /**\n         * @name offset\n         */\n        this.offset = defaults.dropdown.offset;\n        /**\n         * @name focusFirstElement\n         */\n        this.focusFirstElement = defaults.dropdown.focusFirstElement;\n        /**\n         * - show autocomplete dropdown if the value of input is empty\n         * @name showDropdownIfEmpty\n         */\n        this.showDropdownIfEmpty = defaults.dropdown.showDropdownIfEmpty;\n        /**\n         * - desc minimum text length in order to display the autocomplete dropdown\n         * @name minimumTextLength\n         */\n        this.minimumTextLength = defaults.dropdown.minimumTextLength;\n        /**\n         * - number of items to display in the autocomplete dropdown\n         * @name limitItemsTo\n         */\n        this.limitItemsTo = defaults.dropdown.limitItemsTo;\n        /**\n         * @name displayBy\n         */\n        this.displayBy = defaults.dropdown.displayBy;\n        /**\n         * @name identifyBy\n         */\n        this.identifyBy = defaults.dropdown.identifyBy;\n        /**\n         * @description a function a developer can use to implement custom matching for the autocomplete\n         * @name matchingFn\n         */\n        this.matchingFn = defaults.dropdown.matchingFn;\n        /**\n         * @name appendToBody\n         */\n        this.appendToBody = defaults.dropdown.appendToBody;\n        /**\n         * @name keepOpen\n         * @description option to leave dropdown open when adding a new item\n         */\n        this.keepOpen = defaults.dropdown.keepOpen;\n        /**\n         * @name dynamicUpdate\n         */\n        this.dynamicUpdate = defaults.dropdown.dynamicUpdate;\n        /**\n         * @name zIndex\n         */\n        this.zIndex = defaults.dropdown.zIndex;\n        /**\n         * list of items that match the current value of the input (for autocomplete)\n         * @name items\n         */\n        this.items = [];\n        /**\n         * @name tagInput\n         */\n        this.tagInput = this.injector.get(TagInputComponent);\n        /**\n         * @name _autocompleteItems\n         */\n        this._autocompleteItems = [];\n        /**\n         *\n         * @name show\n         */\n        this.show = function () {\n            var maxItemsReached = _this.tagInput.items.length === _this.tagInput.maxItems;\n            var value = _this.getFormValue();\n            var hasMinimumText = value.trim().length >= _this.minimumTextLength;\n            var position = _this.calculatePosition();\n            var items = _this.getMatchingItems(value);\n            var hasItems = items.length > 0;\n            var isHidden = _this.isVisible === false;\n            var showDropdownIfEmpty = _this.showDropdownIfEmpty && hasItems && !value;\n            var isDisabled = _this.tagInput.disable;\n            var shouldShow = isHidden && ((hasItems && hasMinimumText) || showDropdownIfEmpty);\n            var shouldHide = _this.isVisible && !hasItems;\n            if (_this.autocompleteObservable && hasMinimumText) {\n                return _this.getItemsFromObservable(value);\n            }\n            if ((!_this.showDropdownIfEmpty && !value) ||\n                maxItemsReached ||\n                isDisabled) {\n                return _this.dropdown.hide();\n            }\n            _this.setItems(items);\n            if (shouldShow) {\n                _this.dropdown.show(position);\n            }\n            else if (shouldHide) {\n                _this.hide();\n            }\n        };\n        /**\n         * @name requestAdding\n         * @param item {Ng2MenuItem}\n         */\n        this.requestAdding = function (item) { return __awaiter(_this, void 0, void 0, function () {\n            var tag;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tag = this.createTagModel(item);\n                        return [4 /*yield*/, this.tagInput.onAddingRequested(true, tag).catch(function () { })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        /**\n         * @name resetItems\n         */\n        this.resetItems = function () {\n            _this.items = [];\n        };\n        /**\n         * @name getItemsFromObservable\n         * @param text\n         */\n        this.getItemsFromObservable = function (text) {\n            _this.setLoadingState(true);\n            var subscribeFn = function (data) {\n                // hide loading animation\n                _this.setLoadingState(false)\n                    // add items\n                    .populateItems(data);\n                _this.setItems(_this.getMatchingItems(text));\n                if (_this.items.length) {\n                    _this.dropdown.show(_this.calculatePosition());\n                }\n                else {\n                    _this.dropdown.hide();\n                }\n            };\n            _this.autocompleteObservable(text)\n                .pipe(first())\n                .subscribe(subscribeFn, function () { return _this.setLoadingState(false); });\n        };\n    }\n    Object.defineProperty(TagInputDropdown.prototype, \"autocompleteItems\", {\n        /**\n         * @name autocompleteItems\n         * @desc array of items that will populate the autocomplete\n         */\n        get: function () {\n            var _this = this;\n            var items = this._autocompleteItems;\n            if (!items) {\n                return [];\n            }\n            return items.map(function (item) {\n                var _a;\n                return typeof item === 'string'\n                    ? (_a = {},\n                        _a[_this.displayBy] = item,\n                        _a[_this.identifyBy] = item,\n                        _a) : item;\n            });\n        },\n        /**\n         * @name autocompleteItems\n         * @param items\n         */\n        set: function (items) {\n            this._autocompleteItems = items;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @name ngAfterviewInit\n     */\n    TagInputDropdown.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.onItemClicked().subscribe(function (item) {\n            _this.requestAdding(item);\n        });\n        // reset itemsMatching array when the dropdown is hidden\n        this.onHide().subscribe(this.resetItems);\n        var DEBOUNCE_TIME = 200;\n        var KEEP_OPEN = this.keepOpen;\n        this.tagInput.onTextChange\n            .asObservable()\n            .pipe(debounceTime(DEBOUNCE_TIME), filter(function (value) {\n            if (KEEP_OPEN === false) {\n                return value.length > 0;\n            }\n            return true;\n        }))\n            .subscribe(this.show);\n    };\n    /**\n     * @name updatePosition\n     */\n    TagInputDropdown.prototype.updatePosition = function () {\n        var position = this.tagInput.inputForm.getElementPosition();\n        this.dropdown.menu.updatePosition(position, this.dynamicUpdate);\n    };\n    Object.defineProperty(TagInputDropdown.prototype, \"isVisible\", {\n        /**\n         * @name isVisible\n         */\n        get: function () {\n            return this.dropdown.menu.dropdownState.menuState.isVisible;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @name onHide\n     */\n    TagInputDropdown.prototype.onHide = function () {\n        return this.dropdown.onHide;\n    };\n    /**\n     * @name onItemClicked\n     */\n    TagInputDropdown.prototype.onItemClicked = function () {\n        return this.dropdown.onItemClicked;\n    };\n    Object.defineProperty(TagInputDropdown.prototype, \"selectedItem\", {\n        /**\n         * @name selectedItem\n         */\n        get: function () {\n            return this.dropdown.menu.dropdownState.dropdownState.selectedItem;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TagInputDropdown.prototype, \"state\", {\n        /**\n         * @name state\n         */\n        get: function () {\n            return this.dropdown.menu.dropdownState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @name hide\n     */\n    TagInputDropdown.prototype.hide = function () {\n        this.resetItems();\n        this.dropdown.hide();\n    };\n    /**\n     * @name scrollListener\n     */\n    TagInputDropdown.prototype.scrollListener = function () {\n        if (!this.isVisible || !this.dynamicUpdate) {\n            return;\n        }\n        this.updatePosition();\n    };\n    /**\n     * @name onWindowBlur\n     */\n    TagInputDropdown.prototype.onWindowBlur = function () {\n        this.dropdown.hide();\n    };\n    /**\n     * @name getFormValue\n     */\n    TagInputDropdown.prototype.getFormValue = function () {\n        var formValue = this.tagInput.formValue;\n        return formValue ? formValue.toString().trim() : '';\n    };\n    /**\n     * @name calculatePosition\n     */\n    TagInputDropdown.prototype.calculatePosition = function () {\n        return this.tagInput.inputForm.getElementPosition();\n    };\n    /**\n     * @name createTagModel\n     * @param item\n     */\n    TagInputDropdown.prototype.createTagModel = function (item) {\n        var _a;\n        var display = typeof item.value === 'string' ? item.value : item.value[this.displayBy];\n        var value = typeof item.value === 'string' ? item.value : item.value[this.identifyBy];\n        return __assign({}, item.value, (_a = {}, _a[this.tagInput.displayBy] = display, _a[this.tagInput.identifyBy] = value, _a));\n    };\n    /**\n     *\n     * @param value {string}\n     */\n    TagInputDropdown.prototype.getMatchingItems = function (value) {\n        var _this = this;\n        if (!value && !this.showDropdownIfEmpty) {\n            return [];\n        }\n        var dupesAllowed = this.tagInput.allowDupes;\n        return this.autocompleteItems.filter(function (item) {\n            var hasValue = dupesAllowed\n                ? false\n                : _this.tagInput.tags.some(function (tag) {\n                    var identifyBy = _this.tagInput.identifyBy;\n                    var model = typeof tag.model === 'string' ? tag.model : tag.model[identifyBy];\n                    return model === item[_this.identifyBy];\n                });\n            return _this.matchingFn(value, item) && hasValue === false;\n        });\n    };\n    /**\n     * @name setItems\n     */\n    TagInputDropdown.prototype.setItems = function (items) {\n        this.items = items.slice(0, this.limitItemsTo || items.length);\n    };\n    /**\n     * @name populateItems\n     * @param data\n     */\n    TagInputDropdown.prototype.populateItems = function (data) {\n        var _this = this;\n        this.autocompleteItems = data.map(function (item) {\n            var _a;\n            return typeof item === 'string'\n                ? (_a = {},\n                    _a[_this.displayBy] = item,\n                    _a[_this.identifyBy] = item,\n                    _a) : item;\n        });\n        return this;\n    };\n    /**\n     * @name setLoadingState\n     * @param state\n     */\n    TagInputDropdown.prototype.setLoadingState = function (state) {\n        this.tagInput.isLoading = state;\n        return this;\n    };\n    __decorate([\n        ViewChild(Ng2Dropdown, { static: false }),\n        __metadata(\"design:type\", Ng2Dropdown)\n    ], TagInputDropdown.prototype, \"dropdown\", void 0);\n    __decorate([\n        ContentChildren(TemplateRef),\n        __metadata(\"design:type\", QueryList)\n    ], TagInputDropdown.prototype, \"templates\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], TagInputDropdown.prototype, \"offset\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputDropdown.prototype, \"focusFirstElement\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputDropdown.prototype, \"showDropdownIfEmpty\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], TagInputDropdown.prototype, \"autocompleteObservable\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputDropdown.prototype, \"minimumTextLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], TagInputDropdown.prototype, \"limitItemsTo\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputDropdown.prototype, \"displayBy\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputDropdown.prototype, \"identifyBy\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Function)\n    ], TagInputDropdown.prototype, \"matchingFn\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputDropdown.prototype, \"appendToBody\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputDropdown.prototype, \"keepOpen\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputDropdown.prototype, \"dynamicUpdate\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputDropdown.prototype, \"zIndex\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array),\n        __metadata(\"design:paramtypes\", [Array])\n    ], TagInputDropdown.prototype, \"autocompleteItems\", null);\n    __decorate([\n        HostListener('window:scroll'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], TagInputDropdown.prototype, \"scrollListener\", null);\n    __decorate([\n        HostListener('window:blur'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], TagInputDropdown.prototype, \"onWindowBlur\", null);\n    TagInputDropdown = __decorate([\n        Component({\n            selector: 'tag-input-dropdown',\n            template: \"<ng2-dropdown [dynamicUpdate]=\\\"dynamicUpdate\\\">\\n    <ng2-dropdown-menu [focusFirstElement]=\\\"focusFirstElement\\\"\\n                       [zIndex]=\\\"zIndex\\\"\\n                       [appendToBody]=\\\"appendToBody\\\"\\n                       [offset]=\\\"offset\\\">\\n        <ng2-menu-item *ngFor=\\\"let item of items; let index = index; let last = last\\\"\\n                       [value]=\\\"item\\\"\\n                       [ngSwitch]=\\\"!!templates.length\\\">\\n\\n            <span *ngSwitchCase=\\\"false\\\"\\n                  [innerHTML]=\\\"item[displayBy] | highlight : tagInput.inputForm.value.value\\\">\\n            </span>\\n\\n            <ng-template *ngSwitchDefault\\n                      [ngTemplateOutlet]=\\\"templates.first\\\"\\n                      [ngTemplateOutletContext]=\\\"{ item: item, index: index, last: last }\\\">\\n            </ng-template>\\n        </ng2-menu-item>\\n    </ng2-dropdown-menu>\\n</ng2-dropdown>\\n\"\n        }),\n        __metadata(\"design:paramtypes\", [Injector])\n    ], TagInputDropdown);\n    return TagInputDropdown;\n}());\n\n// angular universal hacks\n/* tslint:disable-next-line */\nvar DragEvent = window.DragEvent;\nvar CUSTOM_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return TagInputComponent; }),\n    multi: true\n};\nvar TagInputComponent = /** @class */ (function (_super) {\n    __extends(TagInputComponent, _super);\n    function TagInputComponent(renderer, dragProvider) {\n        var _a;\n        var _this = _super.call(this) || this;\n        _this.renderer = renderer;\n        _this.dragProvider = dragProvider;\n        /**\n         * @name separatorKeys\n         * @desc keyboard keys with which a user can separate items\n         */\n        _this.separatorKeys = defaults.tagInput.separatorKeys;\n        /**\n         * @name separatorKeyCodes\n         * @desc keyboard key codes with which a user can separate items\n         */\n        _this.separatorKeyCodes = defaults.tagInput.separatorKeyCodes;\n        /**\n         * @name placeholder\n         * @desc the placeholder of the input text\n         */\n        _this.placeholder = defaults.tagInput.placeholder;\n        /**\n         * @name secondaryPlaceholder\n         * @desc placeholder to appear when the input is empty\n         */\n        _this.secondaryPlaceholder = defaults.tagInput.secondaryPlaceholder;\n        /**\n         * @name maxItems\n         * @desc maximum number of items that can be added\n         */\n        _this.maxItems = defaults.tagInput.maxItems;\n        /**\n         * @name validators\n         * @desc array of Validators that are used to validate the tag before it gets appended to the list\n         */\n        _this.validators = defaults.tagInput.validators;\n        /**\n         * @name asyncValidators\n         * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n         */\n        _this.asyncValidators = defaults.tagInput.asyncValidators;\n        /**\n        * - if set to true, it will only possible to add items from the autocomplete\n        * @name onlyFromAutocomplete\n        */\n        _this.onlyFromAutocomplete = defaults.tagInput.onlyFromAutocomplete;\n        /**\n         * @name errorMessages\n         */\n        _this.errorMessages = defaults.tagInput.errorMessages;\n        /**\n         * @name theme\n         */\n        _this.theme = defaults.tagInput.theme;\n        /**\n         * @name onTextChangeDebounce\n         */\n        _this.onTextChangeDebounce = defaults.tagInput.onTextChangeDebounce;\n        /**\n         * - custom id assigned to the input\n         * @name id\n         */\n        _this.inputId = defaults.tagInput.inputId;\n        /**\n         * - custom class assigned to the input\n         */\n        _this.inputClass = defaults.tagInput.inputClass;\n        /**\n         * - option to clear text input when the form is blurred\n         * @name clearOnBlur\n         */\n        _this.clearOnBlur = defaults.tagInput.clearOnBlur;\n        /**\n         * - hideForm\n         * @name clearOnBlur\n         */\n        _this.hideForm = defaults.tagInput.hideForm;\n        /**\n         * @name addOnBlur\n         */\n        _this.addOnBlur = defaults.tagInput.addOnBlur;\n        /**\n         * @name addOnPaste\n         */\n        _this.addOnPaste = defaults.tagInput.addOnPaste;\n        /**\n         * - pattern used with the native method split() to separate patterns in the string pasted\n         * @name pasteSplitPattern\n         */\n        _this.pasteSplitPattern = defaults.tagInput.pasteSplitPattern;\n        /**\n         * @name blinkIfDupe\n         */\n        _this.blinkIfDupe = defaults.tagInput.blinkIfDupe;\n        /**\n         * @name removable\n         */\n        _this.removable = defaults.tagInput.removable;\n        /**\n         * @name editable\n         */\n        _this.editable = defaults.tagInput.editable;\n        /**\n         * @name allowDupes\n         */\n        _this.allowDupes = defaults.tagInput.allowDupes;\n        /**\n         * @description if set to true, the newly added tags will be added as strings, and not objects\n         * @name modelAsStrings\n         */\n        _this.modelAsStrings = defaults.tagInput.modelAsStrings;\n        /**\n         * @name trimTags\n         */\n        _this.trimTags = defaults.tagInput.trimTags;\n        /**\n         * @name ripple\n         */\n        _this.ripple = defaults.tagInput.ripple;\n        /**\n         * @name tabindex\n         * @desc pass through the specified tabindex to the input\n         */\n        _this.tabindex = defaults.tagInput.tabIndex;\n        /**\n         * @name disable\n         */\n        _this.disable = defaults.tagInput.disable;\n        /**\n         * @name dragZone\n         */\n        _this.dragZone = defaults.tagInput.dragZone;\n        /**\n         * @name onRemoving\n         */\n        _this.onRemoving = defaults.tagInput.onRemoving;\n        /**\n         * @name onAdding\n         */\n        _this.onAdding = defaults.tagInput.onAdding;\n        /**\n         * @name animationDuration\n         */\n        _this.animationDuration = defaults.tagInput.animationDuration;\n        /**\n         * @name onAdd\n         * @desc event emitted when adding a new item\n         */\n        _this.onAdd = new EventEmitter();\n        /**\n         * @name onRemove\n         * @desc event emitted when removing an existing item\n         */\n        _this.onRemove = new EventEmitter();\n        /**\n         * @name onSelect\n         * @desc event emitted when selecting an item\n         */\n        _this.onSelect = new EventEmitter();\n        /**\n         * @name onFocus\n         * @desc event emitted when the input is focused\n         */\n        _this.onFocus = new EventEmitter();\n        /**\n         * @name onFocus\n         * @desc event emitted when the input is blurred\n         */\n        _this.onBlur = new EventEmitter();\n        /**\n         * @name onTextChange\n         * @desc event emitted when the input value changes\n         */\n        _this.onTextChange = new EventEmitter();\n        /**\n         * - output triggered when text is pasted in the form\n         * @name onPaste\n         */\n        _this.onPaste = new EventEmitter();\n        /**\n         * - output triggered when tag entered is not valid\n         * @name onValidationError\n         */\n        _this.onValidationError = new EventEmitter();\n        /**\n         * - output triggered when tag is edited\n         * @name onTagEdited\n         */\n        _this.onTagEdited = new EventEmitter();\n        /**\n         * @name isLoading\n         */\n        _this.isLoading = false;\n        /**\n         * @name listeners\n         * @desc array of events that get fired using @fireEvents\n         */\n        _this.listeners = (_a = {},\n            _a[KEYDOWN] = [],\n            _a[KEYUP] = [],\n            _a);\n        /**\n         * @description emitter for the 2-way data binding inputText value\n         * @name inputTextChange\n         */\n        _this.inputTextChange = new EventEmitter();\n        /**\n         * @description private variable to bind get/set\n         * @name inputTextValue\n         */\n        _this.inputTextValue = '';\n        _this.errors = [];\n        /**\n         * @name appendTag\n         * @param tag {TagModel}\n         */\n        _this.appendTag = function (tag, index) {\n            if (index === void 0) { index = _this.items.length; }\n            var items = _this.items;\n            var model = _this.modelAsStrings ? tag[_this.identifyBy] : tag;\n            _this.items = __spread(items.slice(0, index), [\n                model\n            ], items.slice(index, items.length));\n        };\n        /**\n         * @name createTag\n         * @param model\n         */\n        _this.createTag = function (model) {\n            var _a;\n            var trim = function (val, key) {\n                return typeof val === 'string' ? val.trim() : val[key];\n            };\n            return __assign({}, typeof model !== 'string' ? model : {}, (_a = {}, _a[_this.displayBy] = _this.trimTags ? trim(model, _this.displayBy) : model, _a[_this.identifyBy] = _this.trimTags ? trim(model, _this.identifyBy) : model, _a));\n        };\n        /**\n         *\n         * @param tag\n         * @param isFromAutocomplete\n         */\n        _this.isTagValid = function (tag, fromAutocomplete) {\n            if (fromAutocomplete === void 0) { fromAutocomplete = false; }\n            var selectedItem = _this.dropdown ? _this.dropdown.selectedItem : undefined;\n            var value = _this.getItemDisplay(tag).trim();\n            if (selectedItem && !fromAutocomplete || !value) {\n                return false;\n            }\n            var dupe = _this.findDupe(tag, fromAutocomplete);\n            // if so, give a visual cue and return false\n            if (!_this.allowDupes && dupe && _this.blinkIfDupe) {\n                var model = _this.tags.find(function (item) {\n                    return _this.getItemValue(item.model) === _this.getItemValue(dupe);\n                });\n                if (model) {\n                    model.blink();\n                }\n            }\n            var isFromAutocomplete = fromAutocomplete && _this.onlyFromAutocomplete;\n            var assertions = [\n                // 1. there must be no dupe OR dupes are allowed\n                !dupe || _this.allowDupes,\n                // 2. check max items has not been reached\n                !_this.maxItemsReached,\n                // 3. check item comes from autocomplete or onlyFromAutocomplete is false\n                ((isFromAutocomplete) || !_this.onlyFromAutocomplete)\n            ];\n            return assertions.filter(Boolean).length === assertions.length;\n        };\n        /**\n         * @name onPasteCallback\n         * @param data\n         */\n        _this.onPasteCallback = function (data) { return __awaiter(_this, void 0, void 0, function () {\n            var getText, text, requests, resetInput;\n            var _this = this;\n            return __generator(this, function (_a) {\n                getText = function () {\n                    var isIE = Boolean(window.clipboardData);\n                    var clipboardData = isIE ? (window.clipboardData) : data.clipboardData;\n                    var type = isIE ? 'Text' : 'text/plain';\n                    return clipboardData === null ? '' : clipboardData.getData(type) || '';\n                };\n                text = getText();\n                requests = text\n                    .split(this.pasteSplitPattern)\n                    .map(function (item) {\n                    var tag = _this.createTag(item);\n                    _this.setInputValue(tag[_this.displayBy]);\n                    return _this.onAddingRequested(false, tag);\n                });\n                resetInput = function () { return setTimeout(function () { return _this.setInputValue(''); }, 50); };\n                Promise.all(requests).then(function () {\n                    _this.onPaste.emit(text);\n                    resetInput();\n                })\n                    .catch(resetInput);\n                return [2 /*return*/];\n            });\n        }); };\n        return _this;\n    }\n    Object.defineProperty(TagInputComponent.prototype, \"inputText\", {\n        /**\n         * @name inputText\n         */\n        get: function () {\n            return this.inputTextValue;\n        },\n        /**\n         * @name inputText\n         * @param text\n         */\n        set: function (text) {\n            this.inputTextValue = text;\n            this.inputTextChange.emit(text);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TagInputComponent.prototype, \"tabindexAttr\", {\n        /**\n         * @desc removes the tab index if it is set - it will be passed through to the input\n         * @name tabindexAttr\n         */\n        get: function () {\n            return this.tabindex !== '' ? '-1' : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @name ngAfterViewInit\n     */\n    TagInputComponent.prototype.ngAfterViewInit = function () {\n        // set up listeners\n        var _this = this;\n        this.setUpKeypressListeners();\n        this.setupSeparatorKeysListener();\n        this.setUpInputKeydownListeners();\n        if (this.onTextChange.observers.length) {\n            this.setUpTextChangeSubscriber();\n        }\n        // if clear on blur is set to true, subscribe to the event and clear the text's form\n        if (this.clearOnBlur || this.addOnBlur) {\n            this.setUpOnBlurSubscriber();\n        }\n        // if addOnPaste is set to true, register the handler and add items\n        if (this.addOnPaste) {\n            this.setUpOnPasteListener();\n        }\n        var statusChanges$ = this.inputForm.form.statusChanges;\n        statusChanges$.pipe(filter(function (status) { return status !== 'PENDING'; })).subscribe(function () {\n            _this.errors = _this.inputForm.getErrorMessages(_this.errorMessages);\n        });\n        this.isProgressBarVisible$ = statusChanges$.pipe(map(function (status) {\n            return status === 'PENDING' || _this.isLoading;\n        }));\n        // if hideForm is set to true, remove the input\n        if (this.hideForm) {\n            this.inputForm.destroy();\n        }\n    };\n    /**\n     * @name ngOnInit\n     */\n    TagInputComponent.prototype.ngOnInit = function () {\n        // if the number of items specified in the model is > of the value of maxItems\n        // degrade gracefully and let the max number of items to be the number of items in the model\n        // though, warn the user.\n        var hasReachedMaxItems = this.maxItems !== undefined &&\n            this.items &&\n            this.items.length > this.maxItems;\n        if (hasReachedMaxItems) {\n            this.maxItems = this.items.length;\n            console.warn(MAX_ITEMS_WARNING);\n        }\n        // Setting editable to false to fix problem with tags in IE still being editable when\n        // onlyFromAutocomplete is true\n        this.editable = this.onlyFromAutocomplete ? false : this.editable;\n        this.setAnimationMetadata();\n    };\n    /**\n     * @name onRemoveRequested\n     * @param tag\n     * @param index\n     */\n    TagInputComponent.prototype.onRemoveRequested = function (tag, index) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            var subscribeFn = function (model) {\n                _this.removeItem(model, index);\n                resolve(tag);\n            };\n            _this.onRemoving ?\n                _this.onRemoving(tag)\n                    .pipe(first())\n                    .subscribe(subscribeFn) : subscribeFn(tag);\n        });\n    };\n    /**\n     * @name onAddingRequested\n     * @param fromAutocomplete {boolean}\n     * @param tag {TagModel}\n     * @param index? {number}\n     * @param giveupFocus? {boolean}\n     */\n    TagInputComponent.prototype.onAddingRequested = function (fromAutocomplete, tag, index, giveupFocus) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var subscribeFn = function (model) {\n                return _this\n                    .addItem(fromAutocomplete, model, index, giveupFocus)\n                    .then(resolve)\n                    .catch(reject);\n            };\n            return _this.onAdding ?\n                _this.onAdding(tag)\n                    .pipe(first())\n                    .subscribe(subscribeFn, reject) : subscribeFn(tag);\n        });\n    };\n    /**\n     * @name selectItem\n     * @desc selects item passed as parameter as the selected tag\n     * @param item\n     * @param emit\n     */\n    TagInputComponent.prototype.selectItem = function (item, emit) {\n        if (emit === void 0) { emit = true; }\n        var isReadonly = item && typeof item !== 'string' && item.readonly;\n        if (isReadonly || this.selectedTag === item) {\n            return;\n        }\n        this.selectedTag = item;\n        if (emit) {\n            this.onSelect.emit(item);\n        }\n    };\n    /**\n     * @name fireEvents\n     * @desc goes through the list of the events for a given eventName, and fires each of them\n     * @param eventName\n     * @param $event\n     */\n    TagInputComponent.prototype.fireEvents = function (eventName, $event) {\n        var _this = this;\n        this.listeners[eventName].forEach(function (listener) { return listener.call(_this, $event); });\n    };\n    /**\n     * @name handleKeydown\n     * @desc handles action when the user hits a keyboard key\n     * @param data\n     */\n    TagInputComponent.prototype.handleKeydown = function (data) {\n        var event = data.event;\n        var key = event.keyCode || event.which;\n        var shiftKey = event.shiftKey || false;\n        switch (KEY_PRESS_ACTIONS[key]) {\n            case ACTIONS_KEYS.DELETE:\n                if (this.selectedTag && this.removable) {\n                    var index = this.items.indexOf(this.selectedTag);\n                    this.onRemoveRequested(this.selectedTag, index);\n                }\n                break;\n            case ACTIONS_KEYS.SWITCH_PREV:\n                this.moveToTag(data.model, PREV);\n                break;\n            case ACTIONS_KEYS.SWITCH_NEXT:\n                this.moveToTag(data.model, NEXT);\n                break;\n            case ACTIONS_KEYS.TAB:\n                if (shiftKey) {\n                    if (this.isFirstTag(data.model)) {\n                        return;\n                    }\n                    this.moveToTag(data.model, PREV);\n                }\n                else {\n                    if (this.isLastTag(data.model) && (this.disable || this.maxItemsReached)) {\n                        return;\n                    }\n                    this.moveToTag(data.model, NEXT);\n                }\n                break;\n            default:\n                return;\n        }\n        // prevent default behaviour\n        event.preventDefault();\n    };\n    TagInputComponent.prototype.onFormSubmit = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.onAddingRequested(false, this.formValue)];\n                    case 1:\n                        _b.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        _a = _b.sent();\n                        return [2 /*return*/];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @name setInputValue\n     * @param value\n     */\n    TagInputComponent.prototype.setInputValue = function (value, emitEvent) {\n        if (emitEvent === void 0) { emitEvent = true; }\n        var control = this.getControl();\n        // update form value with the transformed item\n        control.setValue(value, { emitEvent: emitEvent });\n    };\n    /**\n     * @name getControl\n     */\n    TagInputComponent.prototype.getControl = function () {\n        return this.inputForm.value;\n    };\n    /**\n     * @name focus\n     * @param applyFocus\n     * @param displayAutocomplete\n     */\n    TagInputComponent.prototype.focus = function (applyFocus, displayAutocomplete) {\n        if (applyFocus === void 0) { applyFocus = false; }\n        if (this.dragProvider.getState('dragging')) {\n            return;\n        }\n        this.selectItem(undefined, false);\n        if (applyFocus) {\n            this.inputForm.focus();\n            this.onFocus.emit(this.formValue);\n        }\n    };\n    /**\n     * @name blur\n     */\n    TagInputComponent.prototype.blur = function () {\n        this.onTouched();\n        this.onBlur.emit(this.formValue);\n    };\n    /**\n     * @name hasErrors\n     */\n    TagInputComponent.prototype.hasErrors = function () {\n        return !!this.inputForm && this.inputForm.hasErrors();\n    };\n    /**\n     * @name isInputFocused\n     */\n    TagInputComponent.prototype.isInputFocused = function () {\n        return !!this.inputForm && this.inputForm.isInputFocused();\n    };\n    /**\n     * - this is the one way I found to tell if the template has been passed and it is not\n     * the template for the menu item\n     * @name hasCustomTemplate\n     */\n    TagInputComponent.prototype.hasCustomTemplate = function () {\n        var template = this.templates ? this.templates.first : undefined;\n        var menuTemplate = this.dropdown && this.dropdown.templates ?\n            this.dropdown.templates.first : undefined;\n        return Boolean(template && template !== menuTemplate);\n    };\n    Object.defineProperty(TagInputComponent.prototype, \"maxItemsReached\", {\n        /**\n         * @name maxItemsReached\n         */\n        get: function () {\n            return this.maxItems !== undefined &&\n                this.items.length >= this.maxItems;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TagInputComponent.prototype, \"formValue\", {\n        /**\n         * @name formValue\n         */\n        get: function () {\n            var form = this.inputForm.value;\n            return form ? form.value : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**3\n     * @name onDragStarted\n     * @param event\n     * @param index\n     */\n    TagInputComponent.prototype.onDragStarted = function (event, tag, index) {\n        event.stopPropagation();\n        var item = { zone: this.dragZone, tag: tag, index: index };\n        this.dragProvider.setSender(this);\n        this.dragProvider.setDraggedItem(event, item);\n        this.dragProvider.setState({ dragging: true, index: index });\n    };\n    /**\n     * @name onDragOver\n     * @param event\n     */\n    TagInputComponent.prototype.onDragOver = function (event, index) {\n        this.dragProvider.setState({ dropping: true });\n        this.dragProvider.setReceiver(this);\n        event.preventDefault();\n    };\n    /**\n     * @name onTagDropped\n     * @param event\n     * @param index\n     */\n    TagInputComponent.prototype.onTagDropped = function (event, index) {\n        var item = this.dragProvider.getDraggedItem(event);\n        if (!item || item.zone !== this.dragZone) {\n            return;\n        }\n        this.dragProvider.onTagDropped(item.tag, item.index, index);\n        event.preventDefault();\n        event.stopPropagation();\n    };\n    /**\n     * @name isDropping\n     */\n    TagInputComponent.prototype.isDropping = function () {\n        var isReceiver = this.dragProvider.receiver === this;\n        var isDropping = this.dragProvider.getState('dropping');\n        return Boolean(isReceiver && isDropping);\n    };\n    /**\n     * @name onTagBlurred\n     * @param changedElement {TagModel}\n     * @param index {number}\n     */\n    TagInputComponent.prototype.onTagBlurred = function (changedElement, index) {\n        this.items[index] = changedElement;\n        this.blur();\n    };\n    /**\n     * @name trackBy\n     * @param items\n     */\n    TagInputComponent.prototype.trackBy = function (index, item) {\n        return item[this.identifyBy];\n    };\n    /**\n     * @name updateEditedTag\n     * @param tag\n     */\n    TagInputComponent.prototype.updateEditedTag = function (_a) {\n        var tag = _a.tag, index = _a.index;\n        this.onTagEdited.emit(tag);\n    };\n    /**\n     * @name moveToTag\n     * @param item\n     * @param direction\n     */\n    TagInputComponent.prototype.moveToTag = function (item, direction) {\n        var isLast = this.isLastTag(item);\n        var isFirst = this.isFirstTag(item);\n        var stopSwitch = (direction === NEXT && isLast) ||\n            (direction === PREV && isFirst);\n        if (stopSwitch) {\n            this.focus(true);\n            return;\n        }\n        var offset = direction === NEXT ? 1 : -1;\n        var index = this.getTagIndex(item) + offset;\n        var tag = this.getTagAtIndex(index);\n        return tag.select.call(tag);\n    };\n    /**\n     * @name isFirstTag\n     * @param item {TagModel}\n     */\n    TagInputComponent.prototype.isFirstTag = function (item) {\n        return this.tags.first.model === item;\n    };\n    /**\n     * @name isLastTag\n     * @param item {TagModel}\n     */\n    TagInputComponent.prototype.isLastTag = function (item) {\n        return this.tags.last.model === item;\n    };\n    /**\n     * @name getTagIndex\n     * @param item\n     */\n    TagInputComponent.prototype.getTagIndex = function (item) {\n        var tags = this.tags.toArray();\n        return tags.findIndex(function (tag) { return tag.model === item; });\n    };\n    /**\n     * @name getTagAtIndex\n     * @param index\n     */\n    TagInputComponent.prototype.getTagAtIndex = function (index) {\n        var tags = this.tags.toArray();\n        return tags[index];\n    };\n    /**\n     * @name removeItem\n     * @desc removes an item from the array of the model\n     * @param tag {TagModel}\n     * @param index {number}\n     */\n    TagInputComponent.prototype.removeItem = function (tag, index) {\n        this.items = this.getItemsWithout(index);\n        // if the removed tag was selected, set it as undefined\n        if (this.selectedTag === tag) {\n            this.selectItem(undefined, false);\n        }\n        // focus input\n        this.focus(true, false);\n        // emit remove event\n        this.onRemove.emit(tag);\n    };\n    /**\n     * @name addItem\n     * @desc adds the current text model to the items array\n     * @param fromAutocomplete {boolean}\n     * @param item {TagModel}\n     * @param index? {number}\n     * @param giveupFocus? {boolean}\n     */\n    TagInputComponent.prototype.addItem = function (fromAutocomplete, item, index, giveupFocus) {\n        var _this = this;\n        if (fromAutocomplete === void 0) { fromAutocomplete = false; }\n        var display = this.getItemDisplay(item);\n        var tag = this.createTag(item);\n        if (fromAutocomplete) {\n            this.setInputValue(this.getItemValue(item, true));\n        }\n        return new Promise(function (resolve, reject) {\n            /**\n             * @name reset\n             */\n            var reset = function () {\n                // reset control and focus input\n                _this.setInputValue('');\n                if (giveupFocus) {\n                    _this.focus(false, false);\n                }\n                else {\n                    // focus input\n                    _this.focus(true, false);\n                }\n                resolve(display);\n            };\n            var appendItem = function () {\n                _this.appendTag(tag, index);\n                // emit event\n                _this.onAdd.emit(tag);\n                if (!_this.dropdown) {\n                    return;\n                }\n                _this.dropdown.hide();\n                if (_this.dropdown.showDropdownIfEmpty) {\n                    _this.dropdown.show();\n                }\n            };\n            var status = _this.inputForm.form.status;\n            var isTagValid = _this.isTagValid(tag, fromAutocomplete);\n            var onValidationError = function () {\n                _this.onValidationError.emit(tag);\n                return reject();\n            };\n            if (status === 'VALID' && isTagValid) {\n                appendItem();\n                return reset();\n            }\n            if (status === 'INVALID' || !isTagValid) {\n                reset();\n                return onValidationError();\n            }\n            if (status === 'PENDING') {\n                var statusUpdate$ = _this.inputForm.form.statusChanges;\n                return statusUpdate$\n                    .pipe(filter(function (statusUpdate) { return statusUpdate !== 'PENDING'; }), first())\n                    .subscribe(function (statusUpdate) {\n                    if (statusUpdate === 'VALID' && isTagValid) {\n                        appendItem();\n                        return reset();\n                    }\n                    else {\n                        reset();\n                        return onValidationError();\n                    }\n                });\n            }\n        });\n    };\n    /**\n     * @name setupSeparatorKeysListener\n     */\n    TagInputComponent.prototype.setupSeparatorKeysListener = function () {\n        var _this = this;\n        var useSeparatorKeys = this.separatorKeyCodes.length > 0 || this.separatorKeys.length > 0;\n        var listener = function ($event) {\n            var hasKeyCode = _this.separatorKeyCodes.indexOf($event.keyCode) >= 0;\n            var hasKey = _this.separatorKeys.indexOf($event.key) >= 0;\n            // the keyCode of keydown event is 229 when IME is processing the key event.\n            var isIMEProcessing = $event.keyCode === 229;\n            if (hasKeyCode || (hasKey && !isIMEProcessing)) {\n                $event.preventDefault();\n                _this.onAddingRequested(false, _this.formValue)\n                    .catch(function () { });\n            }\n        };\n        listen.call(this, KEYDOWN, listener, useSeparatorKeys);\n    };\n    /**\n     * @name setUpKeypressListeners\n     */\n    TagInputComponent.prototype.setUpKeypressListeners = function () {\n        var _this = this;\n        var listener = function ($event) {\n            var isCorrectKey = $event.keyCode === 37 || $event.keyCode === 8;\n            if (isCorrectKey &&\n                !_this.formValue &&\n                _this.items.length) {\n                _this.tags.last.select.call(_this.tags.last);\n            }\n        };\n        // setting up the keypress listeners\n        listen.call(this, KEYDOWN, listener);\n    };\n    /**\n     * @name setUpKeydownListeners\n     */\n    TagInputComponent.prototype.setUpInputKeydownListeners = function () {\n        var _this = this;\n        this.inputForm.onKeydown.subscribe(function (event) {\n            if (event.key === 'Backspace' && _this.formValue.trim() === '') {\n                event.preventDefault();\n            }\n        });\n    };\n    /**\n     * @name setUpOnPasteListener\n     */\n    TagInputComponent.prototype.setUpOnPasteListener = function () {\n        var _this = this;\n        var input = this.inputForm.input.nativeElement;\n        // attach listener to input\n        this.renderer.listen(input, 'paste', function (event) {\n            _this.onPasteCallback(event);\n            event.preventDefault();\n            return true;\n        });\n    };\n    /**\n     * @name setUpTextChangeSubscriber\n     */\n    TagInputComponent.prototype.setUpTextChangeSubscriber = function () {\n        var _this = this;\n        this.inputForm.form\n            .valueChanges\n            .pipe(debounceTime(this.onTextChangeDebounce))\n            .subscribe(function (value) {\n            _this.onTextChange.emit(value.item);\n        });\n    };\n    /**\n     * @name setUpOnBlurSubscriber\n     */\n    TagInputComponent.prototype.setUpOnBlurSubscriber = function () {\n        var _this = this;\n        var filterFn = function () {\n            var isVisible = _this.dropdown && _this.dropdown.isVisible;\n            return !isVisible && !!_this.formValue;\n        };\n        this.inputForm\n            .onBlur\n            .pipe(debounceTime(100), filter(filterFn))\n            .subscribe(function () {\n            var reset = function () { return _this.setInputValue(''); };\n            if (_this.addOnBlur) {\n                return _this\n                    .onAddingRequested(false, _this.formValue, undefined, true)\n                    .then(reset)\n                    .catch(reset);\n            }\n            reset();\n        });\n    };\n    /**\n     * @name findDupe\n     * @param tag\n     * @param isFromAutocomplete\n     */\n    TagInputComponent.prototype.findDupe = function (tag, isFromAutocomplete) {\n        var _this = this;\n        var identifyBy = isFromAutocomplete ? this.dropdown.identifyBy : this.identifyBy;\n        var id = tag[identifyBy];\n        return this.items.find(function (item) { return _this.getItemValue(item) === id; });\n    };\n    /**\n     * @name setAnimationMetadata\n     */\n    TagInputComponent.prototype.setAnimationMetadata = function () {\n        this.animationMetadata = {\n            value: 'in',\n            params: __assign({}, this.animationDuration)\n        };\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], TagInputComponent.prototype, \"separatorKeys\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], TagInputComponent.prototype, \"separatorKeyCodes\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], TagInputComponent.prototype, \"placeholder\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], TagInputComponent.prototype, \"secondaryPlaceholder\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], TagInputComponent.prototype, \"maxItems\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], TagInputComponent.prototype, \"validators\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Array)\n    ], TagInputComponent.prototype, \"asyncValidators\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"onlyFromAutocomplete\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"errorMessages\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], TagInputComponent.prototype, \"theme\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"onTextChangeDebounce\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"inputId\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], TagInputComponent.prototype, \"inputClass\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TagInputComponent.prototype, \"clearOnBlur\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TagInputComponent.prototype, \"hideForm\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TagInputComponent.prototype, \"addOnBlur\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TagInputComponent.prototype, \"addOnPaste\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"pasteSplitPattern\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"blinkIfDupe\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"removable\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TagInputComponent.prototype, \"editable\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"allowDupes\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"modelAsStrings\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"trimTags\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], TagInputComponent.prototype, \"inputText\", null);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TagInputComponent.prototype, \"ripple\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], TagInputComponent.prototype, \"tabindex\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TagInputComponent.prototype, \"disable\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], TagInputComponent.prototype, \"dragZone\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"onRemoving\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"onAdding\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"animationDuration\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"onAdd\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"onRemove\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"onSelect\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"onFocus\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"onBlur\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"onTextChange\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"onPaste\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"onValidationError\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], TagInputComponent.prototype, \"onTagEdited\", void 0);\n    __decorate([\n        ContentChild(TagInputDropdown, { static: false }),\n        __metadata(\"design:type\", TagInputDropdown)\n    ], TagInputComponent.prototype, \"dropdown\", void 0);\n    __decorate([\n        ContentChildren(TemplateRef, { descendants: false }),\n        __metadata(\"design:type\", QueryList)\n    ], TagInputComponent.prototype, \"templates\", void 0);\n    __decorate([\n        ViewChild(TagInputForm, { static: false }),\n        __metadata(\"design:type\", TagInputForm)\n    ], TagInputComponent.prototype, \"inputForm\", void 0);\n    __decorate([\n        ViewChildren(TagComponent),\n        __metadata(\"design:type\", QueryList)\n    ], TagInputComponent.prototype, \"tags\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], TagInputComponent.prototype, \"inputTextChange\", void 0);\n    __decorate([\n        HostBinding('attr.tabindex'),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [])\n    ], TagInputComponent.prototype, \"tabindexAttr\", null);\n    TagInputComponent = __decorate([\n        Component({\n            selector: 'tag-input',\n            providers: [CUSTOM_ACCESSOR],\n            template: \"<div\\n    [ngClass]=\\\"theme\\\"\\n    class=\\\"ng2-tag-input\\\"\\n    (click)=\\\"focus(true, false)\\\"\\n    [attr.tabindex]=\\\"-1\\\"\\n    (drop)=\\\"dragZone ? onTagDropped($event, undefined) : undefined\\\"\\n    (dragenter)=\\\"dragZone ? onDragOver($event) : undefined\\\"\\n    (dragover)=\\\"dragZone ? onDragOver($event) : undefined\\\"\\n    (dragend)=\\\"dragZone ? dragProvider.onDragEnd() : undefined\\\"\\n    [class.ng2-tag-input--dropping]=\\\"isDropping()\\\"\\n    [class.ng2-tag-input--disabled]=\\\"disable\\\"\\n    [class.ng2-tag-input--loading]=\\\"isLoading\\\"\\n    [class.ng2-tag-input--invalid]=\\\"hasErrors()\\\"\\n    [class.ng2-tag-input--focused]=\\\"isInputFocused()\\\"\\n>\\n\\n    <!-- TAGS -->\\n    <div class=\\\"ng2-tags-container\\\">\\n        <tag\\n            *ngFor=\\\"let item of items; let i = index; trackBy: trackBy\\\"\\n            (onSelect)=\\\"selectItem(item)\\\"\\n            (onRemove)=\\\"onRemoveRequested(item, i)\\\"\\n            (onKeyDown)=\\\"handleKeydown($event)\\\"\\n            (onTagEdited)=\\\"updateEditedTag($event)\\\"\\n            (onBlur)=\\\"onTagBlurred($event, i)\\\"\\n            draggable=\\\"{{ editable }}\\\"\\n            (dragstart)=\\\"dragZone ? onDragStarted($event, item, i) : undefined\\\"\\n            (drop)=\\\"dragZone ? onTagDropped($event, i) : undefined\\\"\\n            (dragenter)=\\\"dragZone ? onDragOver($event) : undefined\\\"\\n            (dragover)=\\\"dragZone ? onDragOver($event, i) : undefined\\\"\\n            (dragleave)=\\\"dragZone ? dragProvider.onDragEnd() : undefined\\\"\\n            [canAddTag]=\\\"isTagValid\\\"\\n            [attr.tabindex]=\\\"0\\\"\\n            [disabled]=\\\"disable\\\"\\n            [@animation]=\\\"animationMetadata\\\"\\n            [hasRipple]=\\\"ripple\\\"\\n            [index]=\\\"i\\\"\\n            [removable]=\\\"removable\\\"\\n            [editable]=\\\"editable\\\"\\n            [displayBy]=\\\"displayBy\\\"\\n            [identifyBy]=\\\"identifyBy\\\"\\n            [template]=\\\"!!hasCustomTemplate() ? templates.first : undefined\\\"\\n            [draggable]=\\\"dragZone\\\"\\n            [model]=\\\"item\\\"\\n        >\\n        </tag>\\n\\n        <tag-input-form\\n            (onSubmit)=\\\"onFormSubmit()\\\"\\n            (onBlur)=\\\"blur()\\\"\\n            (click)=\\\"dropdown ? dropdown.show() : undefined\\\"\\n            (onKeydown)=\\\"fireEvents('keydown', $event)\\\"\\n            (onKeyup)=\\\"fireEvents('keyup', $event)\\\"\\n            [(inputText)]=\\\"inputText\\\"\\n            [disabled]=\\\"disable\\\"\\n            [validators]=\\\"validators\\\"\\n            [asyncValidators]=\\\"asyncValidators\\\"\\n            [hidden]=\\\"maxItemsReached\\\"\\n            [placeholder]=\\\"items.length ? placeholder : secondaryPlaceholder\\\"\\n            [inputClass]=\\\"inputClass\\\"\\n            [inputId]=\\\"inputId\\\"\\n            [tabindex]=\\\"tabindex\\\"\\n        >\\n        </tag-input-form>\\n    </div>\\n\\n    <div\\n        class=\\\"progress-bar\\\"\\n        *ngIf=\\\"isProgressBarVisible$ | async\\\"\\n    ></div>\\n</div>\\n\\n<!-- ERRORS -->\\n<div\\n    *ngIf=\\\"hasErrors()\\\"\\n    [ngClass]=\\\"theme\\\"\\n    class=\\\"error-messages\\\"\\n>\\n    <p\\n        *ngFor=\\\"let error of errors\\\"\\n        class=\\\"error-message\\\"\\n    >\\n        <span>{{ error }}</span>\\n    </p>\\n</div>\\n<ng-content></ng-content>\",\n            animations: animations,\n            styles: [\".dark tag:focus{box-shadow:0 0 0 1px #323232}.ng2-tag-input.bootstrap3-info{background-color:#fff;display:inline-block;color:#555;vertical-align:middle;max-width:100%;height:42px;line-height:44px}.ng2-tag-input.bootstrap3-info input{border:none;box-shadow:none;outline:0;background-color:transparent;padding:0 6px;margin:0;width:auto;max-width:inherit}.ng2-tag-input.bootstrap3-info .form-control input::-moz-placeholder{color:#777;opacity:1}.ng2-tag-input.bootstrap3-info .form-control input:-ms-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info .form-control input::-webkit-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info input:focus{border:none;box-shadow:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--focused{box-shadow:inset 0 1px 1px rgba(0,0,0,.4);border:1px solid #ccc}.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;transition:.25s;padding:.25rem 0;min-height:32px;cursor:text;border-bottom:2px solid #efefef}.ng2-tag-input:focus{outline:0}.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.ng2-tag-input.ng2-tag-input--focused{border-bottom:2px solid #2196f3}.ng2-tag-input.ng2-tag-input--invalid{border-bottom:2px solid #f44336}.ng2-tag-input.ng2-tag-input--loading{border:none}.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.ng2-tag-input form{margin:.1em 0}.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.minimal.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:1px solid transparent}.minimal.ng2-tag-input:focus{outline:0}.minimal.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.minimal.ng2-tag-input.ng2-tag-input--loading{border:none}.minimal.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.minimal.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.dark.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #444}.dark.ng2-tag-input:focus{outline:0}.dark.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.dark.ng2-tag-input.ng2-tag-input--loading{border:none}.dark.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.dark.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.bootstrap.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #efefef}.bootstrap.ng2-tag-input:focus{outline:0}.bootstrap.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.bootstrap.ng2-tag-input.ng2-tag-input--focused{border-bottom:2px solid #0275d8}.bootstrap.ng2-tag-input.ng2-tag-input--invalid{border-bottom:2px solid #d9534f}.bootstrap.ng2-tag-input.ng2-tag-input--loading{border:none}.bootstrap.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.bootstrap.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.bootstrap3-info.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;padding:4px;cursor:text;box-shadow:inset 0 1px 1px rgba(0,0,0,.075);border-radius:4px}.bootstrap3-info.ng2-tag-input:focus{outline:0}.bootstrap3-info.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid{box-shadow:inset 0 1px 1px #d9534f;border-bottom:1px solid #d9534f}.bootstrap3-info.ng2-tag-input.ng2-tag-input--loading{border:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.bootstrap3-info.ng2-tag-input form{margin:.1em 0}.bootstrap3-info.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.error-message{font-size:.8em;color:#f44336;margin:.5em 0 0}.bootstrap .error-message{color:#d9534f}.progress-bar,.progress-bar:before{height:2px;width:100%;margin:0}.progress-bar{background-color:#2196f3;display:flex;position:absolute;bottom:0}.progress-bar:before{background-color:#82c4f8;content:\\\"\\\";-webkit-animation:2s cubic-bezier(.4,0,.2,1) infinite running-progress;animation:2s cubic-bezier(.4,0,.2,1) infinite running-progress}@-webkit-keyframes running-progress{0%{margin-left:0;margin-right:100%}50%{margin-left:25%;margin-right:0}100%{margin-left:100%;margin-right:0}}@keyframes running-progress{0%{margin-left:0;margin-right:100%}50%{margin-left:25%;margin-right:0}100%{margin-left:100%;margin-right:0}}tag{display:flex;flex-direction:row;flex-wrap:wrap;font-family:Roboto,\\\"Helvetica Neue\\\",sans-serif;font-weight:400;font-size:1em;letter-spacing:.05rem;color:#444;border-radius:16px;transition:.3s;margin:.1rem .3rem .1rem 0;padding:.08rem .45rem;height:32px;line-height:34px;background:#efefef;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}tag:not(.readonly):not(.tag--editing):focus{background:#2196f3;color:#fff;box-shadow:0 2px 3px 1px #d4d1d1}tag:not(.readonly):not(.tag--editing):active{background:#0d8aee;color:#fff;box-shadow:0 2px 3px 1px #d4d1d1}tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#e2e2e2;color:initial;box-shadow:0 2px 3px 1px #d4d1d1}tag.readonly{cursor:default}tag.readonly:focus,tag:focus{outline:0}tag.tag--editing{background-color:#fff;border:1px solid #ccc;cursor:text}.minimal tag{display:flex;flex-direction:row;flex-wrap:wrap;border-radius:0;background:#f9f9f9;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}.minimal tag:not(.readonly):not(.tag--editing):active,.minimal tag:not(.readonly):not(.tag--editing):focus{background:#d0d0d0;color:initial}.minimal tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#ececec}.minimal tag.readonly{cursor:default}.minimal tag.readonly:focus,.minimal tag:focus{outline:0}.minimal tag.tag--editing{cursor:text}.dark tag{display:flex;flex-direction:row;flex-wrap:wrap;color:#f9f9f9;border-radius:3px;background:#444;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}.dark tag:not(.readonly):not(.tag--editing):focus{background:#efefef;color:#444}.dark tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#2b2b2b;color:#f9f9f9}.dark tag.readonly{cursor:default}.dark tag.readonly:focus,.dark tag:focus{outline:0}.dark tag.tag--editing{cursor:text}.bootstrap tag{display:flex;flex-direction:row;flex-wrap:wrap;color:#f9f9f9;border-radius:.25rem;background:#0275d8;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}.bootstrap tag:not(.readonly):not(.tag--editing):active,.bootstrap tag:not(.readonly):not(.tag--editing):focus{background:#025aa5}.bootstrap tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#0267bf;color:#f9f9f9}.bootstrap tag.readonly{cursor:default}.bootstrap tag.readonly:focus,.bootstrap tag:focus{outline:0}.bootstrap tag.tag--editing{cursor:text}.bootstrap3-info tag{display:flex;flex-direction:row;flex-wrap:wrap;font-family:inherit;font-weight:400;font-size:95%;color:#fff;border-radius:.25em;background:#5bc0de;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative;padding:.25em .6em;text-align:center;white-space:nowrap}.bootstrap3-info tag:not(.readonly):not(.tag--editing):active,.bootstrap3-info tag:not(.readonly):not(.tag--editing):focus{background:#28a1c5}.bootstrap3-info tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#46b8da;color:#fff}.bootstrap3-info tag.readonly{cursor:default}.bootstrap3-info tag.readonly:focus,.bootstrap3-info tag:focus{outline:0}.bootstrap3-info tag.tag--editing{cursor:text}:host{display:block}\"]\n        }),\n        __metadata(\"design:paramtypes\", [Renderer2,\n            DragProvider])\n    ], TagInputComponent);\n    return TagInputComponent;\n}(TagInputAccessor));\n\nvar DeleteIconComponent = /** @class */ (function () {\n    function DeleteIconComponent() {\n    }\n    DeleteIconComponent = __decorate([\n        Component({\n            selector: 'delete-icon',\n            template: \"<span>\\n    <svg\\n        height=\\\"16px\\\"\\n        viewBox=\\\"0 0 32 32\\\"\\n        width=\\\"16px\\\"\\n    >\\n        <path\\n            d=\\\"M17.459,16.014l8.239-8.194c0.395-0.391,0.395-1.024,0-1.414c-0.394-0.391-1.034-0.391-1.428,0  l-8.232,8.187L7.73,6.284c-0.394-0.395-1.034-0.395-1.428,0c-0.394,0.396-0.394,1.037,0,1.432l8.302,8.303l-8.332,8.286  c-0.394,0.391-0.394,1.024,0,1.414c0.394,0.391,1.034,0.391,1.428,0l8.325-8.279l8.275,8.276c0.394,0.395,1.034,0.395,1.428,0  c0.394-0.396,0.394-1.037,0-1.432L17.459,16.014z\\\"\\n            fill=\\\"#121313\\\"\\n        />\\n    </svg>\\n</span>\",\n            styles: [\".dark tag:focus{box-shadow:0 0 0 1px #323232}.ng2-tag-input.bootstrap3-info{background-color:#fff;display:inline-block;color:#555;vertical-align:middle;max-width:100%;height:42px;line-height:44px}.ng2-tag-input.bootstrap3-info input{border:none;box-shadow:none;outline:0;background-color:transparent;padding:0 6px;margin:0;width:auto;max-width:inherit}.ng2-tag-input.bootstrap3-info .form-control input::-moz-placeholder{color:#777;opacity:1}.ng2-tag-input.bootstrap3-info .form-control input:-ms-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info .form-control input::-webkit-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info input:focus{border:none;box-shadow:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--focused{box-shadow:inset 0 1px 1px rgba(0,0,0,.4);border:1px solid #ccc}.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;transition:.25s;padding:.25rem 0;min-height:32px;cursor:text;border-bottom:2px solid #efefef}.ng2-tag-input:focus{outline:0}.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.ng2-tag-input.ng2-tag-input--focused{border-bottom:2px solid #2196f3}.ng2-tag-input.ng2-tag-input--invalid{border-bottom:2px solid #f44336}.ng2-tag-input.ng2-tag-input--loading{border:none}.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.ng2-tag-input form{margin:.1em 0}.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.minimal.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:1px solid transparent}.minimal.ng2-tag-input:focus{outline:0}.minimal.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.minimal.ng2-tag-input.ng2-tag-input--loading{border:none}.minimal.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.minimal.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.dark.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #444}.dark.ng2-tag-input:focus{outline:0}.dark.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.dark.ng2-tag-input.ng2-tag-input--loading{border:none}.dark.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.dark.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.bootstrap.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #efefef}.bootstrap.ng2-tag-input:focus{outline:0}.bootstrap.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.bootstrap.ng2-tag-input.ng2-tag-input--focused{border-bottom:2px solid #0275d8}.bootstrap.ng2-tag-input.ng2-tag-input--invalid{border-bottom:2px solid #d9534f}.bootstrap.ng2-tag-input.ng2-tag-input--loading{border:none}.bootstrap.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.bootstrap.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.bootstrap3-info.ng2-tag-input{display:block;flex-direction:row;flex-wrap:wrap;position:relative;padding:4px;cursor:text;box-shadow:inset 0 1px 1px rgba(0,0,0,.075);border-radius:4px}.bootstrap3-info.ng2-tag-input:focus{outline:0}.bootstrap3-info.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid{box-shadow:inset 0 1px 1px #d9534f;border-bottom:1px solid #d9534f}.bootstrap3-info.ng2-tag-input.ng2-tag-input--loading{border:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.bootstrap3-info.ng2-tag-input form{margin:.1em 0}.bootstrap3-info.ng2-tag-input .ng2-tags-container{flex-wrap:wrap;display:flex}.error-message{font-size:.8em;color:#f44336;margin:.5em 0 0}.bootstrap .error-message{color:#d9534f}:host(delete-icon){width:20px;height:16px;transition:.15s;display:inline-block;text-align:right}:host(delete-icon) path{fill:#444}:host(delete-icon) svg{vertical-align:bottom;height:34px}:host(delete-icon):hover{-webkit-transform:scale(1.5) translateY(-3px);transform:scale(1.5) translateY(-3px)}:host-context(.dark){text-align:right}:host-context(.dark) path{fill:#fff}:host-context(.dark) svg{vertical-align:bottom;height:34px}:host-context(.minimal){text-align:right}:host-context(.minimal) path{fill:#444}:host-context(.minimal) svg{vertical-align:bottom;height:34px}:host-context(.bootstrap){text-align:right}:host-context(.bootstrap) path{fill:#fff}:host-context(.bootstrap) svg{vertical-align:bottom;height:34px}:host-context(tag:active) path,:host-context(tag:focus) path{fill:#fff}:host-context(.darktag:active) path,:host-context(.darktag:focus) path{fill:#000}:host-context(.minimaltag:active) path,:host-context(.minimaltag:focus) path{fill:#000}:host-context(.bootstraptag:active) path,:host-context(.bootstraptag:focus) path{fill:#fff}:host-context(.bootstrap3-info){height:inherit}:host-context(.bootstrap3-info) path{fill:#fff}\"]\n        })\n    ], DeleteIconComponent);\n    return DeleteIconComponent;\n}());\n\nvar optionsProvider = new OptionsProvider();\nvar TagInputModule = /** @class */ (function () {\n    function TagInputModule() {\n    }\n    /**\n     * @name withDefaults\n     * @param options {Options}\n     */\n    TagInputModule.withDefaults = function (options) {\n        optionsProvider.setOptions(options);\n    };\n    TagInputModule = __decorate([\n        NgModule({\n            imports: [\n                CommonModule,\n                ReactiveFormsModule,\n                FormsModule,\n                Ng2DropdownModule\n            ],\n            declarations: [\n                TagInputComponent,\n                DeleteIconComponent,\n                TagInputForm,\n                TagComponent,\n                HighlightPipe,\n                TagInputDropdown,\n                TagRipple\n            ],\n            exports: [\n                TagInputComponent,\n                DeleteIconComponent,\n                TagInputForm,\n                TagComponent,\n                HighlightPipe,\n                TagInputDropdown,\n                TagRipple\n            ],\n            providers: [\n                DragProvider,\n                { provide: COMPOSITION_BUFFER_MODE, useValue: false },\n            ]\n        })\n    ], TagInputModule);\n    return TagInputModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DeleteIconComponent, TagComponent, TagInputComponent, TagInputDropdown, TagInputForm, TagInputModule, TagRipple, TagInputAccessor as ɵa, animations as ɵb, DragProvider as ɵc, HighlightPipe as ɵd };\n"]}