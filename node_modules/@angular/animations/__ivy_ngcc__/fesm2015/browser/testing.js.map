{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/animations/fesm2015/browser/testing.js"],"names":[],"mappings":"AAAA","file":"testing.js","sourcesContent":["/**\n * @license Angular v9.0.1\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { NoopAnimationPlayer, AUTO_STYLE } from '@angular/animations';\nimport { ɵvalidateStyleProperty, ɵmatchesElement, ɵcontainsElement, ɵinvokeQuery, ɵallowPreviousPlayerStylesMerge } from '@angular/animations/browser';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/animations/browser/testing/src/mock_animation_driver.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n */\nclass MockAnimationDriver {\n    /**\n     * @param {?} prop\n     * @return {?}\n     */\n    validateStyleProperty(prop) { return ɵvalidateStyleProperty(prop); }\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @return {?}\n     */\n    matchesElement(element, selector) {\n        return ɵmatchesElement(element, selector);\n    }\n    /**\n     * @param {?} elm1\n     * @param {?} elm2\n     * @return {?}\n     */\n    containsElement(elm1, elm2) { return ɵcontainsElement(elm1, elm2); }\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @param {?} multi\n     * @return {?}\n     */\n    query(element, selector, multi) {\n        return ɵinvokeQuery(element, selector, multi);\n    }\n    /**\n     * @param {?} element\n     * @param {?} prop\n     * @param {?=} defaultValue\n     * @return {?}\n     */\n    computeStyle(element, prop, defaultValue) {\n        return defaultValue || '';\n    }\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @return {?}\n     */\n    animate(element, keyframes, duration, delay, easing, previousPlayers = []) {\n        /** @type {?} */\n        const player = new MockAnimationPlayer(element, keyframes, duration, delay, easing, previousPlayers);\n        MockAnimationDriver.log.push((/** @type {?} */ (player)));\n        return player;\n    }\n}\nMockAnimationDriver.log = [];\nif (false) {\n    /** @type {?} */\n    MockAnimationDriver.log;\n}\n/**\n * \\@publicApi\n */\nclass MockAnimationPlayer extends NoopAnimationPlayer {\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?} previousPlayers\n     */\n    constructor(element, keyframes, duration, delay, easing, previousPlayers) {\n        super(duration, delay);\n        this.element = element;\n        this.keyframes = keyframes;\n        this.duration = duration;\n        this.delay = delay;\n        this.easing = easing;\n        this.previousPlayers = previousPlayers;\n        this.__finished = false;\n        this.__started = false;\n        this.previousStyles = {};\n        this._onInitFns = [];\n        this.currentSnapshot = {};\n        if (ɵallowPreviousPlayerStylesMerge(duration, delay)) {\n            previousPlayers.forEach((/**\n             * @param {?} player\n             * @return {?}\n             */\n            player => {\n                if (player instanceof MockAnimationPlayer) {\n                    /** @type {?} */\n                    const styles = player.currentSnapshot;\n                    Object.keys(styles).forEach((/**\n                     * @param {?} prop\n                     * @return {?}\n                     */\n                    prop => this.previousStyles[prop] = styles[prop]));\n                }\n            }));\n        }\n    }\n    /* @internal */\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onInit(fn) { this._onInitFns.push(fn); }\n    /* @internal */\n    /**\n     * @return {?}\n     */\n    init() {\n        super.init();\n        this._onInitFns.forEach((/**\n         * @param {?} fn\n         * @return {?}\n         */\n        fn => fn()));\n        this._onInitFns = [];\n    }\n    /**\n     * @return {?}\n     */\n    finish() {\n        super.finish();\n        this.__finished = true;\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        super.destroy();\n        this.__finished = true;\n    }\n    /* @internal */\n    /**\n     * @return {?}\n     */\n    triggerMicrotask() { }\n    /**\n     * @return {?}\n     */\n    play() {\n        super.play();\n        this.__started = true;\n    }\n    /**\n     * @return {?}\n     */\n    hasStarted() { return this.__started; }\n    /**\n     * @return {?}\n     */\n    beforeDestroy() {\n        /** @type {?} */\n        const captures = {};\n        Object.keys(this.previousStyles).forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        prop => {\n            captures[prop] = this.previousStyles[prop];\n        }));\n        if (this.hasStarted()) {\n            // when assembling the captured styles, it's important that\n            // we build the keyframe styles in the following order:\n            // {other styles within keyframes, ... previousStyles }\n            this.keyframes.forEach((/**\n             * @param {?} kf\n             * @return {?}\n             */\n            kf => {\n                Object.keys(kf).forEach((/**\n                 * @param {?} prop\n                 * @return {?}\n                 */\n                prop => {\n                    if (prop != 'offset') {\n                        captures[prop] = this.__finished ? kf[prop] : AUTO_STYLE;\n                    }\n                }));\n            }));\n        }\n        this.currentSnapshot = captures;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MockAnimationPlayer.prototype.__finished;\n    /**\n     * @type {?}\n     * @private\n     */\n    MockAnimationPlayer.prototype.__started;\n    /** @type {?} */\n    MockAnimationPlayer.prototype.previousStyles;\n    /**\n     * @type {?}\n     * @private\n     */\n    MockAnimationPlayer.prototype._onInitFns;\n    /** @type {?} */\n    MockAnimationPlayer.prototype.currentSnapshot;\n    /** @type {?} */\n    MockAnimationPlayer.prototype.element;\n    /** @type {?} */\n    MockAnimationPlayer.prototype.keyframes;\n    /** @type {?} */\n    MockAnimationPlayer.prototype.duration;\n    /** @type {?} */\n    MockAnimationPlayer.prototype.delay;\n    /** @type {?} */\n    MockAnimationPlayer.prototype.easing;\n    /** @type {?} */\n    MockAnimationPlayer.prototype.previousPlayers;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/animations/browser/testing/src/testing.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/animations/browser/testing/public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/animations/browser/testing/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MockAnimationDriver, MockAnimationPlayer };\n"]}