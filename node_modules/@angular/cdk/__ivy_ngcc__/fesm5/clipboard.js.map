{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/cdk/fesm5/clipboard.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAqFM,AAGA;;;;;;;;;;;;;kCAKkK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6ElK,AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAYA;;;;;;;;;;;;;KAaD;;;;;;;;;;;gDAOC","file":"clipboard.js","sourcesContent":["import { DOCUMENT, CommonModule } from '@angular/common';\nimport { Injectable, Inject, ɵɵdefineInjectable, ɵɵinject, InjectionToken, EventEmitter, Directive, NgZone, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nvar PendingCopy = /** @class */ (function () {\n    function PendingCopy(text, _document) {\n        this._document = _document;\n        var textarea = this._textarea = this._document.createElement('textarea');\n        var styles = textarea.style;\n        // Hide the element for display and accessibility. Set an\n        // absolute position so the page layout isn't affected.\n        styles.opacity = '0';\n        styles.position = 'absolute';\n        styles.left = styles.top = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        this._document.body.appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    PendingCopy.prototype.copy = function () {\n        var textarea = this._textarea;\n        var successful = false;\n        try { // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                var currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus && currentFocus instanceof HTMLElement) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch (_a) {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    };\n    /** Cleans up DOM changes used to perform the copy operation. */\n    PendingCopy.prototype.destroy = function () {\n        var textarea = this._textarea;\n        if (textarea) {\n            if (textarea.parentNode) {\n                textarea.parentNode.removeChild(textarea);\n            }\n            this._textarea = undefined;\n        }\n    };\n    return PendingCopy;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service for copying text to the clipboard.\n */\nvar Clipboard = /** @class */ (function () {\n    function Clipboard(document) {\n        this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    Clipboard.prototype.copy = function (text) {\n        var pendingCopy = this.beginCopy(text);\n        var successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    };\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    Clipboard.prototype.beginCopy = function (text) {\n        return new PendingCopy(text, this._document);\n    };\n    Clipboard.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */\n    Clipboard.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    Clipboard.ɵprov = ɵɵdefineInjectable({ factory: function Clipboard_Factory() { return new Clipboard(ɵɵinject(DOCUMENT)); }, token: Clipboard, providedIn: \"root\" });\n    return Clipboard;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nvar CKD_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CKD_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nvar CdkCopyToClipboard = /** @class */ (function () {\n    function CdkCopyToClipboard(_clipboard, \n    /**\n     * @deprecated _ngZone parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    _ngZone, config) {\n        this._clipboard = _clipboard;\n        this._ngZone = _ngZone;\n        /** Content to be copied. */\n        this.text = '';\n        /**\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\n         * the browser needs time to fill an intermediate textarea element and copy the content.\n         */\n        this.attempts = 1;\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         */\n        this.copied = new EventEmitter();\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         * @deprecated Use `cdkCopyToClipboardCopied` instead.\n         * @breaking-change 10.0.0\n         */\n        this._deprecatedCopied = this.copied;\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /** Copies the current text to the clipboard. */\n    CdkCopyToClipboard.prototype.copy = function (attempts) {\n        var _this = this;\n        if (attempts === void 0) { attempts = this.attempts; }\n        if (attempts > 1) {\n            var remainingAttempts_1 = attempts;\n            var pending_1 = this._clipboard.beginCopy(this.text);\n            var attempt_1 = function () {\n                var successful = pending_1.copy();\n                if (!successful && --remainingAttempts_1) {\n                    // @breaking-change 10.0.0 Remove null check for `_ngZone`.\n                    if (_this._ngZone) {\n                        _this._ngZone.runOutsideAngular(function () { return setTimeout(attempt_1); });\n                    }\n                    else {\n                        setTimeout(attempt_1);\n                    }\n                }\n                else {\n                    pending_1.destroy();\n                    _this.copied.emit(successful);\n                }\n            };\n            attempt_1();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    };\n    CdkCopyToClipboard.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkCopyToClipboard]',\n                    host: {\n                        '(click)': 'copy()',\n                    }\n                },] }\n    ];\n    /** @nocollapse */\n    CdkCopyToClipboard.ctorParameters = function () { return [\n        { type: Clipboard },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CKD_COPY_TO_CLIPBOARD_CONFIG,] }] }\n    ]; };\n    CdkCopyToClipboard.propDecorators = {\n        text: [{ type: Input, args: ['cdkCopyToClipboard',] }],\n        attempts: [{ type: Input, args: ['cdkCopyToClipboardAttempts',] }],\n        copied: [{ type: Output, args: ['cdkCopyToClipboardCopied',] }],\n        _deprecatedCopied: [{ type: Output, args: ['copied',] }]\n    };\n    return CdkCopyToClipboard;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ClipboardModule = /** @class */ (function () {\n    function ClipboardModule() {\n    }\n    ClipboardModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [CdkCopyToClipboard],\n                    imports: [CommonModule],\n                    exports: [CdkCopyToClipboard],\n                },] }\n    ];\n    return ClipboardModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CKD_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n"]}