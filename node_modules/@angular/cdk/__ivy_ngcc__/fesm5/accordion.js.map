{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/cdk/fesm5/accordion.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuCM,AAMA;;;;;;;;;;;;;;oBAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+HA,AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAcA;;;;;;;;;;;;;KAaD;;;;;;;;;;;;gDAMC","file":"accordion.js","sourcesContent":["import { Directive, Input, EventEmitter, Optional, SkipSelf, ChangeDetectorRef, Output, NgModule } from '@angular/core';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion. */\nvar nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nvar CdkAccordion = /** @class */ (function () {\n    function CdkAccordion() {\n        /** Emits when the state of the accordion changes */\n        this._stateChanges = new Subject();\n        /** Stream that emits true/false when openAll/closeAll is triggered. */\n        this._openCloseAllActions = new Subject();\n        /** A readonly id value to use for unique selection coordination. */\n        this.id = \"cdk-accordion-\" + nextId++;\n        this._multi = false;\n    }\n    Object.defineProperty(CdkAccordion.prototype, \"multi\", {\n        /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n        get: function () { return this._multi; },\n        set: function (multi) { this._multi = coerceBooleanProperty(multi); },\n        enumerable: true,\n        configurable: true\n    });\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\n    CdkAccordion.prototype.openAll = function () {\n        this._openCloseAll(true);\n    };\n    /** Closes all enabled accordion items in an accordion where multi is enabled. */\n    CdkAccordion.prototype.closeAll = function () {\n        this._openCloseAll(false);\n    };\n    CdkAccordion.prototype.ngOnChanges = function (changes) {\n        this._stateChanges.next(changes);\n    };\n    CdkAccordion.prototype.ngOnDestroy = function () {\n        this._stateChanges.complete();\n    };\n    CdkAccordion.prototype._openCloseAll = function (expanded) {\n        if (this.multi) {\n            this._openCloseAllActions.next(expanded);\n        }\n    };\n    CdkAccordion.decorators = [\n        { type: Directive, args: [{\n                    selector: 'cdk-accordion, [cdkAccordion]',\n                    exportAs: 'cdkAccordion',\n                },] }\n    ];\n    CdkAccordion.propDecorators = {\n        multi: [{ type: Input }]\n    };\n    return CdkAccordion;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion item. */\nvar nextId$1 = 0;\nvar ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nvar CdkAccordionItem = /** @class */ (function () {\n    function CdkAccordionItem(accordion, _changeDetectorRef, _expansionDispatcher) {\n        var _this = this;\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /** Subscription to openAll/closeAll events. */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /** Event emitted every time the AccordionItem is closed. */\n        this.closed = new EventEmitter();\n        /** Event emitted every time the AccordionItem is opened. */\n        this.opened = new EventEmitter();\n        /** Event emitted when the AccordionItem is destroyed. */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * @docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /** The unique AccordionItem id. */\n        this.id = \"cdk-accordion-child-\" + nextId$1++;\n        this._expanded = false;\n        this._disabled = false;\n        /** Unregister function for _expansionDispatcher. */\n        this._removeUniqueSelectionListener = function () { };\n        this._removeUniqueSelectionListener =\n            _expansionDispatcher.listen(function (id, accordionId) {\n                if (_this.accordion && !_this.accordion.multi &&\n                    _this.accordion.id === accordionId && _this.id !== id) {\n                    _this.expanded = false;\n                }\n            });\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    Object.defineProperty(CdkAccordionItem.prototype, \"expanded\", {\n        /** Whether the AccordionItem is expanded. */\n        get: function () { return this._expanded; },\n        set: function (expanded) {\n            expanded = coerceBooleanProperty(expanded);\n            // Only emit events and update the internal value if the value changes.\n            if (this._expanded !== expanded) {\n                this._expanded = expanded;\n                this.expandedChange.emit(expanded);\n                if (expanded) {\n                    this.opened.emit();\n                    /**\n                     * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                     * the name value is the id of the accordion.\n                     */\n                    var accordionId = this.accordion ? this.accordion.id : this.id;\n                    this._expansionDispatcher.notify(this.id, accordionId);\n                }\n                else {\n                    this.closed.emit();\n                }\n                // Ensures that the animation will run when the value is set outside of an `@Input`.\n                // This includes cases like the open, close and toggle methods.\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkAccordionItem.prototype, \"disabled\", {\n        /** Whether the AccordionItem is disabled. */\n        get: function () { return this._disabled; },\n        set: function (disabled) { this._disabled = coerceBooleanProperty(disabled); },\n        enumerable: true,\n        configurable: true\n    });\n    /** Emits an event for the accordion item being destroyed. */\n    CdkAccordionItem.prototype.ngOnDestroy = function () {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    };\n    /** Toggles the expanded state of the accordion item. */\n    CdkAccordionItem.prototype.toggle = function () {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    };\n    /** Sets the expanded state of the accordion item to false. */\n    CdkAccordionItem.prototype.close = function () {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    };\n    /** Sets the expanded state of the accordion item to true. */\n    CdkAccordionItem.prototype.open = function () {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    };\n    CdkAccordionItem.prototype._subscribeToOpenCloseAllActions = function () {\n        var _this = this;\n        return this.accordion._openCloseAllActions.subscribe(function (expanded) {\n            // Only change expanded state if item is enabled\n            if (!_this.disabled) {\n                _this.expanded = expanded;\n            }\n        });\n    };\n    CdkAccordionItem.decorators = [\n        { type: Directive, args: [{\n                    selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                    exportAs: 'cdkAccordionItem',\n                    providers: [\n                        // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n                        // to the same accordion.\n                        { provide: CdkAccordion, useValue: ɵ0 },\n                    ],\n                },] }\n    ];\n    /** @nocollapse */\n    CdkAccordionItem.ctorParameters = function () { return [\n        { type: CdkAccordion, decorators: [{ type: Optional }, { type: SkipSelf }] },\n        { type: ChangeDetectorRef },\n        { type: UniqueSelectionDispatcher }\n    ]; };\n    CdkAccordionItem.propDecorators = {\n        closed: [{ type: Output }],\n        opened: [{ type: Output }],\n        destroyed: [{ type: Output }],\n        expandedChange: [{ type: Output }],\n        expanded: [{ type: Input }],\n        disabled: [{ type: Input }]\n    };\n    return CdkAccordionItem;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar CdkAccordionModule = /** @class */ (function () {\n    function CdkAccordionModule() {\n    }\n    CdkAccordionModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [CdkAccordion, CdkAccordionItem],\n                    declarations: [CdkAccordion, CdkAccordionItem],\n                },] }\n    ];\n    return CdkAccordionModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkAccordion, CdkAccordionItem, CdkAccordionModule };\n"]}