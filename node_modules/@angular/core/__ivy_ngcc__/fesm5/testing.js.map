{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/core/fesm5/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAikGAklEkG;;;;;;0BAG1E","file":"testing.js","sourcesContent":["/**\n * @license Angular v9.0.1\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { getDebugNode, RendererFactory2, InjectionToken, ɵstringify, ɵReflectionCapabilities, Directive, Component, Pipe, NgModule, ɵgetInjectableDef, ɵNG_COMP_DEF, ɵRender3NgModuleRef, LOCALE_ID, ɵDEFAULT_LOCALE_ID, ɵsetLocaleId, ApplicationInitStatus, ɵRender3ComponentFactory, ɵcompileComponent, ɵNG_DIR_DEF, ɵcompileDirective, ɵNG_PIPE_DEF, ɵcompilePipe, ɵtransitiveScopesFor, ɵpatchComponentDefWithScope, ɵNG_INJ_DEF, ɵNG_MOD_DEF, ɵcompileNgModuleDefs, NgZone, Compiler, COMPILER_OPTIONS, ɵNgModuleFactory, ModuleWithComponentFactories, Injector, InjectFlags, ɵresetCompiledComponents, ɵflushModuleScopingQueueAsMuchAsPossible, Injectable, ɵclearOverrides, ɵoverrideComponentView, ɵINJECTOR_SCOPE, Optional, SkipSelf, ɵoverrideProvider, ɵivyEnabled } from '@angular/core';\nimport { __read, __extends, __spread, __awaiter, __generator, __values, __assign, __decorate } from 'tslib';\nimport { ResourceLoader } from '@angular/compiler';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _global = (typeof window === 'undefined' ? global : window);\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n *\n */\nfunction asyncFallback(fn) {\n    // If we're running using the Jasmine test framework, adapt to call the 'done'\n    // function when asynchronous activity is finished.\n    if (_global.jasmine) {\n        // Not using an arrow function to preserve context passed from call site\n        return function (done) {\n            if (!done) {\n                // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n                // fake it here and assume sync.\n                done = function () { };\n                done.fail = function (e) { throw e; };\n            }\n            runInTestZone(fn, this, done, function (err) {\n                if (typeof err === 'string') {\n                    return done.fail(new Error(err));\n                }\n                else {\n                    done.fail(err);\n                }\n            });\n        };\n    }\n    // Otherwise, return a promise which will resolve when asynchronous activity\n    // is finished. This will be correctly consumed by the Mocha framework with\n    // it('...', async(myFn)); or can be used in a custom framework.\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n        var _this = this;\n        return new Promise(function (finishCallback, failCallback) {\n            runInTestZone(fn, _this, finishCallback, failCallback);\n        });\n    };\n}\nfunction runInTestZone(fn, context, finishCallback, failCallback) {\n    var currentZone = Zone.current;\n    var AsyncTestZoneSpec = Zone['AsyncTestZoneSpec'];\n    if (AsyncTestZoneSpec === undefined) {\n        throw new Error('AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n            'Please make sure that your environment includes zone.js/dist/async-test.js');\n    }\n    var ProxyZoneSpec = Zone['ProxyZoneSpec'];\n    if (ProxyZoneSpec === undefined) {\n        throw new Error('ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n            'Please make sure that your environment includes zone.js/dist/proxy.js');\n    }\n    var proxyZoneSpec = ProxyZoneSpec.get();\n    ProxyZoneSpec.assertPresent();\n    // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n    // If we do it in ProxyZone then we will get to infinite recursion.\n    var proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n    var previousDelegate = proxyZoneSpec.getDelegate();\n    proxyZone.parent.run(function () {\n        var testZoneSpec = new AsyncTestZoneSpec(function () {\n            // Need to restore the original zone.\n            currentZone.run(function () {\n                if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                    // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                    proxyZoneSpec.setDelegate(previousDelegate);\n                }\n                finishCallback();\n            });\n        }, function (error) {\n            // Need to restore the original zone.\n            currentZone.run(function () {\n                if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                    // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                    proxyZoneSpec.setDelegate(previousDelegate);\n                }\n                failCallback(error);\n            });\n        }, 'test');\n        proxyZoneSpec.setDelegate(testZoneSpec);\n    });\n    return Zone.current.runGuarded(fn, context);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n * @publicApi\n */\nfunction async(fn) {\n    var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n    if (!_Zone) {\n        return function () {\n            return Promise.reject('Zone is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/zone.js');\n        };\n    }\n    var asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n    if (typeof asyncTest === 'function') {\n        return asyncTest(fn);\n    }\n    // not using new version of zone.js\n    // TODO @JiaLiPassion, remove this after all library updated to\n    // newest version of zone.js(0.8.25)\n    return asyncFallback(fn);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Fixture for debugging and testing a component.\n *\n * @publicApi\n */\nvar ComponentFixture = /** @class */ (function () {\n    function ComponentFixture(componentRef, ngZone, _autoDetect) {\n        var _this = this;\n        this.componentRef = componentRef;\n        this.ngZone = ngZone;\n        this._autoDetect = _autoDetect;\n        this._isStable = true;\n        this._isDestroyed = false;\n        this._resolve = null;\n        this._promise = null;\n        this._onUnstableSubscription = null;\n        this._onStableSubscription = null;\n        this._onMicrotaskEmptySubscription = null;\n        this._onErrorSubscription = null;\n        this.changeDetectorRef = componentRef.changeDetectorRef;\n        this.elementRef = componentRef.location;\n        this.debugElement = getDebugNode(this.elementRef.nativeElement);\n        this.componentInstance = componentRef.instance;\n        this.nativeElement = this.elementRef.nativeElement;\n        this.componentRef = componentRef;\n        this.ngZone = ngZone;\n        if (ngZone) {\n            // Create subscriptions outside the NgZone so that the callbacks run oustide\n            // of NgZone.\n            ngZone.runOutsideAngular(function () {\n                _this._onUnstableSubscription =\n                    ngZone.onUnstable.subscribe({ next: function () { _this._isStable = false; } });\n                _this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n                    next: function () {\n                        if (_this._autoDetect) {\n                            // Do a change detection run with checkNoChanges set to true to check\n                            // there are no changes on the second run.\n                            _this.detectChanges(true);\n                        }\n                    }\n                });\n                _this._onStableSubscription = ngZone.onStable.subscribe({\n                    next: function () {\n                        _this._isStable = true;\n                        // Check whether there is a pending whenStable() completer to resolve.\n                        if (_this._promise !== null) {\n                            // If so check whether there are no pending macrotasks before resolving.\n                            // Do this check in the next tick so that ngZone gets a chance to update the state of\n                            // pending macrotasks.\n                            scheduleMicroTask(function () {\n                                if (!ngZone.hasPendingMacrotasks) {\n                                    if (_this._promise !== null) {\n                                        _this._resolve(true);\n                                        _this._resolve = null;\n                                        _this._promise = null;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                _this._onErrorSubscription =\n                    ngZone.onError.subscribe({ next: function (error) { throw error; } });\n            });\n        }\n    }\n    ComponentFixture.prototype._tick = function (checkNoChanges) {\n        this.changeDetectorRef.detectChanges();\n        if (checkNoChanges) {\n            this.checkNoChanges();\n        }\n    };\n    /**\n     * Trigger a change detection cycle for the component.\n     */\n    ComponentFixture.prototype.detectChanges = function (checkNoChanges) {\n        var _this = this;\n        if (checkNoChanges === void 0) { checkNoChanges = true; }\n        if (this.ngZone != null) {\n            // Run the change detection inside the NgZone so that any async tasks as part of the change\n            // detection are captured by the zone and can be waited for in isStable.\n            this.ngZone.run(function () { _this._tick(checkNoChanges); });\n        }\n        else {\n            // Running without zone. Just do the change detection.\n            this._tick(checkNoChanges);\n        }\n    };\n    /**\n     * Do a change detection run to make sure there were no changes.\n     */\n    ComponentFixture.prototype.checkNoChanges = function () { this.changeDetectorRef.checkNoChanges(); };\n    /**\n     * Set whether the fixture should autodetect changes.\n     *\n     * Also runs detectChanges once so that any existing change is detected.\n     */\n    ComponentFixture.prototype.autoDetectChanges = function (autoDetect) {\n        if (autoDetect === void 0) { autoDetect = true; }\n        if (this.ngZone == null) {\n            throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n        }\n        this._autoDetect = autoDetect;\n        this.detectChanges();\n    };\n    /**\n     * Return whether the fixture is currently stable or has async tasks that have not been completed\n     * yet.\n     */\n    ComponentFixture.prototype.isStable = function () { return this._isStable && !this.ngZone.hasPendingMacrotasks; };\n    /**\n     * Get a promise that resolves when the fixture is stable.\n     *\n     * This can be used to resume testing after events have triggered asynchronous activity or\n     * asynchronous change detection.\n     */\n    ComponentFixture.prototype.whenStable = function () {\n        var _this = this;\n        if (this.isStable()) {\n            return Promise.resolve(false);\n        }\n        else if (this._promise !== null) {\n            return this._promise;\n        }\n        else {\n            this._promise = new Promise(function (res) { _this._resolve = res; });\n            return this._promise;\n        }\n    };\n    ComponentFixture.prototype._getRenderer = function () {\n        if (this._renderer === undefined) {\n            this._renderer = this.componentRef.injector.get(RendererFactory2, null);\n        }\n        return this._renderer;\n    };\n    /**\n      * Get a promise that resolves when the ui state is stable following animations.\n      */\n    ComponentFixture.prototype.whenRenderingDone = function () {\n        var renderer = this._getRenderer();\n        if (renderer && renderer.whenRenderingDone) {\n            return renderer.whenRenderingDone();\n        }\n        return this.whenStable();\n    };\n    /**\n     * Trigger component destruction.\n     */\n    ComponentFixture.prototype.destroy = function () {\n        if (!this._isDestroyed) {\n            this.componentRef.destroy();\n            if (this._onUnstableSubscription != null) {\n                this._onUnstableSubscription.unsubscribe();\n                this._onUnstableSubscription = null;\n            }\n            if (this._onStableSubscription != null) {\n                this._onStableSubscription.unsubscribe();\n                this._onStableSubscription = null;\n            }\n            if (this._onMicrotaskEmptySubscription != null) {\n                this._onMicrotaskEmptySubscription.unsubscribe();\n                this._onMicrotaskEmptySubscription = null;\n            }\n            if (this._onErrorSubscription != null) {\n                this._onErrorSubscription.unsubscribe();\n                this._onErrorSubscription = null;\n            }\n            this._isDestroyed = true;\n        }\n    };\n    return ComponentFixture;\n}());\nfunction scheduleMicroTask(fn) {\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * fakeAsync has been moved to zone.js\n * this file is for fallback in case old version of zone.js is used\n */\nvar _Zone = typeof Zone !== 'undefined' ? Zone : null;\nvar FakeAsyncTestZoneSpec = _Zone && _Zone['FakeAsyncTestZoneSpec'];\nvar ProxyZoneSpec = _Zone && _Zone['ProxyZoneSpec'];\nvar _fakeAsyncTestZoneSpec = null;\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @publicApi\n */\nfunction resetFakeAsyncZoneFallback() {\n    _fakeAsyncTestZoneSpec = null;\n    // in node.js testing we may not have ProxyZoneSpec in which case there is nothing to reset.\n    ProxyZoneSpec && ProxyZoneSpec.assertPresent().resetDelegate();\n}\nvar _inFakeAsyncCall = false;\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns The function wrapped to be executed in the fakeAsync zone\n *\n * @publicApi\n */\nfunction fakeAsyncFallback(fn) {\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var proxyZoneSpec = ProxyZoneSpec.assertPresent();\n        if (_inFakeAsyncCall) {\n            throw new Error('fakeAsync() calls can not be nested');\n        }\n        _inFakeAsyncCall = true;\n        try {\n            if (!_fakeAsyncTestZoneSpec) {\n                if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n                    throw new Error('fakeAsync() calls can not be nested');\n                }\n                _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n            }\n            var res = void 0;\n            var lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n            proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n            try {\n                res = fn.apply(this, args);\n                flushMicrotasksFallback();\n            }\n            finally {\n                proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n            }\n            if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n                throw new Error(_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length + \" \" +\n                    \"periodic timer(s) still in the queue.\");\n            }\n            if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n                throw new Error(_fakeAsyncTestZoneSpec.pendingTimers.length + \" timer(s) still in the queue.\");\n            }\n            return res;\n        }\n        finally {\n            _inFakeAsyncCall = false;\n            resetFakeAsyncZoneFallback();\n        }\n    };\n}\nfunction _getFakeAsyncZoneSpec() {\n    if (_fakeAsyncTestZoneSpec == null) {\n        throw new Error('The code should be running in the fakeAsync zone to call this function');\n    }\n    return _fakeAsyncTestZoneSpec;\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @publicApi\n */\nfunction tickFallback(millis) {\n    if (millis === void 0) { millis = 0; }\n    _getFakeAsyncZoneSpec().tick(millis);\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * @param maxTurns\n * @returns The simulated time elapsed, in millis.\n *\n * @publicApi\n */\nfunction flushFallback(maxTurns) {\n    return _getFakeAsyncZoneSpec().flush(maxTurns);\n}\n/**\n * Discard all remaining periodic tasks.\n *\n * @publicApi\n */\nfunction discardPeriodicTasksFallback() {\n    var zoneSpec = _getFakeAsyncZoneSpec();\n    zoneSpec.pendingPeriodicTimers.length = 0;\n}\n/**\n * Flush any pending microtasks.\n *\n * @publicApi\n */\nfunction flushMicrotasksFallback() {\n    _getFakeAsyncZoneSpec().flushMicrotasks();\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _Zone$1 = typeof Zone !== 'undefined' ? Zone : null;\nvar fakeAsyncTestModule = _Zone$1 && _Zone$1[_Zone$1.__symbol__('fakeAsyncTest')];\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @publicApi\n */\nfunction resetFakeAsyncZone() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.resetFakeAsyncZone();\n    }\n    else {\n        return resetFakeAsyncZoneFallback();\n    }\n}\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns The function wrapped to be executed in the fakeAsync zone\n *\n * @publicApi\n */\nfunction fakeAsync(fn) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.fakeAsync(fn);\n    }\n    else {\n        return fakeAsyncFallback(fn);\n    }\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @publicApi\n */\nfunction tick(millis) {\n    if (millis === void 0) { millis = 0; }\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.tick(millis);\n    }\n    else {\n        return tickFallback(millis);\n    }\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * @param maxTurns\n * @returns The simulated time elapsed, in millis.\n *\n * @publicApi\n */\nfunction flush(maxTurns) {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.flush(maxTurns);\n    }\n    else {\n        return flushFallback(maxTurns);\n    }\n}\n/**\n * Discard all remaining periodic tasks.\n *\n * @publicApi\n */\nfunction discardPeriodicTasks() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.discardPeriodicTasks();\n    }\n    else {\n        discardPeriodicTasksFallback();\n    }\n}\n/**\n * Flush any pending microtasks.\n *\n * @publicApi\n */\nfunction flushMicrotasks() {\n    if (fakeAsyncTestModule) {\n        return fakeAsyncTestModule.flushMicrotasks();\n    }\n    else {\n        return flushMicrotasksFallback();\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n */\nvar AsyncTestCompleter = /** @class */ (function () {\n    function AsyncTestCompleter() {\n        var _this = this;\n        this._promise = new Promise(function (res, rej) {\n            _this._resolve = res;\n            _this._reject = rej;\n        });\n    }\n    AsyncTestCompleter.prototype.done = function (value) { this._resolve(value); };\n    AsyncTestCompleter.prototype.fail = function (error, stackTrace) { this._reject(error); };\n    Object.defineProperty(AsyncTestCompleter.prototype, \"promise\", {\n        get: function () { return this._promise; },\n        enumerable: true,\n        configurable: true\n    });\n    return AsyncTestCompleter;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @publicApi\n */\nvar TestComponentRenderer = /** @class */ (function () {\n    function TestComponentRenderer() {\n    }\n    TestComponentRenderer.prototype.insertRootElement = function (rootElementId) { };\n    return TestComponentRenderer;\n}());\n/**\n * @publicApi\n */\nvar ComponentFixtureAutoDetect = new InjectionToken('ComponentFixtureAutoDetect');\n/**\n * @publicApi\n */\nvar ComponentFixtureNoNgZone = new InjectionToken('ComponentFixtureNoNgZone');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n */\nfunction resolveComponentResources(resourceResolver) {\n    // Store all promises which are fetching the resources.\n    var componentResolved = [];\n    // Cache so that we don't fetch the same resource more than once.\n    var urlMap = new Map();\n    function cachedResourceResolve(url) {\n        var promise = urlMap.get(url);\n        if (!promise) {\n            var resp = resourceResolver(url);\n            urlMap.set(url, promise = resp.then(unwrapResponse));\n        }\n        return promise;\n    }\n    componentResourceResolutionQueue.forEach(function (component, type) {\n        var promises = [];\n        if (component.templateUrl) {\n            promises.push(cachedResourceResolve(component.templateUrl).then(function (template) {\n                component.template = template;\n            }));\n        }\n        var styleUrls = component.styleUrls;\n        var styles = component.styles || (component.styles = []);\n        var styleOffset = component.styles.length;\n        styleUrls && styleUrls.forEach(function (styleUrl, index) {\n            styles.push(''); // pre-allocate array.\n            promises.push(cachedResourceResolve(styleUrl).then(function (style) {\n                styles[styleOffset + index] = style;\n                styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                if (styleUrls.length == 0) {\n                    component.styleUrls = undefined;\n                }\n            }));\n        });\n        var fullyResolved = Promise.all(promises).then(function () { return componentDefResolved(type); });\n        componentResolved.push(fullyResolved);\n    });\n    clearResolutionOfComponentResourcesQueue();\n    return Promise.all(componentResolved).then(function () { return undefined; });\n}\nvar componentResourceResolutionQueue = new Map();\n// Track when existing ɵcmp for a Type is waiting on resources.\nvar componentDefPendingResolution = new Set();\nfunction maybeQueueResolutionOfComponentResources(type, metadata) {\n    if (componentNeedsResolution(metadata)) {\n        componentResourceResolutionQueue.set(type, metadata);\n        componentDefPendingResolution.add(type);\n    }\n}\nfunction isComponentDefPendingResolution(type) {\n    return componentDefPendingResolution.has(type);\n}\nfunction componentNeedsResolution(component) {\n    return !!((component.templateUrl && !component.hasOwnProperty('template')) ||\n        component.styleUrls && component.styleUrls.length);\n}\nfunction clearResolutionOfComponentResourcesQueue() {\n    var old = componentResourceResolutionQueue;\n    componentResourceResolutionQueue = new Map();\n    return old;\n}\nfunction restoreComponentResolutionQueue(queue) {\n    componentDefPendingResolution.clear();\n    queue.forEach(function (_, type) { return componentDefPendingResolution.add(type); });\n    componentResourceResolutionQueue = queue;\n}\nfunction isComponentResourceResolutionQueueEmpty() {\n    return componentResourceResolutionQueue.size === 0;\n}\nfunction unwrapResponse(response) {\n    return typeof response == 'string' ? response : response.text();\n}\nfunction componentDefResolved(type) {\n    componentDefPendingResolution.delete(type);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextReferenceId = 0;\nvar MetadataOverrider = /** @class */ (function () {\n    function MetadataOverrider() {\n        this._references = new Map();\n    }\n    /**\n     * Creates a new instance for the given metadata class\n     * based on an old instance and overrides.\n     */\n    MetadataOverrider.prototype.overrideMetadata = function (metadataClass, oldMetadata, override) {\n        var props = {};\n        if (oldMetadata) {\n            _valueProps(oldMetadata).forEach(function (prop) { return props[prop] = oldMetadata[prop]; });\n        }\n        if (override.set) {\n            if (override.remove || override.add) {\n                throw new Error(\"Cannot set and add/remove \" + ɵstringify(metadataClass) + \" at the same time!\");\n            }\n            setMetadata(props, override.set);\n        }\n        if (override.remove) {\n            removeMetadata(props, override.remove, this._references);\n        }\n        if (override.add) {\n            addMetadata(props, override.add);\n        }\n        return new metadataClass(props);\n    };\n    return MetadataOverrider;\n}());\nfunction removeMetadata(metadata, remove, references) {\n    var removeObjects = new Set();\n    var _loop_1 = function (prop) {\n        var removeValue = remove[prop];\n        if (Array.isArray(removeValue)) {\n            removeValue.forEach(function (value) { removeObjects.add(_propHashKey(prop, value, references)); });\n        }\n        else {\n            removeObjects.add(_propHashKey(prop, removeValue, references));\n        }\n    };\n    for (var prop in remove) {\n        _loop_1(prop);\n    }\n    var _loop_2 = function (prop) {\n        var propValue = metadata[prop];\n        if (Array.isArray(propValue)) {\n            metadata[prop] = propValue.filter(function (value) { return !removeObjects.has(_propHashKey(prop, value, references)); });\n        }\n        else {\n            if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n                metadata[prop] = undefined;\n            }\n        }\n    };\n    for (var prop in metadata) {\n        _loop_2(prop);\n    }\n}\nfunction addMetadata(metadata, add) {\n    for (var prop in add) {\n        var addValue = add[prop];\n        var propValue = metadata[prop];\n        if (propValue != null && Array.isArray(propValue)) {\n            metadata[prop] = propValue.concat(addValue);\n        }\n        else {\n            metadata[prop] = addValue;\n        }\n    }\n}\nfunction setMetadata(metadata, set) {\n    for (var prop in set) {\n        metadata[prop] = set[prop];\n    }\n}\nfunction _propHashKey(propName, propValue, references) {\n    var replacer = function (key, value) {\n        if (typeof value === 'function') {\n            value = _serializeReference(value, references);\n        }\n        return value;\n    };\n    return propName + \":\" + JSON.stringify(propValue, replacer);\n}\nfunction _serializeReference(ref, references) {\n    var id = references.get(ref);\n    if (!id) {\n        id = \"\" + ɵstringify(ref) + _nextReferenceId++;\n        references.set(ref, id);\n    }\n    return id;\n}\nfunction _valueProps(obj) {\n    var props = [];\n    // regular public props\n    Object.keys(obj).forEach(function (prop) {\n        if (!prop.startsWith('_')) {\n            props.push(prop);\n        }\n    });\n    // getters\n    var proto = obj;\n    while (proto = Object.getPrototypeOf(proto)) {\n        Object.keys(proto).forEach(function (protoProp) {\n            var desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n            if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n                props.push(protoProp);\n            }\n        });\n    }\n    return props;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar reflection = new ɵReflectionCapabilities();\n/**\n * Allows to override ivy metadata for tests (via the `TestBed`).\n */\nvar OverrideResolver = /** @class */ (function () {\n    function OverrideResolver() {\n        this.overrides = new Map();\n        this.resolved = new Map();\n    }\n    OverrideResolver.prototype.addOverride = function (type, override) {\n        var overrides = this.overrides.get(type) || [];\n        overrides.push(override);\n        this.overrides.set(type, overrides);\n        this.resolved.delete(type);\n    };\n    OverrideResolver.prototype.setOverrides = function (overrides) {\n        var _this = this;\n        this.overrides.clear();\n        overrides.forEach(function (_a) {\n            var _b = __read(_a, 2), type = _b[0], override = _b[1];\n            _this.addOverride(type, override);\n        });\n    };\n    OverrideResolver.prototype.getAnnotation = function (type) {\n        var annotations = reflection.annotations(type);\n        // Try to find the nearest known Type annotation and make sure that this annotation is an\n        // instance of the type we are looking for, so we can use it for resolution. Note: there might\n        // be multiple known annotations found due to the fact that Components can extend Directives (so\n        // both Directive and Component annotations would be present), so we always check if the known\n        // annotation has the right type.\n        for (var i = annotations.length - 1; i >= 0; i--) {\n            var annotation = annotations[i];\n            var isKnownType = annotation instanceof Directive || annotation instanceof Component ||\n                annotation instanceof Pipe || annotation instanceof NgModule;\n            if (isKnownType) {\n                return annotation instanceof this.type ? annotation : null;\n            }\n        }\n        return null;\n    };\n    OverrideResolver.prototype.resolve = function (type) {\n        var _this = this;\n        var resolved = this.resolved.get(type) || null;\n        if (!resolved) {\n            resolved = this.getAnnotation(type);\n            if (resolved) {\n                var overrides = this.overrides.get(type);\n                if (overrides) {\n                    var overrider_1 = new MetadataOverrider();\n                    overrides.forEach(function (override) {\n                        resolved = overrider_1.overrideMetadata(_this.type, resolved, override);\n                    });\n                }\n            }\n            this.resolved.set(type, resolved);\n        }\n        return resolved;\n    };\n    return OverrideResolver;\n}());\nvar DirectiveResolver = /** @class */ (function (_super) {\n    __extends(DirectiveResolver, _super);\n    function DirectiveResolver() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(DirectiveResolver.prototype, \"type\", {\n        get: function () { return Directive; },\n        enumerable: true,\n        configurable: true\n    });\n    return DirectiveResolver;\n}(OverrideResolver));\nvar ComponentResolver = /** @class */ (function (_super) {\n    __extends(ComponentResolver, _super);\n    function ComponentResolver() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(ComponentResolver.prototype, \"type\", {\n        get: function () { return Component; },\n        enumerable: true,\n        configurable: true\n    });\n    return ComponentResolver;\n}(OverrideResolver));\nvar PipeResolver = /** @class */ (function (_super) {\n    __extends(PipeResolver, _super);\n    function PipeResolver() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(PipeResolver.prototype, \"type\", {\n        get: function () { return Pipe; },\n        enumerable: true,\n        configurable: true\n    });\n    return PipeResolver;\n}(OverrideResolver));\nvar NgModuleResolver = /** @class */ (function (_super) {\n    __extends(NgModuleResolver, _super);\n    function NgModuleResolver() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(NgModuleResolver.prototype, \"type\", {\n        get: function () { return NgModule; },\n        enumerable: true,\n        configurable: true\n    });\n    return NgModuleResolver;\n}(OverrideResolver));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TestingModuleOverride;\n(function (TestingModuleOverride) {\n    TestingModuleOverride[TestingModuleOverride[\"DECLARATION\"] = 0] = \"DECLARATION\";\n    TestingModuleOverride[TestingModuleOverride[\"OVERRIDE_TEMPLATE\"] = 1] = \"OVERRIDE_TEMPLATE\";\n})(TestingModuleOverride || (TestingModuleOverride = {}));\nfunction isTestingModuleOverride(value) {\n    return value === TestingModuleOverride.DECLARATION ||\n        value === TestingModuleOverride.OVERRIDE_TEMPLATE;\n}\nvar R3TestBedCompiler = /** @class */ (function () {\n    function R3TestBedCompiler(platform, additionalModuleTypes) {\n        this.platform = platform;\n        this.additionalModuleTypes = additionalModuleTypes;\n        this.originalComponentResolutionQueue = null;\n        // Testing module configuration\n        this.declarations = [];\n        this.imports = [];\n        this.providers = [];\n        this.schemas = [];\n        // Queues of components/directives/pipes that should be recompiled.\n        this.pendingComponents = new Set();\n        this.pendingDirectives = new Set();\n        this.pendingPipes = new Set();\n        // Keep track of all components and directives, so we can patch Providers onto defs later.\n        this.seenComponents = new Set();\n        this.seenDirectives = new Set();\n        // Store resolved styles for Components that have template overrides present and `styleUrls`\n        // defined at the same time.\n        this.existingComponentStyles = new Map();\n        this.resolvers = initResolvers();\n        this.componentToModuleScope = new Map();\n        // Map that keeps initial version of component/directive/pipe defs in case\n        // we compile a Type again, thus overriding respective static fields. This is\n        // required to make sure we restore defs to their initial states between test runs\n        // TODO: we should support the case with multiple defs on a type\n        this.initialNgDefs = new Map();\n        // Array that keeps cleanup operations for initial versions of component/directive/pipe/module\n        // defs in case TestBed makes changes to the originals.\n        this.defCleanupOps = [];\n        this._injector = null;\n        this.compilerProviders = null;\n        this.providerOverrides = [];\n        this.rootProviderOverrides = [];\n        // Overrides for injectables with `{providedIn: SomeModule}` need to be tracked and added to that\n        // module's provider list.\n        this.providerOverridesByModule = new Map();\n        this.providerOverridesByToken = new Map();\n        this.moduleProvidersOverridden = new Set();\n        this.testModuleRef = null;\n        this.hasModuleOverrides = false;\n        var DynamicTestModule = /** @class */ (function () {\n            function DynamicTestModule() {\n            }\n            return DynamicTestModule;\n        }());\n        this.testModuleType = DynamicTestModule;\n    }\n    R3TestBedCompiler.prototype.setCompilerProviders = function (providers) {\n        this.compilerProviders = providers;\n        this._injector = null;\n    };\n    R3TestBedCompiler.prototype.configureTestingModule = function (moduleDef) {\n        var _a, _b, _c, _d;\n        // Enqueue any compilation tasks for the directly declared component.\n        if (moduleDef.declarations !== undefined) {\n            this.queueTypeArray(moduleDef.declarations, TestingModuleOverride.DECLARATION);\n            (_a = this.declarations).push.apply(_a, __spread(moduleDef.declarations));\n        }\n        // Enqueue any compilation tasks for imported modules.\n        if (moduleDef.imports !== undefined) {\n            this.queueTypesFromModulesArray(moduleDef.imports);\n            (_b = this.imports).push.apply(_b, __spread(moduleDef.imports));\n        }\n        if (moduleDef.providers !== undefined) {\n            (_c = this.providers).push.apply(_c, __spread(moduleDef.providers));\n        }\n        if (moduleDef.schemas !== undefined) {\n            (_d = this.schemas).push.apply(_d, __spread(moduleDef.schemas));\n        }\n    };\n    R3TestBedCompiler.prototype.overrideModule = function (ngModule, override) {\n        this.hasModuleOverrides = true;\n        // Compile the module right away.\n        this.resolvers.module.addOverride(ngModule, override);\n        var metadata = this.resolvers.module.resolve(ngModule);\n        if (metadata === null) {\n            throw invalidTypeError(ngModule.name, 'NgModule');\n        }\n        this.recompileNgModule(ngModule, metadata);\n        // At this point, the module has a valid module def (ɵmod), but the override may have introduced\n        // new declarations or imported modules. Ingest any possible new types and add them to the\n        // current queue.\n        this.queueTypesFromModulesArray([ngModule]);\n    };\n    R3TestBedCompiler.prototype.overrideComponent = function (component, override) {\n        this.resolvers.component.addOverride(component, override);\n        this.pendingComponents.add(component);\n    };\n    R3TestBedCompiler.prototype.overrideDirective = function (directive, override) {\n        this.resolvers.directive.addOverride(directive, override);\n        this.pendingDirectives.add(directive);\n    };\n    R3TestBedCompiler.prototype.overridePipe = function (pipe, override) {\n        this.resolvers.pipe.addOverride(pipe, override);\n        this.pendingPipes.add(pipe);\n    };\n    R3TestBedCompiler.prototype.overrideProvider = function (token, provider) {\n        var providerDef;\n        if (provider.useFactory !== undefined) {\n            providerDef = {\n                provide: token,\n                useFactory: provider.useFactory,\n                deps: provider.deps || [],\n                multi: provider.multi\n            };\n        }\n        else if (provider.useValue !== undefined) {\n            providerDef = { provide: token, useValue: provider.useValue, multi: provider.multi };\n        }\n        else {\n            providerDef = { provide: token };\n        }\n        var injectableDef = typeof token !== 'string' ? ɵgetInjectableDef(token) : null;\n        var isRoot = injectableDef !== null && injectableDef.providedIn === 'root';\n        var overridesBucket = isRoot ? this.rootProviderOverrides : this.providerOverrides;\n        overridesBucket.push(providerDef);\n        // Keep overrides grouped by token as well for fast lookups using token\n        this.providerOverridesByToken.set(token, providerDef);\n        if (injectableDef !== null && injectableDef.providedIn !== null &&\n            typeof injectableDef.providedIn !== 'string') {\n            var existingOverrides = this.providerOverridesByModule.get(injectableDef.providedIn);\n            if (existingOverrides !== undefined) {\n                existingOverrides.push(providerDef);\n            }\n            else {\n                this.providerOverridesByModule.set(injectableDef.providedIn, [providerDef]);\n            }\n        }\n    };\n    R3TestBedCompiler.prototype.overrideTemplateUsingTestingModule = function (type, template) {\n        var _this = this;\n        var def = type[ɵNG_COMP_DEF];\n        var hasStyleUrls = function () {\n            var metadata = _this.resolvers.component.resolve(type);\n            return !!metadata.styleUrls && metadata.styleUrls.length > 0;\n        };\n        var overrideStyleUrls = !!def && !isComponentDefPendingResolution(type) && hasStyleUrls();\n        // In Ivy, compiling a component does not require knowing the module providing the\n        // component's scope, so overrideTemplateUsingTestingModule can be implemented purely via\n        // overrideComponent. Important: overriding template requires full Component re-compilation,\n        // which may fail in case styleUrls are also present (thus Component is considered as required\n        // resolution). In order to avoid this, we preemptively set styleUrls to an empty array,\n        // preserve current styles available on Component def and restore styles back once compilation\n        // is complete.\n        var override = overrideStyleUrls ? { template: template, styles: [], styleUrls: [] } : { template: template };\n        this.overrideComponent(type, { set: override });\n        if (overrideStyleUrls && def.styles && def.styles.length > 0) {\n            this.existingComponentStyles.set(type, def.styles);\n        }\n        // Set the component's scope to be the testing module.\n        this.componentToModuleScope.set(type, TestingModuleOverride.OVERRIDE_TEMPLATE);\n    };\n    R3TestBedCompiler.prototype.compileComponents = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var needsAsyncResources, resourceLoader_1, resolver;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.clearComponentResolutionQueue();\n                        needsAsyncResources = this.compileTypesSync();\n                        if (!needsAsyncResources) return [3 /*break*/, 2];\n                        resolver = function (url) {\n                            if (!resourceLoader_1) {\n                                resourceLoader_1 = _this.injector.get(ResourceLoader);\n                            }\n                            return Promise.resolve(resourceLoader_1.get(url));\n                        };\n                        return [4 /*yield*/, resolveComponentResources(resolver)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    R3TestBedCompiler.prototype.finalize = function () {\n        // One last compile\n        this.compileTypesSync();\n        // Create the testing module itself.\n        this.compileTestModule();\n        this.applyTransitiveScopes();\n        this.applyProviderOverrides();\n        // Patch previously stored `styles` Component values (taken from ɵcmp), in case these\n        // Components have `styleUrls` fields defined and template override was requested.\n        this.patchComponentsWithExistingStyles();\n        // Clear the componentToModuleScope map, so that future compilations don't reset the scope of\n        // every component.\n        this.componentToModuleScope.clear();\n        var parentInjector = this.platform.injector;\n        this.testModuleRef = new ɵRender3NgModuleRef(this.testModuleType, parentInjector);\n        // Set the locale ID, it can be overridden for the tests\n        var localeId = this.testModuleRef.injector.get(LOCALE_ID, ɵDEFAULT_LOCALE_ID);\n        ɵsetLocaleId(localeId);\n        // ApplicationInitStatus.runInitializers() is marked @internal to core.\n        // Cast it to any before accessing it.\n        this.testModuleRef.injector.get(ApplicationInitStatus).runInitializers();\n        return this.testModuleRef;\n    };\n    /**\n     * @internal\n     */\n    R3TestBedCompiler.prototype._compileNgModuleSync = function (moduleType) {\n        this.queueTypesFromModulesArray([moduleType]);\n        this.compileTypesSync();\n        this.applyProviderOverrides();\n        this.applyProviderOverridesToModule(moduleType);\n        this.applyTransitiveScopes();\n    };\n    /**\n     * @internal\n     */\n    R3TestBedCompiler.prototype._compileNgModuleAsync = function (moduleType) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.queueTypesFromModulesArray([moduleType]);\n                        return [4 /*yield*/, this.compileComponents()];\n                    case 1:\n                        _a.sent();\n                        this.applyProviderOverrides();\n                        this.applyProviderOverridesToModule(moduleType);\n                        this.applyTransitiveScopes();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @internal\n     */\n    R3TestBedCompiler.prototype._getModuleResolver = function () { return this.resolvers.module; };\n    /**\n     * @internal\n     */\n    R3TestBedCompiler.prototype._getComponentFactories = function (moduleType) {\n        var _this = this;\n        return maybeUnwrapFn(moduleType.ɵmod.declarations).reduce(function (factories, declaration) {\n            var componentDef = declaration.ɵcmp;\n            componentDef && factories.push(new ɵRender3ComponentFactory(componentDef, _this.testModuleRef));\n            return factories;\n        }, []);\n    };\n    R3TestBedCompiler.prototype.compileTypesSync = function () {\n        var _this = this;\n        // Compile all queued components, directives, pipes.\n        var needsAsyncResources = false;\n        this.pendingComponents.forEach(function (declaration) {\n            needsAsyncResources = needsAsyncResources || isComponentDefPendingResolution(declaration);\n            var metadata = _this.resolvers.component.resolve(declaration);\n            if (metadata === null) {\n                throw invalidTypeError(declaration.name, 'Component');\n            }\n            _this.maybeStoreNgDef(ɵNG_COMP_DEF, declaration);\n            ɵcompileComponent(declaration, metadata);\n        });\n        this.pendingComponents.clear();\n        this.pendingDirectives.forEach(function (declaration) {\n            var metadata = _this.resolvers.directive.resolve(declaration);\n            if (metadata === null) {\n                throw invalidTypeError(declaration.name, 'Directive');\n            }\n            _this.maybeStoreNgDef(ɵNG_DIR_DEF, declaration);\n            ɵcompileDirective(declaration, metadata);\n        });\n        this.pendingDirectives.clear();\n        this.pendingPipes.forEach(function (declaration) {\n            var metadata = _this.resolvers.pipe.resolve(declaration);\n            if (metadata === null) {\n                throw invalidTypeError(declaration.name, 'Pipe');\n            }\n            _this.maybeStoreNgDef(ɵNG_PIPE_DEF, declaration);\n            ɵcompilePipe(declaration, metadata);\n        });\n        this.pendingPipes.clear();\n        return needsAsyncResources;\n    };\n    R3TestBedCompiler.prototype.applyTransitiveScopes = function () {\n        var _this = this;\n        var moduleToScope = new Map();\n        var getScopeOfModule = function (moduleType) {\n            if (!moduleToScope.has(moduleType)) {\n                var isTestingModule = isTestingModuleOverride(moduleType);\n                var realType = isTestingModule ? _this.testModuleType : moduleType;\n                // Module overrides (via TestBed.overrideModule) might affect scopes that were\n                // previously calculated and stored in `transitiveCompileScopes`. If module overrides\n                // are present, always re-calculate transitive scopes to have the most up-to-date\n                // information available. The `moduleToScope` map avoids repeated re-calculation of\n                // scopes for the same module.\n                var forceRecalc = !isTestingModule && _this.hasModuleOverrides;\n                moduleToScope.set(moduleType, ɵtransitiveScopesFor(realType, forceRecalc));\n            }\n            return moduleToScope.get(moduleType);\n        };\n        this.componentToModuleScope.forEach(function (moduleType, componentType) {\n            var moduleScope = getScopeOfModule(moduleType);\n            _this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'directiveDefs');\n            _this.storeFieldOfDefOnType(componentType, ɵNG_COMP_DEF, 'pipeDefs');\n            ɵpatchComponentDefWithScope(componentType.ɵcmp, moduleScope);\n        });\n        this.componentToModuleScope.clear();\n    };\n    R3TestBedCompiler.prototype.applyProviderOverrides = function () {\n        var _this = this;\n        var maybeApplyOverrides = function (field) { return function (type) {\n            var resolver = field === ɵNG_COMP_DEF ? _this.resolvers.component : _this.resolvers.directive;\n            var metadata = resolver.resolve(type);\n            if (_this.hasProviderOverrides(metadata.providers)) {\n                _this.patchDefWithProviderOverrides(type, field);\n            }\n        }; };\n        this.seenComponents.forEach(maybeApplyOverrides(ɵNG_COMP_DEF));\n        this.seenDirectives.forEach(maybeApplyOverrides(ɵNG_DIR_DEF));\n        this.seenComponents.clear();\n        this.seenDirectives.clear();\n    };\n    R3TestBedCompiler.prototype.applyProviderOverridesToModule = function (moduleType) {\n        var e_1, _a, e_2, _b;\n        if (this.moduleProvidersOverridden.has(moduleType)) {\n            return;\n        }\n        this.moduleProvidersOverridden.add(moduleType);\n        var injectorDef = moduleType[ɵNG_INJ_DEF];\n        if (this.providerOverridesByToken.size > 0) {\n            var providers = __spread(injectorDef.providers, (this.providerOverridesByModule.get(moduleType) || []));\n            if (this.hasProviderOverrides(providers)) {\n                this.maybeStoreNgDef(ɵNG_INJ_DEF, moduleType);\n                this.storeFieldOfDefOnType(moduleType, ɵNG_INJ_DEF, 'providers');\n                injectorDef.providers = this.getOverriddenProviders(providers);\n            }\n            // Apply provider overrides to imported modules recursively\n            var moduleDef = moduleType[ɵNG_MOD_DEF];\n            var imports = maybeUnwrapFn(moduleDef.imports);\n            try {\n                for (var imports_1 = __values(imports), imports_1_1 = imports_1.next(); !imports_1_1.done; imports_1_1 = imports_1.next()) {\n                    var importedModule = imports_1_1.value;\n                    this.applyProviderOverridesToModule(importedModule);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (imports_1_1 && !imports_1_1.done && (_a = imports_1.return)) _a.call(imports_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            try {\n                // Also override the providers on any ModuleWithProviders imports since those don't appear in\n                // the moduleDef.\n                for (var _c = __values(flatten(injectorDef.imports)), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var importedModule = _d.value;\n                    if (isModuleWithProviders(importedModule)) {\n                        this.defCleanupOps.push({\n                            object: importedModule,\n                            fieldName: 'providers',\n                            originalValue: importedModule.providers\n                        });\n                        importedModule.providers = this.getOverriddenProviders(importedModule.providers);\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        }\n    };\n    R3TestBedCompiler.prototype.patchComponentsWithExistingStyles = function () {\n        this.existingComponentStyles.forEach(function (styles, type) { return type[ɵNG_COMP_DEF].styles = styles; });\n        this.existingComponentStyles.clear();\n    };\n    R3TestBedCompiler.prototype.queueTypeArray = function (arr, moduleType) {\n        var e_3, _a;\n        try {\n            for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {\n                var value = arr_1_1.value;\n                if (Array.isArray(value)) {\n                    this.queueTypeArray(value, moduleType);\n                }\n                else {\n                    this.queueType(value, moduleType);\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    R3TestBedCompiler.prototype.recompileNgModule = function (ngModule, metadata) {\n        // Cache the initial ngModuleDef as it will be overwritten.\n        this.maybeStoreNgDef(ɵNG_MOD_DEF, ngModule);\n        this.maybeStoreNgDef(ɵNG_INJ_DEF, ngModule);\n        ɵcompileNgModuleDefs(ngModule, metadata);\n    };\n    R3TestBedCompiler.prototype.queueType = function (type, moduleType) {\n        var component = this.resolvers.component.resolve(type);\n        if (component) {\n            // Check whether a give Type has respective NG def (ɵcmp) and compile if def is\n            // missing. That might happen in case a class without any Angular decorators extends another\n            // class where Component/Directive/Pipe decorator is defined.\n            if (isComponentDefPendingResolution(type) || !type.hasOwnProperty(ɵNG_COMP_DEF)) {\n                this.pendingComponents.add(type);\n            }\n            this.seenComponents.add(type);\n            // Keep track of the module which declares this component, so later the component's scope\n            // can be set correctly. If the component has already been recorded here, then one of several\n            // cases is true:\n            // * the module containing the component was imported multiple times (common).\n            // * the component is declared in multiple modules (which is an error).\n            // * the component was in 'declarations' of the testing module, and also in an imported module\n            //   in which case the module scope will be TestingModuleOverride.DECLARATION.\n            // * overrideTemplateUsingTestingModule was called for the component in which case the module\n            //   scope will be TestingModuleOverride.OVERRIDE_TEMPLATE.\n            //\n            // If the component was previously in the testing module's 'declarations' (meaning the\n            // current value is TestingModuleOverride.DECLARATION), then `moduleType` is the component's\n            // real module, which was imported. This pattern is understood to mean that the component\n            // should use its original scope, but that the testing module should also contain the\n            // component in its scope.\n            if (!this.componentToModuleScope.has(type) ||\n                this.componentToModuleScope.get(type) === TestingModuleOverride.DECLARATION) {\n                this.componentToModuleScope.set(type, moduleType);\n            }\n            return;\n        }\n        var directive = this.resolvers.directive.resolve(type);\n        if (directive) {\n            if (!type.hasOwnProperty(ɵNG_DIR_DEF)) {\n                this.pendingDirectives.add(type);\n            }\n            this.seenDirectives.add(type);\n            return;\n        }\n        var pipe = this.resolvers.pipe.resolve(type);\n        if (pipe && !type.hasOwnProperty(ɵNG_PIPE_DEF)) {\n            this.pendingPipes.add(type);\n            return;\n        }\n    };\n    R3TestBedCompiler.prototype.queueTypesFromModulesArray = function (arr) {\n        var _this = this;\n        // Because we may encounter the same NgModule while processing the imports and exports of an\n        // NgModule tree, we cache them in this set so we can skip ones that have already been seen\n        // encountered. In some test setups, this caching resulted in 10X runtime improvement.\n        var processedNgModuleDefs = new Set();\n        var queueTypesFromModulesArrayRecur = function (arr) {\n            var e_4, _a;\n            try {\n                for (var arr_2 = __values(arr), arr_2_1 = arr_2.next(); !arr_2_1.done; arr_2_1 = arr_2.next()) {\n                    var value = arr_2_1.value;\n                    if (Array.isArray(value)) {\n                        queueTypesFromModulesArrayRecur(value);\n                    }\n                    else if (hasNgModuleDef(value)) {\n                        var def = value.ɵmod;\n                        if (processedNgModuleDefs.has(def)) {\n                            continue;\n                        }\n                        processedNgModuleDefs.add(def);\n                        // Look through declarations, imports, and exports, and queue\n                        // everything found there.\n                        _this.queueTypeArray(maybeUnwrapFn(def.declarations), value);\n                        queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.imports));\n                        queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.exports));\n                    }\n                }\n            }\n            catch (e_4_1) { e_4 = { error: e_4_1 }; }\n            finally {\n                try {\n                    if (arr_2_1 && !arr_2_1.done && (_a = arr_2.return)) _a.call(arr_2);\n                }\n                finally { if (e_4) throw e_4.error; }\n            }\n        };\n        queueTypesFromModulesArrayRecur(arr);\n    };\n    R3TestBedCompiler.prototype.maybeStoreNgDef = function (prop, type) {\n        if (!this.initialNgDefs.has(type)) {\n            var currentDef = Object.getOwnPropertyDescriptor(type, prop);\n            this.initialNgDefs.set(type, [prop, currentDef]);\n        }\n    };\n    R3TestBedCompiler.prototype.storeFieldOfDefOnType = function (type, defField, fieldName) {\n        var def = type[defField];\n        var originalValue = def[fieldName];\n        this.defCleanupOps.push({ object: def, fieldName: fieldName, originalValue: originalValue });\n    };\n    /**\n     * Clears current components resolution queue, but stores the state of the queue, so we can\n     * restore it later. Clearing the queue is required before we try to compile components (via\n     * `TestBed.compileComponents`), so that component defs are in sync with the resolution queue.\n     */\n    R3TestBedCompiler.prototype.clearComponentResolutionQueue = function () {\n        var _this = this;\n        if (this.originalComponentResolutionQueue === null) {\n            this.originalComponentResolutionQueue = new Map();\n        }\n        clearResolutionOfComponentResourcesQueue().forEach(function (value, key) { return _this.originalComponentResolutionQueue.set(key, value); });\n    };\n    /*\n     * Restores component resolution queue to the previously saved state. This operation is performed\n     * as a part of restoring the state after completion of the current set of tests (that might\n     * potentially mutate the state).\n     */\n    R3TestBedCompiler.prototype.restoreComponentResolutionQueue = function () {\n        if (this.originalComponentResolutionQueue !== null) {\n            restoreComponentResolutionQueue(this.originalComponentResolutionQueue);\n            this.originalComponentResolutionQueue = null;\n        }\n    };\n    R3TestBedCompiler.prototype.restoreOriginalState = function () {\n        // Process cleanup ops in reverse order so the field's original value is restored correctly (in\n        // case there were multiple overrides for the same field).\n        forEachRight(this.defCleanupOps, function (op) {\n            op.object[op.fieldName] = op.originalValue;\n        });\n        // Restore initial component/directive/pipe defs\n        this.initialNgDefs.forEach(function (value, type) {\n            var _a = __read(value, 2), prop = _a[0], descriptor = _a[1];\n            if (!descriptor) {\n                // Delete operations are generally undesirable since they have performance implications\n                // on objects they were applied to. In this particular case, situations where this code\n                // is invoked should be quite rare to cause any noticeable impact, since it's applied\n                // only to some test cases (for example when class with no annotations extends some\n                // @Component) when we need to clear 'ɵcmp' field on a given class to restore\n                // its original state (before applying overrides and running tests).\n                delete type[prop];\n            }\n            else {\n                Object.defineProperty(type, prop, descriptor);\n            }\n        });\n        this.initialNgDefs.clear();\n        this.moduleProvidersOverridden.clear();\n        this.restoreComponentResolutionQueue();\n        // Restore the locale ID to the default value, this shouldn't be necessary but we never know\n        ɵsetLocaleId(ɵDEFAULT_LOCALE_ID);\n    };\n    R3TestBedCompiler.prototype.compileTestModule = function () {\n        var _this = this;\n        var RootScopeModule = /** @class */ (function () {\n            function RootScopeModule() {\n            }\n            return RootScopeModule;\n        }());\n        ɵcompileNgModuleDefs(RootScopeModule, {\n            providers: __spread(this.rootProviderOverrides),\n        });\n        var ngZone = new NgZone({ enableLongStackTrace: true });\n        var providers = __spread([\n            { provide: NgZone, useValue: ngZone },\n            { provide: Compiler, useFactory: function () { return new R3TestCompiler(_this); } }\n        ], this.providers, this.providerOverrides);\n        var imports = [RootScopeModule, this.additionalModuleTypes, this.imports || []];\n        // clang-format off\n        ɵcompileNgModuleDefs(this.testModuleType, {\n            declarations: this.declarations,\n            imports: imports,\n            schemas: this.schemas,\n            providers: providers,\n        }, /* allowDuplicateDeclarationsInRoot */ true);\n        // clang-format on\n        this.applyProviderOverridesToModule(this.testModuleType);\n    };\n    Object.defineProperty(R3TestBedCompiler.prototype, \"injector\", {\n        get: function () {\n            if (this._injector !== null) {\n                return this._injector;\n            }\n            var providers = [];\n            var compilerOptions = this.platform.injector.get(COMPILER_OPTIONS);\n            compilerOptions.forEach(function (opts) {\n                if (opts.providers) {\n                    providers.push(opts.providers);\n                }\n            });\n            if (this.compilerProviders !== null) {\n                providers.push.apply(providers, __spread(this.compilerProviders));\n            }\n            // TODO(ocombe): make this work with an Injector directly instead of creating a module for it\n            var CompilerModule = /** @class */ (function () {\n                function CompilerModule() {\n                }\n                return CompilerModule;\n            }());\n            ɵcompileNgModuleDefs(CompilerModule, { providers: providers });\n            var CompilerModuleFactory = new ɵNgModuleFactory(CompilerModule);\n            this._injector = CompilerModuleFactory.create(this.platform.injector).injector;\n            return this._injector;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // get overrides for a specific provider (if any)\n    R3TestBedCompiler.prototype.getSingleProviderOverrides = function (provider) {\n        var token = getProviderToken(provider);\n        return this.providerOverridesByToken.get(token) || null;\n    };\n    R3TestBedCompiler.prototype.getProviderOverrides = function (providers) {\n        var _this = this;\n        if (!providers || !providers.length || this.providerOverridesByToken.size === 0)\n            return [];\n        // There are two flattening operations here. The inner flatten() operates on the metadata's\n        // providers and applies a mapping function which retrieves overrides for each incoming\n        // provider. The outer flatten() then flattens the produced overrides array. If this is not\n        // done, the array can contain other empty arrays (e.g. `[[], []]`) which leak into the\n        // providers array and contaminate any error messages that might be generated.\n        return flatten(flatten(providers, function (provider) { return _this.getSingleProviderOverrides(provider) || []; }));\n    };\n    R3TestBedCompiler.prototype.getOverriddenProviders = function (providers) {\n        var _this = this;\n        if (!providers || !providers.length || this.providerOverridesByToken.size === 0)\n            return [];\n        var flattenedProviders = flatten(providers);\n        var overrides = this.getProviderOverrides(flattenedProviders);\n        var overriddenProviders = __spread(flattenedProviders, overrides);\n        var final = [];\n        var seenOverriddenProviders = new Set();\n        // We iterate through the list of providers in reverse order to make sure provider overrides\n        // take precedence over the values defined in provider list. We also filter out all providers\n        // that have overrides, keeping overridden values only. This is needed, since presence of a\n        // provider with `ngOnDestroy` hook will cause this hook to be registered and invoked later.\n        forEachRight(overriddenProviders, function (provider) {\n            var token = getProviderToken(provider);\n            if (_this.providerOverridesByToken.has(token)) {\n                if (!seenOverriddenProviders.has(token)) {\n                    seenOverriddenProviders.add(token);\n                    // Treat all overridden providers as `{multi: false}` (even if it's a multi-provider) to\n                    // make sure that provided override takes highest precedence and is not combined with\n                    // other instances of the same multi provider.\n                    final.unshift(__assign(__assign({}, provider), { multi: false }));\n                }\n            }\n            else {\n                final.unshift(provider);\n            }\n        });\n        return final;\n    };\n    R3TestBedCompiler.prototype.hasProviderOverrides = function (providers) {\n        return this.getProviderOverrides(providers).length > 0;\n    };\n    R3TestBedCompiler.prototype.patchDefWithProviderOverrides = function (declaration, field) {\n        var _this = this;\n        var def = declaration[field];\n        if (def && def.providersResolver) {\n            this.maybeStoreNgDef(field, declaration);\n            var resolver_1 = def.providersResolver;\n            var processProvidersFn_1 = function (providers) { return _this.getOverriddenProviders(providers); };\n            this.storeFieldOfDefOnType(declaration, field, 'providersResolver');\n            def.providersResolver = function (ngDef) { return resolver_1(ngDef, processProvidersFn_1); };\n        }\n    };\n    return R3TestBedCompiler;\n}());\nfunction initResolvers() {\n    return {\n        module: new NgModuleResolver(),\n        component: new ComponentResolver(),\n        directive: new DirectiveResolver(),\n        pipe: new PipeResolver()\n    };\n}\nfunction hasNgModuleDef(value) {\n    return value.hasOwnProperty('ɵmod');\n}\nfunction maybeUnwrapFn(maybeFn) {\n    return maybeFn instanceof Function ? maybeFn() : maybeFn;\n}\nfunction flatten(values, mapFn) {\n    var out = [];\n    values.forEach(function (value) {\n        if (Array.isArray(value)) {\n            out.push.apply(out, __spread(flatten(value, mapFn)));\n        }\n        else {\n            out.push(mapFn ? mapFn(value) : value);\n        }\n    });\n    return out;\n}\nfunction getProviderField(provider, field) {\n    return provider && typeof provider === 'object' && provider[field];\n}\nfunction getProviderToken(provider) {\n    return getProviderField(provider, 'provide') || provider;\n}\nfunction isModuleWithProviders(value) {\n    return value.hasOwnProperty('ngModule');\n}\nfunction forEachRight(values, fn) {\n    for (var idx = values.length - 1; idx >= 0; idx--) {\n        fn(values[idx], idx);\n    }\n}\nfunction invalidTypeError(name, expectedType) {\n    return new Error(name + \" class doesn't have @\" + expectedType + \" decorator or is missing metadata.\");\n}\nvar R3TestCompiler = /** @class */ (function () {\n    function R3TestCompiler(testBed) {\n        this.testBed = testBed;\n    }\n    R3TestCompiler.prototype.compileModuleSync = function (moduleType) {\n        this.testBed._compileNgModuleSync(moduleType);\n        return new ɵNgModuleFactory(moduleType);\n    };\n    R3TestCompiler.prototype.compileModuleAsync = function (moduleType) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.testBed._compileNgModuleAsync(moduleType)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, new ɵNgModuleFactory(moduleType)];\n                }\n            });\n        });\n    };\n    R3TestCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n        var ngModuleFactory = this.compileModuleSync(moduleType);\n        var componentFactories = this.testBed._getComponentFactories(moduleType);\n        return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n    };\n    R3TestCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n        return __awaiter(this, void 0, void 0, function () {\n            var ngModuleFactory, componentFactories;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.compileModuleAsync(moduleType)];\n                    case 1:\n                        ngModuleFactory = _a.sent();\n                        componentFactories = this.testBed._getComponentFactories(moduleType);\n                        return [2 /*return*/, new ModuleWithComponentFactories(ngModuleFactory, componentFactories)];\n                }\n            });\n        });\n    };\n    R3TestCompiler.prototype.clearCache = function () { };\n    R3TestCompiler.prototype.clearCacheFor = function (type) { };\n    R3TestCompiler.prototype.getModuleId = function (moduleType) {\n        var meta = this.testBed._getModuleResolver().resolve(moduleType);\n        return meta && meta.id || undefined;\n    };\n    return R3TestCompiler;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextRootElementId = 0;\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n */\nvar TestBedRender3 = /** @class */ (function () {\n    function TestBedRender3() {\n        // Properties\n        this.platform = null;\n        this.ngModule = null;\n        this._compiler = null;\n        this._testModuleRef = null;\n        this._activeFixtures = [];\n        this._globalCompilationChecked = false;\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @publicApi\n     */\n    TestBedRender3.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n        var testBed = _getTestBedRender3();\n        testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n        return testBed;\n    };\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @publicApi\n     */\n    TestBedRender3.resetTestEnvironment = function () { _getTestBedRender3().resetTestEnvironment(); };\n    TestBedRender3.configureCompiler = function (config) {\n        _getTestBedRender3().configureCompiler(config);\n        return TestBedRender3;\n    };\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     */\n    TestBedRender3.configureTestingModule = function (moduleDef) {\n        _getTestBedRender3().configureTestingModule(moduleDef);\n        return TestBedRender3;\n    };\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     */\n    TestBedRender3.compileComponents = function () { return _getTestBedRender3().compileComponents(); };\n    TestBedRender3.overrideModule = function (ngModule, override) {\n        _getTestBedRender3().overrideModule(ngModule, override);\n        return TestBedRender3;\n    };\n    TestBedRender3.overrideComponent = function (component, override) {\n        _getTestBedRender3().overrideComponent(component, override);\n        return TestBedRender3;\n    };\n    TestBedRender3.overrideDirective = function (directive, override) {\n        _getTestBedRender3().overrideDirective(directive, override);\n        return TestBedRender3;\n    };\n    TestBedRender3.overridePipe = function (pipe, override) {\n        _getTestBedRender3().overridePipe(pipe, override);\n        return TestBedRender3;\n    };\n    TestBedRender3.overrideTemplate = function (component, template) {\n        _getTestBedRender3().overrideComponent(component, { set: { template: template, templateUrl: null } });\n        return TestBedRender3;\n    };\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    TestBedRender3.overrideTemplateUsingTestingModule = function (component, template) {\n        _getTestBedRender3().overrideTemplateUsingTestingModule(component, template);\n        return TestBedRender3;\n    };\n    TestBedRender3.overrideProvider = function (token, provider) {\n        _getTestBedRender3().overrideProvider(token, provider);\n        return TestBedRender3;\n    };\n    TestBedRender3.inject = function (token, notFoundValue, flags) {\n        return _getTestBedRender3().inject(token, notFoundValue, flags);\n    };\n    /** @deprecated from v9.0.0 use TestBed.inject */\n    TestBedRender3.get = function (token, notFoundValue, flags) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (flags === void 0) { flags = InjectFlags.Default; }\n        return _getTestBedRender3().inject(token, notFoundValue, flags);\n    };\n    TestBedRender3.createComponent = function (component) {\n        return _getTestBedRender3().createComponent(component);\n    };\n    TestBedRender3.resetTestingModule = function () {\n        _getTestBedRender3().resetTestingModule();\n        return TestBedRender3;\n    };\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @publicApi\n     */\n    TestBedRender3.prototype.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n        if (this.platform || this.ngModule) {\n            throw new Error('Cannot set base providers because it has already been called');\n        }\n        this.platform = platform;\n        this.ngModule = ngModule;\n        this._compiler = new R3TestBedCompiler(this.platform, this.ngModule);\n    };\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @publicApi\n     */\n    TestBedRender3.prototype.resetTestEnvironment = function () {\n        this.resetTestingModule();\n        this._compiler = null;\n        this.platform = null;\n        this.ngModule = null;\n    };\n    TestBedRender3.prototype.resetTestingModule = function () {\n        this.checkGlobalCompilationFinished();\n        ɵresetCompiledComponents();\n        if (this._compiler !== null) {\n            this.compiler.restoreOriginalState();\n        }\n        this._compiler = new R3TestBedCompiler(this.platform, this.ngModule);\n        this._testModuleRef = null;\n        this.destroyActiveFixtures();\n    };\n    TestBedRender3.prototype.configureCompiler = function (config) {\n        if (config.useJit != null) {\n            throw new Error('the Render3 compiler JiT mode is not configurable !');\n        }\n        if (config.providers !== undefined) {\n            this.compiler.setCompilerProviders(config.providers);\n        }\n    };\n    TestBedRender3.prototype.configureTestingModule = function (moduleDef) {\n        this.assertNotInstantiated('R3TestBed.configureTestingModule', 'configure the test module');\n        this.compiler.configureTestingModule(moduleDef);\n    };\n    TestBedRender3.prototype.compileComponents = function () { return this.compiler.compileComponents(); };\n    TestBedRender3.prototype.inject = function (token, notFoundValue, flags) {\n        if (token === TestBedRender3) {\n            return this;\n        }\n        var UNDEFINED = {};\n        var result = this.testModuleRef.injector.get(token, UNDEFINED, flags);\n        return result === UNDEFINED ? this.compiler.injector.get(token, notFoundValue, flags) :\n            result;\n    };\n    /** @deprecated from v9.0.0 use TestBed.inject */\n    TestBedRender3.prototype.get = function (token, notFoundValue, flags) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (flags === void 0) { flags = InjectFlags.Default; }\n        return this.inject(token, notFoundValue, flags);\n    };\n    TestBedRender3.prototype.execute = function (tokens, fn, context) {\n        var _this = this;\n        var params = tokens.map(function (t) { return _this.inject(t); });\n        return fn.apply(context, params);\n    };\n    TestBedRender3.prototype.overrideModule = function (ngModule, override) {\n        this.assertNotInstantiated('overrideModule', 'override module metadata');\n        this.compiler.overrideModule(ngModule, override);\n    };\n    TestBedRender3.prototype.overrideComponent = function (component, override) {\n        this.assertNotInstantiated('overrideComponent', 'override component metadata');\n        this.compiler.overrideComponent(component, override);\n    };\n    TestBedRender3.prototype.overrideTemplateUsingTestingModule = function (component, template) {\n        this.assertNotInstantiated('R3TestBed.overrideTemplateUsingTestingModule', 'Cannot override template when the test module has already been instantiated');\n        this.compiler.overrideTemplateUsingTestingModule(component, template);\n    };\n    TestBedRender3.prototype.overrideDirective = function (directive, override) {\n        this.assertNotInstantiated('overrideDirective', 'override directive metadata');\n        this.compiler.overrideDirective(directive, override);\n    };\n    TestBedRender3.prototype.overridePipe = function (pipe, override) {\n        this.assertNotInstantiated('overridePipe', 'override pipe metadata');\n        this.compiler.overridePipe(pipe, override);\n    };\n    /**\n     * Overwrites all providers for the given token with the given provider definition.\n     */\n    TestBedRender3.prototype.overrideProvider = function (token, provider) {\n        this.compiler.overrideProvider(token, provider);\n    };\n    TestBedRender3.prototype.createComponent = function (type) {\n        var _this = this;\n        var testComponentRenderer = this.inject(TestComponentRenderer);\n        var rootElId = \"root-ng-internal-isolated-\" + _nextRootElementId++;\n        testComponentRenderer.insertRootElement(rootElId);\n        var componentDef = type.ɵcmp;\n        if (!componentDef) {\n            throw new Error(\"It looks like '\" + ɵstringify(type) + \"' has not been IVY compiled - it has no '\\u0275cmp' field\");\n        }\n        // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n        var noNgZone = this.inject(ComponentFixtureNoNgZone, false);\n        // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n        var autoDetect = this.inject(ComponentFixtureAutoDetect, false);\n        var ngZone = noNgZone ? null : this.inject(NgZone, null);\n        var componentFactory = new ɵRender3ComponentFactory(componentDef);\n        var initComponent = function () {\n            var componentRef = componentFactory.create(Injector.NULL, [], \"#\" + rootElId, _this.testModuleRef);\n            return new ComponentFixture(componentRef, ngZone, autoDetect);\n        };\n        var fixture = ngZone ? ngZone.run(initComponent) : initComponent();\n        this._activeFixtures.push(fixture);\n        return fixture;\n    };\n    Object.defineProperty(TestBedRender3.prototype, \"compiler\", {\n        /**\n         * @internal strip this from published d.ts files due to\n         * https://github.com/microsoft/TypeScript/issues/36216\n         */\n        get: function () {\n            if (this._compiler === null) {\n                throw new Error(\"Need to call TestBed.initTestEnvironment() first\");\n            }\n            return this._compiler;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TestBedRender3.prototype, \"testModuleRef\", {\n        /**\n         * @internal strip this from published d.ts files due to\n         * https://github.com/microsoft/TypeScript/issues/36216\n         */\n        get: function () {\n            if (this._testModuleRef === null) {\n                this._testModuleRef = this.compiler.finalize();\n            }\n            return this._testModuleRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TestBedRender3.prototype.assertNotInstantiated = function (methodName, methodDescription) {\n        if (this._testModuleRef !== null) {\n            throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n        }\n    };\n    /**\n     * Check whether the module scoping queue should be flushed, and flush it if needed.\n     *\n     * When the TestBed is reset, it clears the JIT module compilation queue, cancelling any\n     * in-progress module compilation. This creates a potential hazard - the very first time the\n     * TestBed is initialized (or if it's reset without being initialized), there may be pending\n     * compilations of modules declared in global scope. These compilations should be finished.\n     *\n     * To ensure that globally declared modules have their components scoped properly, this function\n     * is called whenever TestBed is initialized or reset. The _first_ time that this happens, prior\n     * to any other operations, the scoping queue is flushed.\n     */\n    TestBedRender3.prototype.checkGlobalCompilationFinished = function () {\n        // Checking _testNgModuleRef is null should not be necessary, but is left in as an additional\n        // guard that compilations queued in tests (after instantiation) are never flushed accidentally.\n        if (!this._globalCompilationChecked && this._testModuleRef === null) {\n            ɵflushModuleScopingQueueAsMuchAsPossible();\n        }\n        this._globalCompilationChecked = true;\n    };\n    TestBedRender3.prototype.destroyActiveFixtures = function () {\n        this._activeFixtures.forEach(function (fixture) {\n            try {\n                fixture.destroy();\n            }\n            catch (e) {\n                console.error('Error during cleanup of component', {\n                    component: fixture.componentInstance,\n                    stacktrace: e,\n                });\n            }\n        });\n        this._activeFixtures = [];\n    };\n    return TestBedRender3;\n}());\nvar testBed;\nfunction _getTestBedRender3() {\n    return testBed = testBed || new TestBedRender3();\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction unimplemented() {\n    throw Error('unimplemented');\n}\n/**\n * Special interface to the compiler only used by testing\n *\n * @publicApi\n */\nvar TestingCompiler = /** @class */ (function (_super) {\n    __extends(TestingCompiler, _super);\n    function TestingCompiler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(TestingCompiler.prototype, \"injector\", {\n        get: function () { throw unimplemented(); },\n        enumerable: true,\n        configurable: true\n    });\n    TestingCompiler.prototype.overrideModule = function (module, overrides) {\n        throw unimplemented();\n    };\n    TestingCompiler.prototype.overrideDirective = function (directive, overrides) {\n        throw unimplemented();\n    };\n    TestingCompiler.prototype.overrideComponent = function (component, overrides) {\n        throw unimplemented();\n    };\n    TestingCompiler.prototype.overridePipe = function (directive, overrides) {\n        throw unimplemented();\n    };\n    /**\n     * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n     * so that it can use the code generated by AOT.\n     */\n    TestingCompiler.prototype.loadAotSummaries = function (summaries) { throw unimplemented(); };\n    /**\n     * Gets the component factory for the given component.\n     * This assumes that the component has been compiled before calling this call using\n     * `compileModuleAndAllComponents*`.\n     */\n    TestingCompiler.prototype.getComponentFactory = function (component) { throw unimplemented(); };\n    /**\n     * Returns the component type that is stored in the given error.\n     * This can be used for errors created by compileModule...\n     */\n    TestingCompiler.prototype.getComponentFromError = function (error) { throw unimplemented(); };\n    TestingCompiler = __decorate([\n        Injectable()\n    ], TestingCompiler);\n    return TestingCompiler;\n}(Compiler));\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n */\nvar TestingCompilerFactory = /** @class */ (function () {\n    function TestingCompilerFactory() {\n    }\n    return TestingCompilerFactory;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextRootElementId$1 = 0;\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n */\nvar TestBedViewEngine = /** @class */ (function () {\n    function TestBedViewEngine() {\n        this._instantiated = false;\n        this._compiler = null;\n        this._moduleRef = null;\n        this._moduleFactory = null;\n        this._compilerOptions = [];\n        this._moduleOverrides = [];\n        this._componentOverrides = [];\n        this._directiveOverrides = [];\n        this._pipeOverrides = [];\n        this._providers = [];\n        this._declarations = [];\n        this._imports = [];\n        this._schemas = [];\n        this._activeFixtures = [];\n        this._testEnvAotSummaries = function () { return []; };\n        this._aotSummaries = [];\n        this._templateOverrides = [];\n        this._isRoot = true;\n        this._rootProviderOverrides = [];\n        this.platform = null;\n        this.ngModule = null;\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     */\n    TestBedViewEngine.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n        var testBed = _getTestBedViewEngine();\n        testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n        return testBed;\n    };\n    /**\n     * Reset the providers for the test injector.\n     */\n    TestBedViewEngine.resetTestEnvironment = function () { _getTestBedViewEngine().resetTestEnvironment(); };\n    TestBedViewEngine.resetTestingModule = function () {\n        _getTestBedViewEngine().resetTestingModule();\n        return TestBedViewEngine;\n    };\n    /**\n     * Allows overriding default compiler providers and settings\n     * which are defined in test_injector.js\n     */\n    TestBedViewEngine.configureCompiler = function (config) {\n        _getTestBedViewEngine().configureCompiler(config);\n        return TestBedViewEngine;\n    };\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     */\n    TestBedViewEngine.configureTestingModule = function (moduleDef) {\n        _getTestBedViewEngine().configureTestingModule(moduleDef);\n        return TestBedViewEngine;\n    };\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     */\n    TestBedViewEngine.compileComponents = function () { return getTestBed().compileComponents(); };\n    TestBedViewEngine.overrideModule = function (ngModule, override) {\n        _getTestBedViewEngine().overrideModule(ngModule, override);\n        return TestBedViewEngine;\n    };\n    TestBedViewEngine.overrideComponent = function (component, override) {\n        _getTestBedViewEngine().overrideComponent(component, override);\n        return TestBedViewEngine;\n    };\n    TestBedViewEngine.overrideDirective = function (directive, override) {\n        _getTestBedViewEngine().overrideDirective(directive, override);\n        return TestBedViewEngine;\n    };\n    TestBedViewEngine.overridePipe = function (pipe, override) {\n        _getTestBedViewEngine().overridePipe(pipe, override);\n        return TestBedViewEngine;\n    };\n    TestBedViewEngine.overrideTemplate = function (component, template) {\n        _getTestBedViewEngine().overrideComponent(component, { set: { template: template, templateUrl: null } });\n        return TestBedViewEngine;\n    };\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    TestBedViewEngine.overrideTemplateUsingTestingModule = function (component, template) {\n        _getTestBedViewEngine().overrideTemplateUsingTestingModule(component, template);\n        return TestBedViewEngine;\n    };\n    TestBedViewEngine.overrideProvider = function (token, provider) {\n        _getTestBedViewEngine().overrideProvider(token, provider);\n        return TestBedViewEngine;\n    };\n    TestBedViewEngine.inject = function (token, notFoundValue, flags) {\n        return _getTestBedViewEngine().inject(token, notFoundValue, flags);\n    };\n    /** @deprecated from v9.0.0 use TestBed.inject */\n    TestBedViewEngine.get = function (token, notFoundValue, flags) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (flags === void 0) { flags = InjectFlags.Default; }\n        return _getTestBedViewEngine().inject(token, notFoundValue, flags);\n    };\n    TestBedViewEngine.createComponent = function (component) {\n        return _getTestBedViewEngine().createComponent(component);\n    };\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     */\n    TestBedViewEngine.prototype.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n        if (this.platform || this.ngModule) {\n            throw new Error('Cannot set base providers because it has already been called');\n        }\n        this.platform = platform;\n        this.ngModule = ngModule;\n        if (aotSummaries) {\n            this._testEnvAotSummaries = aotSummaries;\n        }\n    };\n    /**\n     * Reset the providers for the test injector.\n     */\n    TestBedViewEngine.prototype.resetTestEnvironment = function () {\n        this.resetTestingModule();\n        this.platform = null;\n        this.ngModule = null;\n        this._testEnvAotSummaries = function () { return []; };\n    };\n    TestBedViewEngine.prototype.resetTestingModule = function () {\n        ɵclearOverrides();\n        this._aotSummaries = [];\n        this._templateOverrides = [];\n        this._compiler = null;\n        this._moduleOverrides = [];\n        this._componentOverrides = [];\n        this._directiveOverrides = [];\n        this._pipeOverrides = [];\n        this._isRoot = true;\n        this._rootProviderOverrides = [];\n        this._moduleRef = null;\n        this._moduleFactory = null;\n        this._compilerOptions = [];\n        this._providers = [];\n        this._declarations = [];\n        this._imports = [];\n        this._schemas = [];\n        this._instantiated = false;\n        this._activeFixtures.forEach(function (fixture) {\n            try {\n                fixture.destroy();\n            }\n            catch (e) {\n                console.error('Error during cleanup of component', {\n                    component: fixture.componentInstance,\n                    stacktrace: e,\n                });\n            }\n        });\n        this._activeFixtures = [];\n    };\n    TestBedViewEngine.prototype.configureCompiler = function (config) {\n        this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n        this._compilerOptions.push(config);\n    };\n    TestBedViewEngine.prototype.configureTestingModule = function (moduleDef) {\n        var _a, _b, _c, _d;\n        this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n        if (moduleDef.providers) {\n            (_a = this._providers).push.apply(_a, __spread(moduleDef.providers));\n        }\n        if (moduleDef.declarations) {\n            (_b = this._declarations).push.apply(_b, __spread(moduleDef.declarations));\n        }\n        if (moduleDef.imports) {\n            (_c = this._imports).push.apply(_c, __spread(moduleDef.imports));\n        }\n        if (moduleDef.schemas) {\n            (_d = this._schemas).push.apply(_d, __spread(moduleDef.schemas));\n        }\n        if (moduleDef.aotSummaries) {\n            this._aotSummaries.push(moduleDef.aotSummaries);\n        }\n    };\n    TestBedViewEngine.prototype.compileComponents = function () {\n        var _this = this;\n        if (this._moduleFactory || this._instantiated) {\n            return Promise.resolve(null);\n        }\n        var moduleType = this._createCompilerAndModule();\n        return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n            .then(function (moduleAndComponentFactories) {\n            _this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n        });\n    };\n    TestBedViewEngine.prototype._initIfNeeded = function () {\n        var e_1, _a;\n        if (this._instantiated) {\n            return;\n        }\n        if (!this._moduleFactory) {\n            try {\n                var moduleType = this._createCompilerAndModule();\n                this._moduleFactory =\n                    this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n            }\n            catch (e) {\n                var errorCompType = this._compiler.getComponentFromError(e);\n                if (errorCompType) {\n                    throw new Error(\"This test module uses the component \" + ɵstringify(errorCompType) + \" which is using a \\\"templateUrl\\\" or \\\"styleUrls\\\", but they were never compiled. \" +\n                        \"Please call \\\"TestBed.compileComponents\\\" before your test.\");\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        try {\n            for (var _b = __values(this._templateOverrides), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = _c.value, component = _d.component, templateOf = _d.templateOf;\n                var compFactory = this._compiler.getComponentFactory(templateOf);\n                ɵoverrideComponentView(component, compFactory);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var ngZone = new NgZone({ enableLongStackTrace: true, shouldCoalesceEventChangeDetection: false });\n        var providers = [{ provide: NgZone, useValue: ngZone }];\n        var ngZoneInjector = Injector.create({\n            providers: providers,\n            parent: this.platform.injector,\n            name: this._moduleFactory.moduleType.name\n        });\n        this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n        // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n        // before accessing it.\n        this._moduleRef.injector.get(ApplicationInitStatus).runInitializers();\n        this._instantiated = true;\n    };\n    TestBedViewEngine.prototype._createCompilerAndModule = function () {\n        var e_2, _a;\n        var _this = this;\n        var providers = this._providers.concat([{ provide: TestBed, useValue: this }]);\n        var declarations = __spread(this._declarations, this._templateOverrides.map(function (entry) { return entry.templateOf; }));\n        var rootScopeImports = [];\n        var rootProviderOverrides = this._rootProviderOverrides;\n        if (this._isRoot) {\n            var RootScopeModule = /** @class */ (function () {\n                function RootScopeModule() {\n                }\n                RootScopeModule = __decorate([\n                    NgModule({\n                        providers: __spread(rootProviderOverrides),\n                        jit: true,\n                    })\n                ], RootScopeModule);\n                return RootScopeModule;\n            }());\n            rootScopeImports.push(RootScopeModule);\n        }\n        providers.push({ provide: ɵINJECTOR_SCOPE, useValue: this._isRoot ? 'root' : null });\n        var imports = [rootScopeImports, this.ngModule, this._imports];\n        var schemas = this._schemas;\n        var DynamicTestModule = /** @class */ (function () {\n            function DynamicTestModule() {\n            }\n            DynamicTestModule = __decorate([\n                NgModule({ providers: providers, declarations: declarations, imports: imports, schemas: schemas, jit: true })\n            ], DynamicTestModule);\n            return DynamicTestModule;\n        }());\n        var compilerFactory = this.platform.injector.get(TestingCompilerFactory);\n        this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n        try {\n            for (var _b = __values(__spread([this._testEnvAotSummaries], this._aotSummaries)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var summary = _c.value;\n                this._compiler.loadAotSummaries(summary);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        this._moduleOverrides.forEach(function (entry) { return _this._compiler.overrideModule(entry[0], entry[1]); });\n        this._componentOverrides.forEach(function (entry) { return _this._compiler.overrideComponent(entry[0], entry[1]); });\n        this._directiveOverrides.forEach(function (entry) { return _this._compiler.overrideDirective(entry[0], entry[1]); });\n        this._pipeOverrides.forEach(function (entry) { return _this._compiler.overridePipe(entry[0], entry[1]); });\n        return DynamicTestModule;\n    };\n    TestBedViewEngine.prototype._assertNotInstantiated = function (methodName, methodDescription) {\n        if (this._instantiated) {\n            throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n        }\n    };\n    TestBedViewEngine.prototype.inject = function (token, notFoundValue, flags) {\n        this._initIfNeeded();\n        if (token === TestBed) {\n            return this;\n        }\n        // Tests can inject things from the ng module and from the compiler,\n        // but the ng module can't inject things from the compiler and vice versa.\n        var UNDEFINED = {};\n        var result = this._moduleRef.injector.get(token, UNDEFINED, flags);\n        return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue, flags) :\n            result;\n    };\n    /** @deprecated from v9.0.0 use TestBed.inject */\n    TestBedViewEngine.prototype.get = function (token, notFoundValue, flags) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (flags === void 0) { flags = InjectFlags.Default; }\n        return this.inject(token, notFoundValue, flags);\n    };\n    TestBedViewEngine.prototype.execute = function (tokens, fn, context) {\n        var _this = this;\n        this._initIfNeeded();\n        var params = tokens.map(function (t) { return _this.inject(t); });\n        return fn.apply(context, params);\n    };\n    TestBedViewEngine.prototype.overrideModule = function (ngModule, override) {\n        this._assertNotInstantiated('overrideModule', 'override module metadata');\n        this._moduleOverrides.push([ngModule, override]);\n    };\n    TestBedViewEngine.prototype.overrideComponent = function (component, override) {\n        this._assertNotInstantiated('overrideComponent', 'override component metadata');\n        this._componentOverrides.push([component, override]);\n    };\n    TestBedViewEngine.prototype.overrideDirective = function (directive, override) {\n        this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n        this._directiveOverrides.push([directive, override]);\n    };\n    TestBedViewEngine.prototype.overridePipe = function (pipe, override) {\n        this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n        this._pipeOverrides.push([pipe, override]);\n    };\n    TestBedViewEngine.prototype.overrideProvider = function (token, provider) {\n        this.overrideProviderImpl(token, provider);\n    };\n    TestBedViewEngine.prototype.overrideProviderImpl = function (token, provider, deprecated) {\n        if (deprecated === void 0) { deprecated = false; }\n        var def = null;\n        if (typeof token !== 'string' && (def = ɵgetInjectableDef(token)) && def.providedIn === 'root') {\n            if (provider.useFactory) {\n                this._rootProviderOverrides.push({ provide: token, useFactory: provider.useFactory, deps: provider.deps || [] });\n            }\n            else {\n                this._rootProviderOverrides.push({ provide: token, useValue: provider.useValue });\n            }\n        }\n        var flags = 0;\n        var value;\n        if (provider.useFactory) {\n            flags |= 1024 /* TypeFactoryProvider */;\n            value = provider.useFactory;\n        }\n        else {\n            flags |= 256 /* TypeValueProvider */;\n            value = provider.useValue;\n        }\n        var deps = (provider.deps || []).map(function (dep) {\n            var depFlags = 0 /* None */;\n            var depToken;\n            if (Array.isArray(dep)) {\n                dep.forEach(function (entry) {\n                    if (entry instanceof Optional) {\n                        depFlags |= 2 /* Optional */;\n                    }\n                    else if (entry instanceof SkipSelf) {\n                        depFlags |= 1 /* SkipSelf */;\n                    }\n                    else {\n                        depToken = entry;\n                    }\n                });\n            }\n            else {\n                depToken = dep;\n            }\n            return [depFlags, depToken];\n        });\n        ɵoverrideProvider({ token: token, flags: flags, deps: deps, value: value, deprecatedBehavior: deprecated });\n    };\n    TestBedViewEngine.prototype.overrideTemplateUsingTestingModule = function (component, template) {\n        this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n        var OverrideComponent = /** @class */ (function () {\n            function OverrideComponent() {\n            }\n            OverrideComponent = __decorate([\n                Component({ selector: 'empty', template: template, jit: true })\n            ], OverrideComponent);\n            return OverrideComponent;\n        }());\n        this._templateOverrides.push({ component: component, templateOf: OverrideComponent });\n    };\n    TestBedViewEngine.prototype.createComponent = function (component) {\n        var _this = this;\n        this._initIfNeeded();\n        var componentFactory = this._compiler.getComponentFactory(component);\n        if (!componentFactory) {\n            throw new Error(\"Cannot create the component \" + ɵstringify(component) + \" as it was not imported into the testing module!\");\n        }\n        // TODO: Don't cast as `InjectionToken<boolean>`, declared type is boolean[]\n        var noNgZone = this.inject(ComponentFixtureNoNgZone, false);\n        // TODO: Don't cast as `InjectionToken<boolean>`, declared type is boolean[]\n        var autoDetect = this.inject(ComponentFixtureAutoDetect, false);\n        var ngZone = noNgZone ? null : this.inject(NgZone, null);\n        var testComponentRenderer = this.inject(TestComponentRenderer);\n        var rootElId = \"root\" + _nextRootElementId$1++;\n        testComponentRenderer.insertRootElement(rootElId);\n        var initComponent = function () {\n            var componentRef = componentFactory.create(Injector.NULL, [], \"#\" + rootElId, _this._moduleRef);\n            return new ComponentFixture(componentRef, ngZone, autoDetect);\n        };\n        var fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n        this._activeFixtures.push(fixture);\n        return fixture;\n    };\n    return TestBedViewEngine;\n}());\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n *\n * @publicApi\n */\nvar TestBed = ɵivyEnabled ? TestBedRender3 : TestBedViewEngine;\n/**\n * Returns a singleton of the applicable `TestBed`.\n *\n * It will be either an instance of `TestBedViewEngine` or `TestBedRender3`.\n *\n * @publicApi\n */\nvar getTestBed = ɵivyEnabled ? _getTestBedRender3 : _getTestBedViewEngine;\nvar testBed$1;\nfunction _getTestBedViewEngine() {\n    return testBed$1 = testBed$1 || new TestBedViewEngine();\n}\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n * @publicApi\n */\nfunction inject(tokens, fn) {\n    var testBed = getTestBed();\n    if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var _this = this;\n            // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n            // the injected tokens.\n            return testBed.compileComponents().then(function () {\n                var completer = testBed.inject(AsyncTestCompleter);\n                testBed.execute(tokens, fn, _this);\n                return completer.promise;\n            });\n        };\n    }\n    else {\n        // Not using an arrow function to preserve context passed from call site\n        return function () { return testBed.execute(tokens, fn, this); };\n    }\n}\n/**\n * @publicApi\n */\nvar InjectSetupWrapper = /** @class */ (function () {\n    function InjectSetupWrapper(_moduleDef) {\n        this._moduleDef = _moduleDef;\n    }\n    InjectSetupWrapper.prototype._addModule = function () {\n        var moduleDef = this._moduleDef();\n        if (moduleDef) {\n            getTestBed().configureTestingModule(moduleDef);\n        }\n    };\n    InjectSetupWrapper.prototype.inject = function (tokens, fn) {\n        var self = this;\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            self._addModule();\n            return inject(tokens, fn).call(this);\n        };\n    };\n    return InjectSetupWrapper;\n}());\nfunction withModule(moduleDef, fn) {\n    if (fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var testBed = getTestBed();\n            if (moduleDef) {\n                testBed.configureTestingModule(moduleDef);\n            }\n            return fn.apply(this);\n        };\n    }\n    return new InjectSetupWrapper(function () { return moduleDef; });\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _global$1 = (typeof window === 'undefined' ? global : window);\n// Reset the test providers and the fake async zone before each test.\nif (_global$1.beforeEach) {\n    _global$1.beforeEach(function () {\n        TestBed.resetTestingModule();\n        resetFakeAsyncZone();\n    });\n}\n// TODO(juliemr): remove this, only used because we need to export something to have compilation\n// work.\nvar __core_private_testing_placeholder__ = '';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ComponentFixture, ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, InjectSetupWrapper, TestBed, TestComponentRenderer, __core_private_testing_placeholder__, async, discardPeriodicTasks, fakeAsync, flush, flushMicrotasks, getTestBed, inject, resetFakeAsyncZone, tick, withModule, MetadataOverrider as ɵMetadataOverrider, TestingCompiler as ɵTestingCompiler, TestingCompilerFactory as ɵTestingCompilerFactory, TestBedViewEngine as ɵangular_packages_core_testing_testing_a, TestBedRender3 as ɵangular_packages_core_testing_testing_b, _getTestBedRender3 as ɵangular_packages_core_testing_testing_c };\n"]}