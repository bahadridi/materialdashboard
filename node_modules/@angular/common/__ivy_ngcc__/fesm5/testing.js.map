{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/common/fesm5/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sEAiGsE;;;;;gDAGlD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAkFmB,AAEhC;;;;;;gDACsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAuLU,AAEhC;;;;;;;;;;;;kCAEsB","file":"testing.js","sourcesContent":["/**\n * @license Angular v9.0.1\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { __decorate, __extends, __metadata, __assign, __param } from 'tslib';\nimport { EventEmitter, Injectable, InjectionToken, Inject, Optional } from '@angular/core';\nimport { LocationStrategy } from '@angular/common';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A spy for {@link Location} that allows tests to fire simulated location events.\n *\n * @publicApi\n */\nvar SpyLocation = /** @class */ (function () {\n    function SpyLocation() {\n        this.urlChanges = [];\n        this._history = [new LocationState('', '', null)];\n        this._historyIndex = 0;\n        /** @internal */\n        this._subject = new EventEmitter();\n        /** @internal */\n        this._baseHref = '';\n        /** @internal */\n        this._platformStrategy = null;\n        /** @internal */\n        this._platformLocation = null;\n        /** @internal */\n        this._urlChangeListeners = [];\n    }\n    SpyLocation.prototype.setInitialPath = function (url) { this._history[this._historyIndex].path = url; };\n    SpyLocation.prototype.setBaseHref = function (url) { this._baseHref = url; };\n    SpyLocation.prototype.path = function () { return this._history[this._historyIndex].path; };\n    SpyLocation.prototype.getState = function () { return this._history[this._historyIndex].state; };\n    SpyLocation.prototype.isCurrentPathEqualTo = function (path, query) {\n        if (query === void 0) { query = ''; }\n        var givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;\n        var currPath = this.path().endsWith('/') ? this.path().substring(0, this.path().length - 1) : this.path();\n        return currPath == givenPath + (query.length > 0 ? ('?' + query) : '');\n    };\n    SpyLocation.prototype.simulateUrlPop = function (pathname) {\n        this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'popstate' });\n    };\n    SpyLocation.prototype.simulateHashChange = function (pathname) {\n        // Because we don't prevent the native event, the browser will independently update the path\n        this.setInitialPath(pathname);\n        this.urlChanges.push('hash: ' + pathname);\n        this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'hashchange' });\n    };\n    SpyLocation.prototype.prepareExternalUrl = function (url) {\n        if (url.length > 0 && !url.startsWith('/')) {\n            url = '/' + url;\n        }\n        return this._baseHref + url;\n    };\n    SpyLocation.prototype.go = function (path, query, state) {\n        if (query === void 0) { query = ''; }\n        if (state === void 0) { state = null; }\n        path = this.prepareExternalUrl(path);\n        if (this._historyIndex > 0) {\n            this._history.splice(this._historyIndex + 1);\n        }\n        this._history.push(new LocationState(path, query, state));\n        this._historyIndex = this._history.length - 1;\n        var locationState = this._history[this._historyIndex - 1];\n        if (locationState.path == path && locationState.query == query) {\n            return;\n        }\n        var url = path + (query.length > 0 ? ('?' + query) : '');\n        this.urlChanges.push(url);\n        this._subject.emit({ 'url': url, 'pop': false });\n    };\n    SpyLocation.prototype.replaceState = function (path, query, state) {\n        if (query === void 0) { query = ''; }\n        if (state === void 0) { state = null; }\n        path = this.prepareExternalUrl(path);\n        var history = this._history[this._historyIndex];\n        if (history.path == path && history.query == query) {\n            return;\n        }\n        history.path = path;\n        history.query = query;\n        history.state = state;\n        var url = path + (query.length > 0 ? ('?' + query) : '');\n        this.urlChanges.push('replace: ' + url);\n    };\n    SpyLocation.prototype.forward = function () {\n        if (this._historyIndex < (this._history.length - 1)) {\n            this._historyIndex++;\n            this._subject.emit({ 'url': this.path(), 'state': this.getState(), 'pop': true });\n        }\n    };\n    SpyLocation.prototype.back = function () {\n        if (this._historyIndex > 0) {\n            this._historyIndex--;\n            this._subject.emit({ 'url': this.path(), 'state': this.getState(), 'pop': true });\n        }\n    };\n    SpyLocation.prototype.onUrlChange = function (fn) {\n        var _this = this;\n        this._urlChangeListeners.push(fn);\n        this.subscribe(function (v) { _this._notifyUrlChangeListeners(v.url, v.state); });\n    };\n    /** @internal */\n    SpyLocation.prototype._notifyUrlChangeListeners = function (url, state) {\n        if (url === void 0) { url = ''; }\n        this._urlChangeListeners.forEach(function (fn) { return fn(url, state); });\n    };\n    SpyLocation.prototype.subscribe = function (onNext, onThrow, onReturn) {\n        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });\n    };\n    SpyLocation.prototype.normalize = function (url) { return null; };\n    SpyLocation = __decorate([\n        Injectable()\n    ], SpyLocation);\n    return SpyLocation;\n}());\nvar LocationState = /** @class */ (function () {\n    function LocationState(path, query, state) {\n        this.path = path;\n        this.query = query;\n        this.state = state;\n    }\n    return LocationState;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\n * location events.\n *\n * @publicApi\n */\nvar MockLocationStrategy = /** @class */ (function (_super) {\n    __extends(MockLocationStrategy, _super);\n    function MockLocationStrategy() {\n        var _this = _super.call(this) || this;\n        _this.internalBaseHref = '/';\n        _this.internalPath = '/';\n        _this.internalTitle = '';\n        _this.urlChanges = [];\n        /** @internal */\n        _this._subject = new EventEmitter();\n        _this.stateChanges = [];\n        return _this;\n    }\n    MockLocationStrategy.prototype.simulatePopState = function (url) {\n        this.internalPath = url;\n        this._subject.emit(new _MockPopStateEvent(this.path()));\n    };\n    MockLocationStrategy.prototype.path = function (includeHash) {\n        if (includeHash === void 0) { includeHash = false; }\n        return this.internalPath;\n    };\n    MockLocationStrategy.prototype.prepareExternalUrl = function (internal) {\n        if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\n            return this.internalBaseHref + internal.substring(1);\n        }\n        return this.internalBaseHref + internal;\n    };\n    MockLocationStrategy.prototype.pushState = function (ctx, title, path, query) {\n        // Add state change to changes array\n        this.stateChanges.push(ctx);\n        this.internalTitle = title;\n        var url = path + (query.length > 0 ? ('?' + query) : '');\n        this.internalPath = url;\n        var externalUrl = this.prepareExternalUrl(url);\n        this.urlChanges.push(externalUrl);\n    };\n    MockLocationStrategy.prototype.replaceState = function (ctx, title, path, query) {\n        // Reset the last index of stateChanges to the ctx (state) object\n        this.stateChanges[(this.stateChanges.length || 1) - 1] = ctx;\n        this.internalTitle = title;\n        var url = path + (query.length > 0 ? ('?' + query) : '');\n        this.internalPath = url;\n        var externalUrl = this.prepareExternalUrl(url);\n        this.urlChanges.push('replace: ' + externalUrl);\n    };\n    MockLocationStrategy.prototype.onPopState = function (fn) { this._subject.subscribe({ next: fn }); };\n    MockLocationStrategy.prototype.getBaseHref = function () { return this.internalBaseHref; };\n    MockLocationStrategy.prototype.back = function () {\n        if (this.urlChanges.length > 0) {\n            this.urlChanges.pop();\n            this.stateChanges.pop();\n            var nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\n            this.simulatePopState(nextUrl);\n        }\n    };\n    MockLocationStrategy.prototype.forward = function () { throw 'not implemented'; };\n    MockLocationStrategy.prototype.getState = function () { return this.stateChanges[(this.stateChanges.length || 1) - 1]; };\n    MockLocationStrategy = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [])\n    ], MockLocationStrategy);\n    return MockLocationStrategy;\n}(LocationStrategy));\nvar _MockPopStateEvent = /** @class */ (function () {\n    function _MockPopStateEvent(newUrl) {\n        this.newUrl = newUrl;\n        this.pop = true;\n        this.type = 'popstate';\n    }\n    return _MockPopStateEvent;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Parser from https://tools.ietf.org/html/rfc3986#appendix-B\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n *\n * Example: http://www.ics.uci.edu/pub/ietf/uri/#Related\n *\n * Results in:\n *\n * $1 = http:\n * $2 = http\n * $3 = //www.ics.uci.edu\n * $4 = www.ics.uci.edu\n * $5 = /pub/ietf/uri/\n * $6 = <undefined>\n * $7 = <undefined>\n * $8 = #Related\n * $9 = Related\n */\nvar urlParse = /^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\nfunction parseUrl(urlStr, baseHref) {\n    var verifyProtocol = /^((http[s]?|ftp):\\/\\/)/;\n    var serverBase;\n    // URL class requires full URL. If the URL string doesn't start with protocol, we need to add\n    // an arbitrary base URL which can be removed afterward.\n    if (!verifyProtocol.test(urlStr)) {\n        serverBase = 'http://empty.com/';\n    }\n    var parsedUrl;\n    try {\n        parsedUrl = new URL(urlStr, serverBase);\n    }\n    catch (e) {\n        var result = urlParse.exec(serverBase || '' + urlStr);\n        if (!result) {\n            throw new Error(\"Invalid URL: \" + urlStr + \" with base: \" + baseHref);\n        }\n        var hostSplit = result[4].split(':');\n        parsedUrl = {\n            protocol: result[1],\n            hostname: hostSplit[0],\n            port: hostSplit[1] || '',\n            pathname: result[5],\n            search: result[6],\n            hash: result[8],\n        };\n    }\n    if (parsedUrl.pathname && parsedUrl.pathname.indexOf(baseHref) === 0) {\n        parsedUrl.pathname = parsedUrl.pathname.substring(baseHref.length);\n    }\n    return {\n        hostname: !serverBase && parsedUrl.hostname || '',\n        protocol: !serverBase && parsedUrl.protocol || '',\n        port: !serverBase && parsedUrl.port || '',\n        pathname: parsedUrl.pathname || '/',\n        search: parsedUrl.search || '',\n        hash: parsedUrl.hash || '',\n    };\n}\n/**\n * Provider for mock platform location config\n *\n * @publicApi\n */\nvar MOCK_PLATFORM_LOCATION_CONFIG = new InjectionToken('MOCK_PLATFORM_LOCATION_CONFIG');\n/**\n * Mock implementation of URL state.\n *\n * @publicApi\n */\nvar MockPlatformLocation = /** @class */ (function () {\n    function MockPlatformLocation(config) {\n        this.baseHref = '';\n        this.hashUpdate = new Subject();\n        this.urlChanges = [{ hostname: '', protocol: '', port: '', pathname: '/', search: '', hash: '', state: null }];\n        if (config) {\n            this.baseHref = config.appBaseHref || '';\n            var parsedChanges = this.parseChanges(null, config.startUrl || 'http://<empty>/', this.baseHref);\n            this.urlChanges[0] = __assign({}, parsedChanges);\n        }\n    }\n    Object.defineProperty(MockPlatformLocation.prototype, \"hostname\", {\n        get: function () { return this.urlChanges[0].hostname; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MockPlatformLocation.prototype, \"protocol\", {\n        get: function () { return this.urlChanges[0].protocol; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MockPlatformLocation.prototype, \"port\", {\n        get: function () { return this.urlChanges[0].port; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MockPlatformLocation.prototype, \"pathname\", {\n        get: function () { return this.urlChanges[0].pathname; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MockPlatformLocation.prototype, \"search\", {\n        get: function () { return this.urlChanges[0].search; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MockPlatformLocation.prototype, \"hash\", {\n        get: function () { return this.urlChanges[0].hash; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MockPlatformLocation.prototype, \"state\", {\n        get: function () { return this.urlChanges[0].state; },\n        enumerable: true,\n        configurable: true\n    });\n    MockPlatformLocation.prototype.getBaseHrefFromDOM = function () { return this.baseHref; };\n    MockPlatformLocation.prototype.onPopState = function (fn) {\n        // No-op: a state stack is not implemented, so\n        // no events will ever come.\n    };\n    MockPlatformLocation.prototype.onHashChange = function (fn) { this.hashUpdate.subscribe(fn); };\n    Object.defineProperty(MockPlatformLocation.prototype, \"href\", {\n        get: function () {\n            var url = this.protocol + \"//\" + this.hostname + (this.port ? ':' + this.port : '');\n            url += \"\" + (this.pathname === '/' ? '' : this.pathname) + this.search + this.hash;\n            return url;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MockPlatformLocation.prototype, \"url\", {\n        get: function () { return \"\" + this.pathname + this.search + this.hash; },\n        enumerable: true,\n        configurable: true\n    });\n    MockPlatformLocation.prototype.parseChanges = function (state, url, baseHref) {\n        if (baseHref === void 0) { baseHref = ''; }\n        // When the `history.state` value is stored, it is always copied.\n        state = JSON.parse(JSON.stringify(state));\n        return __assign(__assign({}, parseUrl(url, baseHref)), { state: state });\n    };\n    MockPlatformLocation.prototype.replaceState = function (state, title, newUrl) {\n        var _a = this.parseChanges(state, newUrl), pathname = _a.pathname, search = _a.search, parsedState = _a.state, hash = _a.hash;\n        this.urlChanges[0] = __assign(__assign({}, this.urlChanges[0]), { pathname: pathname, search: search, hash: hash, state: parsedState });\n    };\n    MockPlatformLocation.prototype.pushState = function (state, title, newUrl) {\n        var _a = this.parseChanges(state, newUrl), pathname = _a.pathname, search = _a.search, parsedState = _a.state, hash = _a.hash;\n        this.urlChanges.unshift(__assign(__assign({}, this.urlChanges[0]), { pathname: pathname, search: search, hash: hash, state: parsedState }));\n    };\n    MockPlatformLocation.prototype.forward = function () { throw new Error('Not implemented'); };\n    MockPlatformLocation.prototype.back = function () {\n        var _this = this;\n        var oldUrl = this.url;\n        var oldHash = this.hash;\n        this.urlChanges.shift();\n        var newHash = this.hash;\n        if (oldHash !== newHash) {\n            scheduleMicroTask(function () { return _this.hashUpdate.next({\n                type: 'hashchange', state: null, oldUrl: oldUrl, newUrl: _this.url\n            }); });\n        }\n    };\n    MockPlatformLocation.prototype.getState = function () { return this.state; };\n    MockPlatformLocation = __decorate([\n        Injectable(),\n        __param(0, Inject(MOCK_PLATFORM_LOCATION_CONFIG)), __param(0, Optional()),\n        __metadata(\"design:paramtypes\", [Object])\n    ], MockPlatformLocation);\n    return MockPlatformLocation;\n}());\nfunction scheduleMicroTask(cb) {\n    Promise.resolve(null).then(cb);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MOCK_PLATFORM_LOCATION_CONFIG, MockLocationStrategy, MockPlatformLocation, SpyLocation };\n"]}