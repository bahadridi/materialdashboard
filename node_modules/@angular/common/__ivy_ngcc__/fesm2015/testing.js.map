{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/common/fesm2015/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuLC;;;gDAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6KD,2HAGC;;;;;gDAE6C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiR9C,2HAGC;;;;;;;;;;;;kCAIA","file":"testing.js","sourcesContent":["/**\n * @license Angular v9.0.1\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { EventEmitter, Injectable, InjectionToken, Inject, Optional } from '@angular/core';\nimport { LocationStrategy } from '@angular/common';\nimport { Subject } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/testing/src/location_mock.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A spy for {\\@link Location} that allows tests to fire simulated location events.\n *\n * \\@publicApi\n */\nclass SpyLocation {\n    constructor() {\n        this.urlChanges = [];\n        this._history = [new LocationState('', '', null)];\n        this._historyIndex = 0;\n        /**\n         * \\@internal\n         */\n        this._subject = new EventEmitter();\n        /**\n         * \\@internal\n         */\n        this._baseHref = '';\n        /**\n         * \\@internal\n         */\n        this._platformStrategy = (/** @type {?} */ (null));\n        /**\n         * \\@internal\n         */\n        this._platformLocation = (/** @type {?} */ (null));\n        /**\n         * \\@internal\n         */\n        this._urlChangeListeners = [];\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    setInitialPath(url) { this._history[this._historyIndex].path = url; }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    setBaseHref(url) { this._baseHref = url; }\n    /**\n     * @return {?}\n     */\n    path() { return this._history[this._historyIndex].path; }\n    /**\n     * @return {?}\n     */\n    getState() { return this._history[this._historyIndex].state; }\n    /**\n     * @param {?} path\n     * @param {?=} query\n     * @return {?}\n     */\n    isCurrentPathEqualTo(path, query = '') {\n        /** @type {?} */\n        const givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;\n        /** @type {?} */\n        const currPath = this.path().endsWith('/') ? this.path().substring(0, this.path().length - 1) : this.path();\n        return currPath == givenPath + (query.length > 0 ? ('?' + query) : '');\n    }\n    /**\n     * @param {?} pathname\n     * @return {?}\n     */\n    simulateUrlPop(pathname) {\n        this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'popstate' });\n    }\n    /**\n     * @param {?} pathname\n     * @return {?}\n     */\n    simulateHashChange(pathname) {\n        // Because we don't prevent the native event, the browser will independently update the path\n        this.setInitialPath(pathname);\n        this.urlChanges.push('hash: ' + pathname);\n        this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'hashchange' });\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    prepareExternalUrl(url) {\n        if (url.length > 0 && !url.startsWith('/')) {\n            url = '/' + url;\n        }\n        return this._baseHref + url;\n    }\n    /**\n     * @param {?} path\n     * @param {?=} query\n     * @param {?=} state\n     * @return {?}\n     */\n    go(path, query = '', state = null) {\n        path = this.prepareExternalUrl(path);\n        if (this._historyIndex > 0) {\n            this._history.splice(this._historyIndex + 1);\n        }\n        this._history.push(new LocationState(path, query, state));\n        this._historyIndex = this._history.length - 1;\n        /** @type {?} */\n        const locationState = this._history[this._historyIndex - 1];\n        if (locationState.path == path && locationState.query == query) {\n            return;\n        }\n        /** @type {?} */\n        const url = path + (query.length > 0 ? ('?' + query) : '');\n        this.urlChanges.push(url);\n        this._subject.emit({ 'url': url, 'pop': false });\n    }\n    /**\n     * @param {?} path\n     * @param {?=} query\n     * @param {?=} state\n     * @return {?}\n     */\n    replaceState(path, query = '', state = null) {\n        path = this.prepareExternalUrl(path);\n        /** @type {?} */\n        const history = this._history[this._historyIndex];\n        if (history.path == path && history.query == query) {\n            return;\n        }\n        history.path = path;\n        history.query = query;\n        history.state = state;\n        /** @type {?} */\n        const url = path + (query.length > 0 ? ('?' + query) : '');\n        this.urlChanges.push('replace: ' + url);\n    }\n    /**\n     * @return {?}\n     */\n    forward() {\n        if (this._historyIndex < (this._history.length - 1)) {\n            this._historyIndex++;\n            this._subject.emit({ 'url': this.path(), 'state': this.getState(), 'pop': true });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    back() {\n        if (this._historyIndex > 0) {\n            this._historyIndex--;\n            this._subject.emit({ 'url': this.path(), 'state': this.getState(), 'pop': true });\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onUrlChange(fn) {\n        this._urlChangeListeners.push(fn);\n        this.subscribe((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => { this._notifyUrlChangeListeners(v.url, v.state); }));\n    }\n    /**\n     * \\@internal\n     * @param {?=} url\n     * @param {?=} state\n     * @return {?}\n     */\n    _notifyUrlChangeListeners(url = '', state) {\n        this._urlChangeListeners.forEach((/**\n         * @param {?} fn\n         * @return {?}\n         */\n        fn => fn(url, state)));\n    }\n    /**\n     * @param {?} onNext\n     * @param {?=} onThrow\n     * @param {?=} onReturn\n     * @return {?}\n     */\n    subscribe(onNext, onThrow, onReturn) {\n        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    normalize(url) { return (/** @type {?} */ (null)); }\n}\nSpyLocation.decorators = [\n    { type: Injectable }\n];\nif (false) {\n    /** @type {?} */\n    SpyLocation.prototype.urlChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    SpyLocation.prototype._history;\n    /**\n     * @type {?}\n     * @private\n     */\n    SpyLocation.prototype._historyIndex;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    SpyLocation.prototype._subject;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    SpyLocation.prototype._baseHref;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    SpyLocation.prototype._platformStrategy;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    SpyLocation.prototype._platformLocation;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    SpyLocation.prototype._urlChangeListeners;\n}\nclass LocationState {\n    /**\n     * @param {?} path\n     * @param {?} query\n     * @param {?} state\n     */\n    constructor(path, query, state) {\n        this.path = path;\n        this.query = query;\n        this.state = state;\n    }\n}\nif (false) {\n    /** @type {?} */\n    LocationState.prototype.path;\n    /** @type {?} */\n    LocationState.prototype.query;\n    /** @type {?} */\n    LocationState.prototype.state;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/testing/src/mock_location_strategy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A mock implementation of {\\@link LocationStrategy} that allows tests to fire simulated\n * location events.\n *\n * \\@publicApi\n */\nclass MockLocationStrategy extends LocationStrategy {\n    constructor() {\n        super();\n        this.internalBaseHref = '/';\n        this.internalPath = '/';\n        this.internalTitle = '';\n        this.urlChanges = [];\n        /**\n         * \\@internal\n         */\n        this._subject = new EventEmitter();\n        this.stateChanges = [];\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    simulatePopState(url) {\n        this.internalPath = url;\n        this._subject.emit(new _MockPopStateEvent(this.path()));\n    }\n    /**\n     * @param {?=} includeHash\n     * @return {?}\n     */\n    path(includeHash = false) { return this.internalPath; }\n    /**\n     * @param {?} internal\n     * @return {?}\n     */\n    prepareExternalUrl(internal) {\n        if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\n            return this.internalBaseHref + internal.substring(1);\n        }\n        return this.internalBaseHref + internal;\n    }\n    /**\n     * @param {?} ctx\n     * @param {?} title\n     * @param {?} path\n     * @param {?} query\n     * @return {?}\n     */\n    pushState(ctx, title, path, query) {\n        // Add state change to changes array\n        this.stateChanges.push(ctx);\n        this.internalTitle = title;\n        /** @type {?} */\n        const url = path + (query.length > 0 ? ('?' + query) : '');\n        this.internalPath = url;\n        /** @type {?} */\n        const externalUrl = this.prepareExternalUrl(url);\n        this.urlChanges.push(externalUrl);\n    }\n    /**\n     * @param {?} ctx\n     * @param {?} title\n     * @param {?} path\n     * @param {?} query\n     * @return {?}\n     */\n    replaceState(ctx, title, path, query) {\n        // Reset the last index of stateChanges to the ctx (state) object\n        this.stateChanges[(this.stateChanges.length || 1) - 1] = ctx;\n        this.internalTitle = title;\n        /** @type {?} */\n        const url = path + (query.length > 0 ? ('?' + query) : '');\n        this.internalPath = url;\n        /** @type {?} */\n        const externalUrl = this.prepareExternalUrl(url);\n        this.urlChanges.push('replace: ' + externalUrl);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onPopState(fn) { this._subject.subscribe({ next: fn }); }\n    /**\n     * @return {?}\n     */\n    getBaseHref() { return this.internalBaseHref; }\n    /**\n     * @return {?}\n     */\n    back() {\n        if (this.urlChanges.length > 0) {\n            this.urlChanges.pop();\n            this.stateChanges.pop();\n            /** @type {?} */\n            const nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\n            this.simulatePopState(nextUrl);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    forward() { throw 'not implemented'; }\n    /**\n     * @return {?}\n     */\n    getState() { return this.stateChanges[(this.stateChanges.length || 1) - 1]; }\n}\nMockLocationStrategy.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nMockLocationStrategy.ctorParameters = () => [];\nif (false) {\n    /** @type {?} */\n    MockLocationStrategy.prototype.internalBaseHref;\n    /** @type {?} */\n    MockLocationStrategy.prototype.internalPath;\n    /** @type {?} */\n    MockLocationStrategy.prototype.internalTitle;\n    /** @type {?} */\n    MockLocationStrategy.prototype.urlChanges;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    MockLocationStrategy.prototype._subject;\n    /**\n     * @type {?}\n     * @private\n     */\n    MockLocationStrategy.prototype.stateChanges;\n}\nclass _MockPopStateEvent {\n    /**\n     * @param {?} newUrl\n     */\n    constructor(newUrl) {\n        this.newUrl = newUrl;\n        this.pop = true;\n        this.type = 'popstate';\n    }\n}\nif (false) {\n    /** @type {?} */\n    _MockPopStateEvent.prototype.pop;\n    /** @type {?} */\n    _MockPopStateEvent.prototype.type;\n    /** @type {?} */\n    _MockPopStateEvent.prototype.newUrl;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/testing/src/mock_platform_location.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Parser from https://tools.ietf.org/html/rfc3986#appendix-B\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n *\n * Example: http://www.ics.uci.edu/pub/ietf/uri/#Related\n *\n * Results in:\n *\n * $1 = http:\n * $2 = http\n * $3 = //www.ics.uci.edu\n * $4 = www.ics.uci.edu\n * $5 = /pub/ietf/uri/\n * $6 = <undefined>\n * $7 = <undefined>\n * $8 = #Related\n * $9 = Related\n * @type {?}\n */\nconst urlParse = /^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n/**\n * @param {?} urlStr\n * @param {?} baseHref\n * @return {?}\n */\nfunction parseUrl(urlStr, baseHref) {\n    /** @type {?} */\n    const verifyProtocol = /^((http[s]?|ftp):\\/\\/)/;\n    /** @type {?} */\n    let serverBase;\n    // URL class requires full URL. If the URL string doesn't start with protocol, we need to add\n    // an arbitrary base URL which can be removed afterward.\n    if (!verifyProtocol.test(urlStr)) {\n        serverBase = 'http://empty.com/';\n    }\n    /** @type {?} */\n    let parsedUrl;\n    try {\n        parsedUrl = new URL(urlStr, serverBase);\n    }\n    catch (e) {\n        /** @type {?} */\n        const result = urlParse.exec(serverBase || '' + urlStr);\n        if (!result) {\n            throw new Error(`Invalid URL: ${urlStr} with base: ${baseHref}`);\n        }\n        /** @type {?} */\n        const hostSplit = result[4].split(':');\n        parsedUrl = {\n            protocol: result[1],\n            hostname: hostSplit[0],\n            port: hostSplit[1] || '',\n            pathname: result[5],\n            search: result[6],\n            hash: result[8],\n        };\n    }\n    if (parsedUrl.pathname && parsedUrl.pathname.indexOf(baseHref) === 0) {\n        parsedUrl.pathname = parsedUrl.pathname.substring(baseHref.length);\n    }\n    return {\n        hostname: !serverBase && parsedUrl.hostname || '',\n        protocol: !serverBase && parsedUrl.protocol || '',\n        port: !serverBase && parsedUrl.port || '',\n        pathname: parsedUrl.pathname || '/',\n        search: parsedUrl.search || '',\n        hash: parsedUrl.hash || '',\n    };\n}\n/**\n * Mock platform location config\n *\n * \\@publicApi\n * @record\n */\nfunction MockPlatformLocationConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    MockPlatformLocationConfig.prototype.startUrl;\n    /** @type {?|undefined} */\n    MockPlatformLocationConfig.prototype.appBaseHref;\n}\n/**\n * Provider for mock platform location config\n *\n * \\@publicApi\n * @type {?}\n */\nconst MOCK_PLATFORM_LOCATION_CONFIG = new InjectionToken('MOCK_PLATFORM_LOCATION_CONFIG');\n/**\n * Mock implementation of URL state.\n *\n * \\@publicApi\n */\nclass MockPlatformLocation {\n    /**\n     * @param {?=} config\n     */\n    constructor(config) {\n        this.baseHref = '';\n        this.hashUpdate = new Subject();\n        this.urlChanges = [{ hostname: '', protocol: '', port: '', pathname: '/', search: '', hash: '', state: null }];\n        if (config) {\n            this.baseHref = config.appBaseHref || '';\n            /** @type {?} */\n            const parsedChanges = this.parseChanges(null, config.startUrl || 'http://<empty>/', this.baseHref);\n            this.urlChanges[0] = Object.assign({}, parsedChanges);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get hostname() { return this.urlChanges[0].hostname; }\n    /**\n     * @return {?}\n     */\n    get protocol() { return this.urlChanges[0].protocol; }\n    /**\n     * @return {?}\n     */\n    get port() { return this.urlChanges[0].port; }\n    /**\n     * @return {?}\n     */\n    get pathname() { return this.urlChanges[0].pathname; }\n    /**\n     * @return {?}\n     */\n    get search() { return this.urlChanges[0].search; }\n    /**\n     * @return {?}\n     */\n    get hash() { return this.urlChanges[0].hash; }\n    /**\n     * @return {?}\n     */\n    get state() { return this.urlChanges[0].state; }\n    /**\n     * @return {?}\n     */\n    getBaseHrefFromDOM() { return this.baseHref; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onPopState(fn) {\n        // No-op: a state stack is not implemented, so\n        // no events will ever come.\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onHashChange(fn) { this.hashUpdate.subscribe(fn); }\n    /**\n     * @return {?}\n     */\n    get href() {\n        /** @type {?} */\n        let url = `${this.protocol}//${this.hostname}${this.port ? ':' + this.port : ''}`;\n        url += `${this.pathname === '/' ? '' : this.pathname}${this.search}${this.hash}`;\n        return url;\n    }\n    /**\n     * @return {?}\n     */\n    get url() { return `${this.pathname}${this.search}${this.hash}`; }\n    /**\n     * @private\n     * @param {?} state\n     * @param {?} url\n     * @param {?=} baseHref\n     * @return {?}\n     */\n    parseChanges(state, url, baseHref = '') {\n        // When the `history.state` value is stored, it is always copied.\n        state = JSON.parse(JSON.stringify(state));\n        return Object.assign(Object.assign({}, parseUrl(url, baseHref)), { state });\n    }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} newUrl\n     * @return {?}\n     */\n    replaceState(state, title, newUrl) {\n        const { pathname, search, state: parsedState, hash } = this.parseChanges(state, newUrl);\n        this.urlChanges[0] = Object.assign(Object.assign({}, this.urlChanges[0]), { pathname, search, hash, state: parsedState });\n    }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} newUrl\n     * @return {?}\n     */\n    pushState(state, title, newUrl) {\n        const { pathname, search, state: parsedState, hash } = this.parseChanges(state, newUrl);\n        this.urlChanges.unshift(Object.assign(Object.assign({}, this.urlChanges[0]), { pathname, search, hash, state: parsedState }));\n    }\n    /**\n     * @return {?}\n     */\n    forward() { throw new Error('Not implemented'); }\n    /**\n     * @return {?}\n     */\n    back() {\n        /** @type {?} */\n        const oldUrl = this.url;\n        /** @type {?} */\n        const oldHash = this.hash;\n        this.urlChanges.shift();\n        /** @type {?} */\n        const newHash = this.hash;\n        if (oldHash !== newHash) {\n            scheduleMicroTask((/**\n             * @return {?}\n             */\n            () => this.hashUpdate.next((/** @type {?} */ ({\n                type: 'hashchange', state: null, oldUrl, newUrl: this.url\n            })))));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getState() { return this.state; }\n}\nMockPlatformLocation.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nMockPlatformLocation.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [MOCK_PLATFORM_LOCATION_CONFIG,] }, { type: Optional }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MockPlatformLocation.prototype.baseHref;\n    /**\n     * @type {?}\n     * @private\n     */\n    MockPlatformLocation.prototype.hashUpdate;\n    /**\n     * @type {?}\n     * @private\n     */\n    MockPlatformLocation.prototype.urlChanges;\n}\n/**\n * @param {?} cb\n * @return {?}\n */\nfunction scheduleMicroTask(cb) {\n    Promise.resolve(null).then(cb);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/testing/src/testing.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/testing/public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/common/testing/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MOCK_PLATFORM_LOCATION_CONFIG, MockLocationStrategy, MockPlatformLocation, SpyLocation };\n"]}