{"version":3,"file":"menu-item.d.ts","sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/material/menu/menu-item.d.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusableOption, FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { ElementRef, OnDestroy } from '@angular/core';\nimport { CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { MatMenuPanel } from './menu-panel';\n/** @docs-private */\ndeclare class MatMenuItemBase {\n}\ndeclare const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase;\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\nexport declare class MatMenuItem extends _MatMenuItemMixinBase implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n    private _elementRef;\n    private _focusMonitor?;\n    _parentMenu?: MatMenuPanel<MatMenuItem> | undefined;\n    /** ARIA role for the menu item. */\n    role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox';\n    private _document;\n    /** Stream that emits when the menu item is hovered. */\n    readonly _hovered: Subject<MatMenuItem>;\n    /** Stream that emits when the menu item is focused. */\n    readonly _focused: Subject<MatMenuItem>;\n    /** Whether the menu item is highlighted. */\n    _highlighted: boolean;\n    /** Whether the menu item acts as a trigger for a sub-menu. */\n    _triggersSubmenu: boolean;\n    constructor(_elementRef: ElementRef<HTMLElement>, document?: any, _focusMonitor?: FocusMonitor | undefined, _parentMenu?: MatMenuPanel<MatMenuItem> | undefined);\n    /** Focuses the menu item. */\n    focus(origin?: FocusOrigin, options?: FocusOptions): void;\n    ngOnDestroy(): void;\n    /** Used to set the `tabindex`. */\n    _getTabIndex(): string;\n    /** Returns the host DOM element. */\n    _getHostElement(): HTMLElement;\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event: Event): void;\n    /** Emits to the hover stream. */\n    _handleMouseEnter(): void;\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string;\n    static ngAcceptInputType_disabled: BooleanInput;\n    static ngAcceptInputType_disableRipple: BooleanInput;\n}\nexport {};\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;;"}