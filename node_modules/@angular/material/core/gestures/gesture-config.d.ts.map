{"version":3,"file":"gesture-config.d.ts","sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/material/core/gestures/gesture-config.d.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '@angular/core';\nimport { HammerGestureConfig } from '@angular/platform-browser';\nimport { MatCommonModule } from '../common-behaviors/common-module';\nimport { HammerInstance, HammerOptions } from './gesture-annotations';\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 10.0.0\n */\nexport declare const MAT_HAMMER_OPTIONS: InjectionToken<HammerOptions>;\n/**\n * Adjusts configuration of our gesture library, Hammer.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 10.0.0\n */\nexport declare class GestureConfig extends HammerGestureConfig {\n    private _hammerOptions?;\n    /** List of new event names to add to the gesture support list */\n    events: string[];\n    constructor(_hammerOptions?: HammerOptions | undefined, _commonModule?: MatCommonModule);\n    /**\n     * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n     *\n     * Our gesture names come from the Material Design gestures spec:\n     * https://material.io/design/#gestures-touch-mechanics\n     *\n     * More information on default recognizers can be found in Hammer docs:\n     * http://hammerjs.github.io/recognizer-pan/\n     * http://hammerjs.github.io/recognizer-press/\n     *\n     * @param element Element to which to assign the new HammerJS gestures.\n     * @returns Newly-created HammerJS instance.\n     */\n    buildHammer(element: HTMLElement): HammerInstance;\n    /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n    private _createRecognizer;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;"}