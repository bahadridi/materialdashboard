{"version":3,"file":"datepicker-input.d.ts","sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/material/datepicker/datepicker-input.d.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { ElementRef, EventEmitter, OnDestroy } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';\nimport { DateAdapter, MatDateFormats, ThemePalette } from '@angular/material/core';\nimport { MatFormField } from '@angular/material/form-field';\nimport { MatDatepicker } from './datepicker';\n/** @docs-private */\nexport declare const MAT_DATEPICKER_VALUE_ACCESSOR: any;\n/** @docs-private */\nexport declare const MAT_DATEPICKER_VALIDATORS: any;\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport declare class MatDatepickerInputEvent<D> {\n    /** Reference to the datepicker input component that emitted the event. */\n    target: MatDatepickerInput<D>;\n    /** Reference to the native input element associated with the datepicker input. */\n    targetElement: HTMLElement;\n    /** The new value for the target datepicker input. */\n    value: D | null;\n    constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    target: MatDatepickerInput<D>, \n    /** Reference to the native input element associated with the datepicker input. */\n    targetElement: HTMLElement);\n}\n/** Directive used to connect an input to a MatDatepicker. */\nexport declare class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n    private _elementRef;\n    _dateAdapter: DateAdapter<D>;\n    private _dateFormats;\n    private _formField;\n    /** The datepicker that this input is associated with. */\n    set matDatepicker(value: MatDatepicker<D>);\n    _datepicker: MatDatepicker<D>;\n    /** Function that can be used to filter out dates within the datepicker. */\n    set matDatepickerFilter(value: (date: D | null) => boolean);\n    _dateFilter: (date: D | null) => boolean;\n    /** The value of the input. */\n    get value(): D | null;\n    set value(value: D | null);\n    private _value;\n    /** The minimum valid date. */\n    get min(): D | null;\n    set min(value: D | null);\n    private _min;\n    /** The maximum valid date. */\n    get max(): D | null;\n    set max(value: D | null);\n    private _max;\n    /** Whether the datepicker-input is disabled. */\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    private _disabled;\n    /** Emits when a `change` event is fired on this `<input>`. */\n    readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>>;\n    /** Emits when an `input` event is fired on this `<input>`. */\n    readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>>;\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    _valueChange: EventEmitter<D | null>;\n    /** Emits when the disabled state has changed */\n    _disabledChange: EventEmitter<boolean>;\n    _onTouched: () => void;\n    private _cvaOnChange;\n    private _validatorOnChange;\n    private _datepickerSubscription;\n    private _localeSubscription;\n    /** The form control validator for whether the input parses. */\n    private _parseValidator;\n    /** The form control validator for the min date. */\n    private _minValidator;\n    /** The form control validator for the max date. */\n    private _maxValidator;\n    /** The form control validator for the date filter. */\n    private _filterValidator;\n    /** The combined form control validator for this input. */\n    private _validator;\n    /** Whether the last value set on the input was valid. */\n    private _lastValueValid;\n    constructor(_elementRef: ElementRef<HTMLInputElement>, _dateAdapter: DateAdapter<D>, _dateFormats: MatDateFormats, _formField: MatFormField);\n    ngOnDestroy(): void;\n    /** @docs-private */\n    registerOnValidatorChange(fn: () => void): void;\n    /** @docs-private */\n    validate(c: AbstractControl): ValidationErrors | null;\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n     */\n    getPopupConnectionElementRef(): ElementRef;\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return The element to connect the popup to.\n     */\n    getConnectedOverlayOrigin(): ElementRef;\n    writeValue(value: D): void;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: () => void): void;\n    setDisabledState(isDisabled: boolean): void;\n    _onKeydown(event: KeyboardEvent): void;\n    _onInput(value: string): void;\n    _onChange(): void;\n    /** Returns the palette used by the input's form field, if any. */\n    _getThemePalette(): ThemePalette;\n    /** Handles blur events on the input. */\n    _onBlur(): void;\n    /** Formats a value and sets it on the input element. */\n    private _formatValue;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull;\n    static ngAcceptInputType_value: any;\n    static ngAcceptInputType_disabled: BooleanInput;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;"}