{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/material/fesm2015/divider.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyBC,qeAiBC;;;;;;;;;;;;;;;;;;;;;;;;;;oBAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;CAwBD;;;;;;;;;;0BAOC","file":"divider.js","sourcesContent":["import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/divider/divider.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatDivider {\n    constructor() {\n        this._vertical = false;\n        this._inset = false;\n    }\n    /**\n     * Whether the divider is vertically aligned.\n     * @return {?}\n     */\n    get vertical() { return this._vertical; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set vertical(value) { this._vertical = coerceBooleanProperty(value); }\n    /**\n     * Whether the divider is an inset divider.\n     * @return {?}\n     */\n    get inset() { return this._inset; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set inset(value) { this._inset = coerceBooleanProperty(value); }\n}\nMatDivider.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-divider',\n                host: {\n                    'role': 'separator',\n                    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                    '[class.mat-divider-vertical]': 'vertical',\n                    '[class.mat-divider-horizontal]': '!vertical',\n                    '[class.mat-divider-inset]': 'inset',\n                    'class': 'mat-divider'\n                },\n                template: '',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\\n\"]\n            }] }\n];\nMatDivider.propDecorators = {\n    vertical: [{ type: Input }],\n    inset: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatDivider.ngAcceptInputType_vertical;\n    /** @type {?} */\n    MatDivider.ngAcceptInputType_inset;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDivider.prototype._vertical;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDivider.prototype._inset;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/divider/divider-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatDividerModule {\n}\nMatDividerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule, CommonModule],\n                exports: [MatDivider, MatCommonModule],\n                declarations: [MatDivider],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/divider/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatDivider, MatDividerModule };\n"]}