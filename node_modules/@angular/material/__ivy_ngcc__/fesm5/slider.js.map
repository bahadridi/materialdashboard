{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/material/fesm5/slider.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAoqtBM,AA2CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;KA0BD;;;;;;;;;;;;;gDAOC","file":"slider.js","sourcesContent":["import { CommonModule } from '@angular/common';\nimport { forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Attribute, Inject, NgZone, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { __extends } from 'tslib';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, DOWN_ARROW, RIGHT_ARROW, UP_ARROW, LEFT_ARROW, HOME, END, PAGE_DOWN, PAGE_UP } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar activeEventOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nvar MIN_AUTO_TICK_SEPARATION = 30;\n/** The thumb gap size for a disabled slider. */\nvar DISABLED_THUMB_GAP = 7;\n/** The thumb gap size for a non-active slider at its minimum value. */\nvar MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/** The thumb gap size for an active slider at its minimum value. */\nvar MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nvar MAT_SLIDER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MatSlider; }),\n    multi: true\n};\n/** A simple change event emitted by the MatSlider component. */\nvar MatSliderChange = /** @class */ (function () {\n    function MatSliderChange() {\n    }\n    return MatSliderChange;\n}());\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nvar MatSliderBase = /** @class */ (function () {\n    function MatSliderBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatSliderBase;\n}());\nvar _MatSliderMixinBase = mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nvar MatSlider = /** @class */ (function (_super) {\n    __extends(MatSlider, _super);\n    function MatSlider(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, \n    // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n    _animationMode, \n    // @breaking-change 9.0.0 `_ngZone` parameter to be made required.\n    _ngZone) {\n        var _this = _super.call(this, elementRef) || this;\n        _this._focusMonitor = _focusMonitor;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this._dir = _dir;\n        _this._animationMode = _animationMode;\n        _this._ngZone = _ngZone;\n        _this._invert = false;\n        _this._max = 100;\n        _this._min = 0;\n        _this._step = 1;\n        _this._thumbLabel = false;\n        _this._tickInterval = 0;\n        _this._value = null;\n        _this._vertical = false;\n        /** Event emitted when the slider value has changed. */\n        _this.change = new EventEmitter();\n        /** Event emitted when the slider thumb moves. */\n        _this.input = new EventEmitter();\n        /**\n         * Emits when the raw value of the slider changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        _this.valueChange = new EventEmitter();\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        _this.onTouched = function () { };\n        _this._percent = 0;\n        /**\n         * Whether or not the thumb is sliding.\n         * Used to determine if there should be a transition for the thumb and fill track.\n         */\n        _this._isSliding = false;\n        /**\n         * Whether or not the slider is active (clicked or sliding).\n         * Used to shrink and grow the thumb as according to the Material Design spec.\n         */\n        _this._isActive = false;\n        /** The size of a tick interval as a percentage of the size of the track. */\n        _this._tickIntervalPercent = 0;\n        /** The dimensions of the slider. */\n        _this._sliderDimensions = null;\n        _this._controlValueAccessorChangeFn = function () { };\n        /** Subscription to the Directionality change EventEmitter. */\n        _this._dirChangeSubscription = Subscription.EMPTY;\n        /** Called when the user has put their pointer down on the slider. */\n        _this._pointerDown = function (event) {\n            // Don't do anything if the slider is disabled or the\n            // user is using anything other than the main mouse button.\n            if (_this.disabled || _this._isSliding || (!isTouchEvent(event) && event.button !== 0)) {\n                return;\n            }\n            _this._runInsideZone(function () {\n                var oldValue = _this.value;\n                var pointerPosition = getPointerPositionOnPage(event);\n                _this._isSliding = true;\n                _this._lastPointerEvent = event;\n                event.preventDefault();\n                _this._focusHostElement();\n                _this._onMouseenter(); // Simulate mouseenter in case this is a mobile device.\n                _this._bindGlobalEvents(event);\n                _this._focusHostElement();\n                _this._updateValueFromPosition(pointerPosition);\n                _this._valueOnSlideStart = _this.value;\n                _this._pointerPositionOnStart = pointerPosition;\n                // Emit a change and input event if the value changed.\n                if (oldValue != _this.value) {\n                    _this._emitInputEvent();\n                    _this._emitChangeEvent();\n                }\n            });\n        };\n        /**\n         * Called when the user has moved their pointer after\n         * starting to drag. Bound on the document level.\n         */\n        _this._pointerMove = function (event) {\n            if (_this._isSliding) {\n                // Prevent the slide from selecting anything else.\n                event.preventDefault();\n                var oldValue = _this.value;\n                _this._lastPointerEvent = event;\n                _this._updateValueFromPosition(getPointerPositionOnPage(event));\n                // Native range elements always emit `input` events when the value changed while sliding.\n                if (oldValue != _this.value) {\n                    _this._emitInputEvent();\n                }\n            }\n        };\n        /** Called when the user has lifted their pointer. Bound on the document level. */\n        _this._pointerUp = function (event) {\n            if (_this._isSliding) {\n                var pointerPositionOnStart = _this._pointerPositionOnStart;\n                var currentPointerPosition = getPointerPositionOnPage(event);\n                event.preventDefault();\n                _this._removeGlobalEvents();\n                _this._valueOnSlideStart = _this._pointerPositionOnStart = _this._lastPointerEvent = null;\n                _this._isSliding = false;\n                if (_this._valueOnSlideStart != _this.value && !_this.disabled &&\n                    pointerPositionOnStart && (pointerPositionOnStart.x !== currentPointerPosition.x ||\n                    pointerPositionOnStart.y !== currentPointerPosition.y)) {\n                    _this._emitChangeEvent();\n                }\n            }\n        };\n        /** Called when the window has lost focus. */\n        _this._windowBlur = function () {\n            // If the window is blurred while dragging we need to stop dragging because the\n            // browser won't dispatch the `mouseup` and `touchend` events anymore.\n            if (_this._lastPointerEvent) {\n                _this._pointerUp(_this._lastPointerEvent);\n            }\n        };\n        _this.tabIndex = parseInt(tabIndex) || 0;\n        _this._runOutsizeZone(function () {\n            var element = elementRef.nativeElement;\n            element.addEventListener('mousedown', _this._pointerDown, activeEventOptions);\n            element.addEventListener('touchstart', _this._pointerDown, activeEventOptions);\n        });\n        return _this;\n    }\n    Object.defineProperty(MatSlider.prototype, \"invert\", {\n        /** Whether the slider is inverted. */\n        get: function () { return this._invert; },\n        set: function (value) {\n            this._invert = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"max\", {\n        /** The maximum value that the slider can have. */\n        get: function () { return this._max; },\n        set: function (v) {\n            this._max = coerceNumberProperty(v, this._max);\n            this._percent = this._calculatePercentage(this._value);\n            // Since this also modifies the percentage, we need to let the change detection know.\n            this._changeDetectorRef.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"min\", {\n        /** The minimum value that the slider can have. */\n        get: function () { return this._min; },\n        set: function (v) {\n            this._min = coerceNumberProperty(v, this._min);\n            // If the value wasn't explicitly set by the user, set it to the min.\n            if (this._value === null) {\n                this.value = this._min;\n            }\n            this._percent = this._calculatePercentage(this._value);\n            // Since this also modifies the percentage, we need to let the change detection know.\n            this._changeDetectorRef.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"step\", {\n        /** The values at which the thumb will snap. */\n        get: function () { return this._step; },\n        set: function (v) {\n            this._step = coerceNumberProperty(v, this._step);\n            if (this._step % 1 !== 0) {\n                this._roundToDecimal = this._step.toString().split('.').pop().length;\n            }\n            // Since this could modify the label, we need to notify the change detection.\n            this._changeDetectorRef.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"thumbLabel\", {\n        /** Whether or not to show the thumb label. */\n        get: function () { return this._thumbLabel; },\n        set: function (value) { this._thumbLabel = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"tickInterval\", {\n        /**\n         * How often to show ticks. Relative to the step so that a tick always appears on a step.\n         * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n         */\n        get: function () { return this._tickInterval; },\n        set: function (value) {\n            if (value === 'auto') {\n                this._tickInterval = 'auto';\n            }\n            else if (typeof value === 'number' || typeof value === 'string') {\n                this._tickInterval = coerceNumberProperty(value, this._tickInterval);\n            }\n            else {\n                this._tickInterval = 0;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"value\", {\n        /** Value of the slider. */\n        get: function () {\n            // If the value needs to be read and it is still uninitialized, initialize it to the min.\n            if (this._value === null) {\n                this.value = this._min;\n            }\n            return this._value;\n        },\n        set: function (v) {\n            if (v !== this._value) {\n                var value = coerceNumberProperty(v);\n                // While incrementing by a decimal we can end up with values like 33.300000000000004.\n                // Truncate it to ensure that it matches the label and to make it easier to work with.\n                if (this._roundToDecimal) {\n                    value = parseFloat(value.toFixed(this._roundToDecimal));\n                }\n                this._value = value;\n                this._percent = this._calculatePercentage(this._value);\n                // Since this also modifies the percentage, we need to let the change detection know.\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"vertical\", {\n        /** Whether the slider is vertical. */\n        get: function () { return this._vertical; },\n        set: function (value) {\n            this._vertical = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"displayValue\", {\n        /** The value to be used for display purposes. */\n        get: function () {\n            if (this.displayWith) {\n                // Value is never null but since setters and getters cannot have\n                // different types, the value getter is also typed to return null.\n                return this.displayWith(this.value);\n            }\n            // Note that this could be improved further by rounding something like 0.999 to 1 or\n            // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n            // every change detection cycle.\n            if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n                return this.value.toFixed(this._roundToDecimal);\n            }\n            return this.value || 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** set focus to the host element */\n    MatSlider.prototype.focus = function (options) {\n        this._focusHostElement(options);\n    };\n    /** blur the host element */\n    MatSlider.prototype.blur = function () {\n        this._blurHostElement();\n    };\n    Object.defineProperty(MatSlider.prototype, \"percent\", {\n        /** The percentage of the slider that coincides with the value. */\n        get: function () { return this._clamp(this._percent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"_invertAxis\", {\n        /**\n         * Whether the axis of the slider is inverted.\n         * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n         */\n        get: function () {\n            // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n            // top. However from a y-axis standpoint this is inverted.\n            return this.vertical ? !this.invert : this.invert;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"_isMinValue\", {\n        /** Whether the slider is at its minimum value. */\n        get: function () {\n            return this.percent === 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"_thumbGap\", {\n        /**\n         * The amount of space to leave between the slider thumb and the track fill & track background\n         * elements.\n         */\n        get: function () {\n            if (this.disabled) {\n                return DISABLED_THUMB_GAP;\n            }\n            if (this._isMinValue && !this.thumbLabel) {\n                return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n            }\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"_trackBackgroundStyles\", {\n        /** CSS styles for the track background element. */\n        get: function () {\n            var axis = this.vertical ? 'Y' : 'X';\n            var scale = this.vertical ? \"1, \" + (1 - this.percent) + \", 1\" : 1 - this.percent + \", 1, 1\";\n            var sign = this._shouldInvertMouseCoords() ? '-' : '';\n            return {\n                // scale3d avoids some rendering issues in Chrome. See #12071.\n                transform: \"translate\" + axis + \"(\" + sign + this._thumbGap + \"px) scale3d(\" + scale + \")\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"_trackFillStyles\", {\n        /** CSS styles for the track fill element. */\n        get: function () {\n            var percent = this.percent;\n            var axis = this.vertical ? 'Y' : 'X';\n            var scale = this.vertical ? \"1, \" + percent + \", 1\" : percent + \", 1, 1\";\n            var sign = this._shouldInvertMouseCoords() ? '' : '-';\n            return {\n                // scale3d avoids some rendering issues in Chrome. See #12071.\n                transform: \"translate\" + axis + \"(\" + sign + this._thumbGap + \"px) scale3d(\" + scale + \")\",\n                // iOS Safari has a bug where it won't re-render elements which start of as `scale(0)` until\n                // something forces a style recalculation on it. Since we'll end up with `scale(0)` when\n                // the value of the slider is 0, we can easily get into this situation. We force a\n                // recalculation by changing the element's `display` when it goes from 0 to any other value.\n                display: percent === 0 ? 'none' : ''\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"_ticksContainerStyles\", {\n        /** CSS styles for the ticks container element. */\n        get: function () {\n            var axis = this.vertical ? 'Y' : 'X';\n            // For a horizontal slider in RTL languages we push the ticks container off the left edge\n            // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n            var sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n            var offset = this._tickIntervalPercent / 2 * 100;\n            return {\n                'transform': \"translate\" + axis + \"(\" + sign + offset + \"%)\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"_ticksStyles\", {\n        /** CSS styles for the ticks element. */\n        get: function () {\n            var tickSize = this._tickIntervalPercent * 100;\n            var backgroundSize = this.vertical ? \"2px \" + tickSize + \"%\" : tickSize + \"% 2px\";\n            var axis = this.vertical ? 'Y' : 'X';\n            // Depending on the direction we pushed the ticks container, push the ticks the opposite\n            // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n            // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n            var sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n            var rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n            var styles = {\n                'backgroundSize': backgroundSize,\n                // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n                'transform': \"translateZ(0) translate\" + axis + \"(\" + sign + tickSize / 2 + \"%)\" + rotate\n            };\n            if (this._isMinValue && this._thumbGap) {\n                var side = this.vertical ?\n                    (this._invertAxis ? 'Bottom' : 'Top') :\n                    (this._invertAxis ? 'Right' : 'Left');\n                styles[\"padding\" + side] = this._thumbGap + \"px\";\n            }\n            return styles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlider.prototype, \"_thumbContainerStyles\", {\n        get: function () {\n            var axis = this.vertical ? 'Y' : 'X';\n            // For a horizontal slider in RTL languages we push the thumb container off the left edge\n            // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n            var invertOffset = (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n            var offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n            return {\n                'transform': \"translate\" + axis + \"(-\" + offset + \"%)\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     */\n    MatSlider.prototype._shouldInvertMouseCoords = function () {\n        return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    };\n    /** The language direction for this slider element. */\n    MatSlider.prototype._getDirection = function () {\n        return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n    };\n    MatSlider.prototype.ngOnInit = function () {\n        var _this = this;\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(function (origin) {\n            _this._isActive = !!origin && origin !== 'keyboard';\n            _this._changeDetectorRef.detectChanges();\n        });\n        if (this._dir) {\n            this._dirChangeSubscription = this._dir.change.subscribe(function () {\n                _this._changeDetectorRef.markForCheck();\n            });\n        }\n    };\n    MatSlider.prototype.ngOnDestroy = function () {\n        var element = this._elementRef.nativeElement;\n        element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);\n        element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);\n        this._lastPointerEvent = null;\n        this._removeGlobalEvents();\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._dirChangeSubscription.unsubscribe();\n    };\n    MatSlider.prototype._onMouseenter = function () {\n        if (this.disabled) {\n            return;\n        }\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    };\n    MatSlider.prototype._onFocus = function () {\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    };\n    MatSlider.prototype._onBlur = function () {\n        this.onTouched();\n    };\n    MatSlider.prototype._onKeydown = function (event) {\n        if (this.disabled || hasModifierKey(event)) {\n            return;\n        }\n        var oldValue = this.value;\n        switch (event.keyCode) {\n            case PAGE_UP:\n                this._increment(10);\n                break;\n            case PAGE_DOWN:\n                this._increment(-10);\n                break;\n            case END:\n                this.value = this.max;\n                break;\n            case HOME:\n                this.value = this.min;\n                break;\n            case LEFT_ARROW:\n                // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n                // inverted slider the thumb moves in that direction. However for a blind user, nothing\n                // about the slider indicates that it is inverted. They will expect left to be decrement,\n                // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n                // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n                // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n                // sighted users, therefore we do not swap the meaning.\n                this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n                break;\n            case UP_ARROW:\n                this._increment(1);\n                break;\n            case RIGHT_ARROW:\n                // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n                this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n                break;\n            case DOWN_ARROW:\n                this._increment(-1);\n                break;\n            default:\n                // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n                // it.\n                return;\n        }\n        if (oldValue != this.value) {\n            this._emitInputEvent();\n            this._emitChangeEvent();\n        }\n        this._isSliding = true;\n        event.preventDefault();\n    };\n    MatSlider.prototype._onKeyup = function () {\n        this._isSliding = false;\n    };\n    /**\n     * Binds our global move and end events. They're bound at the document level and only while\n     * dragging so that the user doesn't have to keep their pointer exactly over the slider\n     * as they're swiping across the screen.\n     */\n    MatSlider.prototype._bindGlobalEvents = function (triggerEvent) {\n        if (typeof document !== 'undefined' && document) {\n            var body = document.body;\n            var isTouch = isTouchEvent(triggerEvent);\n            var moveEventName = isTouch ? 'touchmove' : 'mousemove';\n            var endEventName = isTouch ? 'touchend' : 'mouseup';\n            body.addEventListener(moveEventName, this._pointerMove, activeEventOptions);\n            body.addEventListener(endEventName, this._pointerUp, activeEventOptions);\n            if (isTouch) {\n                body.addEventListener('touchcancel', this._pointerUp, activeEventOptions);\n            }\n        }\n        if (typeof window !== 'undefined' && window) {\n            window.addEventListener('blur', this._windowBlur);\n        }\n    };\n    /** Removes any global event listeners that we may have added. */\n    MatSlider.prototype._removeGlobalEvents = function () {\n        if (typeof document !== 'undefined' && document) {\n            var body = document.body;\n            body.removeEventListener('mousemove', this._pointerMove, activeEventOptions);\n            body.removeEventListener('mouseup', this._pointerUp, activeEventOptions);\n            body.removeEventListener('touchmove', this._pointerMove, activeEventOptions);\n            body.removeEventListener('touchend', this._pointerUp, activeEventOptions);\n            body.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);\n        }\n        if (typeof window !== 'undefined' && window) {\n            window.removeEventListener('blur', this._windowBlur);\n        }\n    };\n    /** Increments the slider by the given number of steps (negative number decrements). */\n    MatSlider.prototype._increment = function (numSteps) {\n        this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n    };\n    /** Calculate the new value from the new physical location. The value will always be snapped. */\n    MatSlider.prototype._updateValueFromPosition = function (pos) {\n        if (!this._sliderDimensions) {\n            return;\n        }\n        var offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n        var size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        var posComponent = this.vertical ? pos.y : pos.x;\n        // The exact value is calculated from the event and used to find the closest snap value.\n        var percent = this._clamp((posComponent - offset) / size);\n        if (this._shouldInvertMouseCoords()) {\n            percent = 1 - percent;\n        }\n        // Since the steps may not divide cleanly into the max value, if the user\n        // slid to 0 or 100 percent, we jump to the min/max value. This approach\n        // is slightly more intuitive than using `Math.ceil` below, because it\n        // follows the user's pointer closer.\n        if (percent === 0) {\n            this.value = this.min;\n        }\n        else if (percent === 1) {\n            this.value = this.max;\n        }\n        else {\n            var exactValue = this._calculateValue(percent);\n            // This calculation finds the closest step by finding the closest\n            // whole number divisible by the step relative to the min.\n            var closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n            // The value needs to snap to the min and max.\n            this.value = this._clamp(closestValue, this.min, this.max);\n        }\n    };\n    /** Emits a change event if the current value is different from the last emitted value. */\n    MatSlider.prototype._emitChangeEvent = function () {\n        this._controlValueAccessorChangeFn(this.value);\n        this.valueChange.emit(this.value);\n        this.change.emit(this._createChangeEvent());\n    };\n    /** Emits an input event when the current value is different from the last emitted value. */\n    MatSlider.prototype._emitInputEvent = function () {\n        this.input.emit(this._createChangeEvent());\n    };\n    /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n    MatSlider.prototype._updateTickIntervalPercent = function () {\n        if (!this.tickInterval || !this._sliderDimensions) {\n            return;\n        }\n        if (this.tickInterval == 'auto') {\n            var trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n            var pixelsPerStep = trackSize * this.step / (this.max - this.min);\n            var stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n            var pixelsPerTick = stepsPerTick * this.step;\n            this._tickIntervalPercent = pixelsPerTick / trackSize;\n        }\n        else {\n            this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n        }\n    };\n    /** Creates a slider change object from the specified value. */\n    MatSlider.prototype._createChangeEvent = function (value) {\n        if (value === void 0) { value = this.value; }\n        var event = new MatSliderChange();\n        event.source = this;\n        event.value = value;\n        return event;\n    };\n    /** Calculates the percentage of the slider that a value is. */\n    MatSlider.prototype._calculatePercentage = function (value) {\n        return ((value || 0) - this.min) / (this.max - this.min);\n    };\n    /** Calculates the value a percentage of the slider corresponds to. */\n    MatSlider.prototype._calculateValue = function (percentage) {\n        return this.min + percentage * (this.max - this.min);\n    };\n    /** Return a number between two numbers. */\n    MatSlider.prototype._clamp = function (value, min, max) {\n        if (min === void 0) { min = 0; }\n        if (max === void 0) { max = 1; }\n        return Math.max(min, Math.min(value, max));\n    };\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     */\n    MatSlider.prototype._getSliderDimensions = function () {\n        return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n    };\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     */\n    MatSlider.prototype._focusHostElement = function (options) {\n        this._elementRef.nativeElement.focus(options);\n    };\n    /** Blurs the native element. */\n    MatSlider.prototype._blurHostElement = function () {\n        this._elementRef.nativeElement.blur();\n    };\n    /** Runs a callback inside of the NgZone, if possible. */\n    MatSlider.prototype._runInsideZone = function (fn) {\n        // @breaking-change 9.0.0 Remove this function once `_ngZone` is a required parameter.\n        this._ngZone ? this._ngZone.run(fn) : fn();\n    };\n    /** Runs a callback outside of the NgZone, if possible. */\n    MatSlider.prototype._runOutsizeZone = function (fn) {\n        // @breaking-change 9.0.0 Remove this function once `_ngZone` is a required parameter.\n        this._ngZone ? this._ngZone.runOutsideAngular(fn) : fn();\n    };\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    MatSlider.prototype.writeValue = function (value) {\n        this.value = value;\n    };\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    MatSlider.prototype.registerOnChange = function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    MatSlider.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param isDisabled\n     */\n    MatSlider.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    MatSlider.decorators = [\n        { type: Component, args: [{\n                    selector: 'mat-slider',\n                    exportAs: 'matSlider',\n                    providers: [MAT_SLIDER_VALUE_ACCESSOR],\n                    host: {\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                        '(keydown)': '_onKeydown($event)',\n                        '(keyup)': '_onKeyup()',\n                        '(mouseenter)': '_onMouseenter()',\n                        // On Safari starting to slide temporarily triggers text selection mode which\n                        // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n                        '(selectstart)': '$event.preventDefault()',\n                        'class': 'mat-slider',\n                        'role': 'slider',\n                        '[tabIndex]': 'tabIndex',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[attr.aria-valuemax]': 'max',\n                        '[attr.aria-valuemin]': 'min',\n                        '[attr.aria-valuenow]': 'value',\n                        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                        '[class.mat-slider-disabled]': 'disabled',\n                        '[class.mat-slider-has-ticks]': 'tickInterval',\n                        '[class.mat-slider-horizontal]': '!vertical',\n                        '[class.mat-slider-axis-inverted]': '_invertAxis',\n                        // Class binding which is only used by the test harness as there is no other\n                        // way for the harness to detect if mouse coordinates need to be inverted.\n                        '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n                        '[class.mat-slider-sliding]': '_isSliding',\n                        '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n                        '[class.mat-slider-vertical]': 'vertical',\n                        '[class.mat-slider-min-value]': '_isMinValue',\n                        '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    },\n                    template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper>\\n  <div class=\\\"mat-slider-track-wrapper\\\">\\n    <div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_trackBackgroundStyles\\\"></div>\\n    <div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_trackFillStyles\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_ticksContainerStyles\\\">\\n    <div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_ticksStyles\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_thumbContainerStyles\\\">\\n    <div class=\\\"mat-slider-focus-ring\\\"></div>\\n    <div class=\\\"mat-slider-thumb\\\"></div>\\n    <div class=\\\"mat-slider-thumb-label\\\">\\n      <span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span>\\n    </div>\\n  </div>\\n</div>\\n\",\n                    inputs: ['disabled', 'color', 'tabIndex'],\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"]\n                }] }\n    ];\n    /** @nocollapse */\n    MatSlider.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: FocusMonitor },\n        { type: ChangeDetectorRef },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: NgZone }\n    ]; };\n    MatSlider.propDecorators = {\n        invert: [{ type: Input }],\n        max: [{ type: Input }],\n        min: [{ type: Input }],\n        step: [{ type: Input }],\n        thumbLabel: [{ type: Input }],\n        tickInterval: [{ type: Input }],\n        value: [{ type: Input }],\n        displayWith: [{ type: Input }],\n        vertical: [{ type: Input }],\n        change: [{ type: Output }],\n        input: [{ type: Output }],\n        valueChange: [{ type: Output }],\n        _sliderWrapper: [{ type: ViewChild, args: ['sliderWrapper',] }]\n    };\n    return MatSlider;\n}(_MatSliderMixinBase));\n/** Returns whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the coordinates of a touch or mouse event relative to the viewport. */\nfunction getPointerPositionOnPage(event) {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    var point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n    return { x: point.clientX, y: point.clientY };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MatSliderModule = /** @class */ (function () {\n    function MatSliderModule() {\n    }\n    MatSliderModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [CommonModule, MatCommonModule],\n                    exports: [MatSlider, MatCommonModule],\n                    declarations: [MatSlider],\n                },] }\n    ];\n    return MatSliderModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDER_VALUE_ACCESSOR, MatSlider, MatSliderChange, MatSliderModule };\n"]}