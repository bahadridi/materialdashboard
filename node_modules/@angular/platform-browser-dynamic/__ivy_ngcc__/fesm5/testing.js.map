{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/platform-browser-dynamic/fesm5/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;2CAkB2C,AAEpC;;;;;;;;;;kCAE0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAgK5B;;;;;;;;;;;;;;gDAQ+B","file":"testing.js","sourcesContent":["/**\n * @license Angular v9.0.1\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { __extends, __decorate, __param, __metadata } from 'tslib';\nimport { Injectable, Inject, ɵstringify, NgModule, Directive, Component, Pipe, createPlatformFactory, COMPILER_OPTIONS, Injector, CompilerFactory } from '@angular/core';\nimport { TestComponentRenderer, ɵMetadataOverrider, ɵTestingCompilerFactory } from '@angular/core/testing';\nimport { ɵplatformCoreDynamic, ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS } from '@angular/platform-browser-dynamic';\nimport { BrowserTestingModule } from '@angular/platform-browser/testing';\nimport { ɵgetDOM, DOCUMENT } from '@angular/common';\nimport { CompileReflector, PipeResolver, DirectiveResolver, NgModuleResolver, ERROR_COMPONENT_TYPE } from '@angular/compiler';\nimport { MockPipeResolver, MockDirectiveResolver, MockNgModuleResolver } from '@angular/compiler/testing';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\nvar DOMTestComponentRenderer = /** @class */ (function (_super) {\n    __extends(DOMTestComponentRenderer, _super);\n    function DOMTestComponentRenderer(_doc) {\n        var _this = _super.call(this) || this;\n        _this._doc = _doc;\n        return _this;\n    }\n    DOMTestComponentRenderer.prototype.insertRootElement = function (rootElId) {\n        var template = ɵgetDOM().getDefaultDocument().createElement('template');\n        template.innerHTML = \"<div id=\\\"\" + rootElId + \"\\\"></div>\";\n        var rootEl = getContent(template).firstChild;\n        // TODO(juliemr): can/should this be optional?\n        var oldRoots = this._doc.querySelectorAll('[id^=root]');\n        for (var i = 0; i < oldRoots.length; i++) {\n            ɵgetDOM().remove(oldRoots[i]);\n        }\n        this._doc.body.appendChild(rootEl);\n    };\n    DOMTestComponentRenderer = __decorate([\n        Injectable(),\n        __param(0, Inject(DOCUMENT)),\n        __metadata(\"design:paramtypes\", [Object])\n    ], DOMTestComponentRenderer);\n    return DOMTestComponentRenderer;\n}(TestComponentRenderer));\nfunction getContent(node) {\n    if ('content' in node) {\n        return node.content;\n    }\n    else {\n        return node;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar COMPILER_PROVIDERS = [\n    { provide: MockPipeResolver, deps: [CompileReflector] },\n    { provide: PipeResolver, useExisting: MockPipeResolver },\n    { provide: MockDirectiveResolver, deps: [CompileReflector] },\n    { provide: DirectiveResolver, useExisting: MockDirectiveResolver },\n    { provide: MockNgModuleResolver, deps: [CompileReflector] },\n    { provide: NgModuleResolver, useExisting: MockNgModuleResolver },\n];\nvar TestingCompilerFactoryImpl = /** @class */ (function () {\n    function TestingCompilerFactoryImpl(_injector, _compilerFactory) {\n        this._injector = _injector;\n        this._compilerFactory = _compilerFactory;\n    }\n    TestingCompilerFactoryImpl.prototype.createTestingCompiler = function (options) {\n        var compiler = this._compilerFactory.createCompiler(options);\n        return new TestingCompilerImpl(compiler, compiler.injector.get(MockDirectiveResolver), compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver));\n    };\n    return TestingCompilerFactoryImpl;\n}());\nvar TestingCompilerImpl = /** @class */ (function () {\n    function TestingCompilerImpl(_compiler, _directiveResolver, _pipeResolver, _moduleResolver) {\n        this._compiler = _compiler;\n        this._directiveResolver = _directiveResolver;\n        this._pipeResolver = _pipeResolver;\n        this._moduleResolver = _moduleResolver;\n        this._overrider = new ɵMetadataOverrider();\n    }\n    Object.defineProperty(TestingCompilerImpl.prototype, \"injector\", {\n        get: function () { return this._compiler.injector; },\n        enumerable: true,\n        configurable: true\n    });\n    TestingCompilerImpl.prototype.compileModuleSync = function (moduleType) {\n        return this._compiler.compileModuleSync(moduleType);\n    };\n    TestingCompilerImpl.prototype.compileModuleAsync = function (moduleType) {\n        return this._compiler.compileModuleAsync(moduleType);\n    };\n    TestingCompilerImpl.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n        return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n    };\n    TestingCompilerImpl.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n        return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n    };\n    TestingCompilerImpl.prototype.getComponentFactory = function (component) {\n        return this._compiler.getComponentFactory(component);\n    };\n    TestingCompilerImpl.prototype.checkOverrideAllowed = function (type) {\n        if (this._compiler.hasAotSummary(type)) {\n            throw new Error(ɵstringify(type) + \" was AOT compiled, so its metadata cannot be changed.\");\n        }\n    };\n    TestingCompilerImpl.prototype.overrideModule = function (ngModule, override) {\n        this.checkOverrideAllowed(ngModule);\n        var oldMetadata = this._moduleResolver.resolve(ngModule, false);\n        this._moduleResolver.setNgModule(ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\n        this.clearCacheFor(ngModule);\n    };\n    TestingCompilerImpl.prototype.overrideDirective = function (directive, override) {\n        this.checkOverrideAllowed(directive);\n        var oldMetadata = this._directiveResolver.resolve(directive, false);\n        this._directiveResolver.setDirective(directive, this._overrider.overrideMetadata(Directive, oldMetadata, override));\n        this.clearCacheFor(directive);\n    };\n    TestingCompilerImpl.prototype.overrideComponent = function (component, override) {\n        this.checkOverrideAllowed(component);\n        var oldMetadata = this._directiveResolver.resolve(component, false);\n        this._directiveResolver.setDirective(component, this._overrider.overrideMetadata(Component, oldMetadata, override));\n        this.clearCacheFor(component);\n    };\n    TestingCompilerImpl.prototype.overridePipe = function (pipe, override) {\n        this.checkOverrideAllowed(pipe);\n        var oldMetadata = this._pipeResolver.resolve(pipe, false);\n        this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\n        this.clearCacheFor(pipe);\n    };\n    TestingCompilerImpl.prototype.loadAotSummaries = function (summaries) { this._compiler.loadAotSummaries(summaries); };\n    TestingCompilerImpl.prototype.clearCache = function () { this._compiler.clearCache(); };\n    TestingCompilerImpl.prototype.clearCacheFor = function (type) { this._compiler.clearCacheFor(type); };\n    TestingCompilerImpl.prototype.getComponentFromError = function (error) { return error[ERROR_COMPONENT_TYPE] || null; };\n    TestingCompilerImpl.prototype.getModuleId = function (moduleType) {\n        return this._moduleResolver.resolve(moduleType, true).id;\n    };\n    return TestingCompilerImpl;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ɵ0 = { providers: COMPILER_PROVIDERS };\n/**\n * Platform for dynamic tests\n *\n * @publicApi\n */\nvar platformCoreDynamicTesting = createPlatformFactory(ɵplatformCoreDynamic, 'coreDynamicTesting', [\n    { provide: COMPILER_OPTIONS, useValue: ɵ0, multi: true }, {\n        provide: ɵTestingCompilerFactory,\n        useClass: TestingCompilerFactoryImpl,\n        deps: [Injector, CompilerFactory]\n    }\n]);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nvar platformBrowserDynamicTesting = createPlatformFactory(platformCoreDynamicTesting, 'browserDynamicTesting', ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n/**\n * NgModule for testing.\n *\n * @publicApi\n */\nvar BrowserDynamicTestingModule = /** @class */ (function () {\n    function BrowserDynamicTestingModule() {\n    }\n    BrowserDynamicTestingModule = __decorate([\n        NgModule({\n            exports: [BrowserTestingModule],\n            providers: [\n                { provide: TestComponentRenderer, useClass: DOMTestComponentRenderer },\n            ]\n        })\n    ], BrowserDynamicTestingModule);\n    return BrowserDynamicTestingModule;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserDynamicTestingModule, platformBrowserDynamicTesting, DOMTestComponentRenderer as ɵDOMTestComponentRenderer, COMPILER_PROVIDERS as ɵangular_packages_platform_browser_dynamic_testing_testing_a, TestingCompilerFactoryImpl as ɵangular_packages_platform_browser_dynamic_testing_testing_b, platformCoreDynamicTesting as ɵplatformCoreDynamicTesting };\n"]}