{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/platform-browser-dynamic/fesm2015/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0BC,uIAGC;;;;;;;;;;kCAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4RD;;;;;;;;;;0BAQC","file":"testing.js","sourcesContent":["/**\n * @license Angular v9.0.1\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, Inject, ɵstringify, NgModule, Directive, Component, Pipe, createPlatformFactory, COMPILER_OPTIONS, Injector, CompilerFactory } from '@angular/core';\nimport { TestComponentRenderer, ɵMetadataOverrider, ɵTestingCompilerFactory } from '@angular/core/testing';\nimport { ɵplatformCoreDynamic, ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS } from '@angular/platform-browser-dynamic';\nimport { BrowserTestingModule } from '@angular/platform-browser/testing';\nimport { ɵgetDOM, DOCUMENT } from '@angular/common';\nimport { CompileReflector, PipeResolver, DirectiveResolver, NgModuleResolver, ERROR_COMPONENT_TYPE } from '@angular/compiler';\nimport { MockPipeResolver, MockDirectiveResolver, MockNgModuleResolver } from '@angular/compiler/testing';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/testing/src/dom_test_component_renderer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\nclass DOMTestComponentRenderer extends TestComponentRenderer {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        super();\n        this._doc = _doc;\n    }\n    /**\n     * @param {?} rootElId\n     * @return {?}\n     */\n    insertRootElement(rootElId) {\n        /** @type {?} */\n        const template = ɵgetDOM().getDefaultDocument().createElement('template');\n        template.innerHTML = `<div id=\"${rootElId}\"></div>`;\n        /** @type {?} */\n        const rootEl = (/** @type {?} */ (getContent(template).firstChild));\n        // TODO(juliemr): can/should this be optional?\n        /** @type {?} */\n        const oldRoots = this._doc.querySelectorAll('[id^=root]');\n        for (let i = 0; i < oldRoots.length; i++) {\n            ɵgetDOM().remove(oldRoots[i]);\n        }\n        this._doc.body.appendChild(rootEl);\n    }\n}\nDOMTestComponentRenderer.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nDOMTestComponentRenderer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DOMTestComponentRenderer.prototype._doc;\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction getContent(node) {\n    if ('content' in node) {\n        return ((/** @type {?} */ (node))).content;\n    }\n    else {\n        return node;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/testing/src/metadata_overrider.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/testing/src/compiler_factory.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst COMPILER_PROVIDERS = [\n    { provide: MockPipeResolver, deps: [CompileReflector] },\n    { provide: PipeResolver, useExisting: MockPipeResolver },\n    { provide: MockDirectiveResolver, deps: [CompileReflector] },\n    { provide: DirectiveResolver, useExisting: MockDirectiveResolver },\n    { provide: MockNgModuleResolver, deps: [CompileReflector] },\n    { provide: NgModuleResolver, useExisting: MockNgModuleResolver },\n];\nclass TestingCompilerFactoryImpl {\n    /**\n     * @param {?} _injector\n     * @param {?} _compilerFactory\n     */\n    constructor(_injector, _compilerFactory) {\n        this._injector = _injector;\n        this._compilerFactory = _compilerFactory;\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    createTestingCompiler(options) {\n        /** @type {?} */\n        const compiler = (/** @type {?} */ (this._compilerFactory.createCompiler(options)));\n        return new TestingCompilerImpl(compiler, compiler.injector.get(MockDirectiveResolver), compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver));\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    TestingCompilerFactoryImpl.prototype._injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    TestingCompilerFactoryImpl.prototype._compilerFactory;\n}\nclass TestingCompilerImpl {\n    /**\n     * @param {?} _compiler\n     * @param {?} _directiveResolver\n     * @param {?} _pipeResolver\n     * @param {?} _moduleResolver\n     */\n    constructor(_compiler, _directiveResolver, _pipeResolver, _moduleResolver) {\n        this._compiler = _compiler;\n        this._directiveResolver = _directiveResolver;\n        this._pipeResolver = _pipeResolver;\n        this._moduleResolver = _moduleResolver;\n        this._overrider = new ɵMetadataOverrider();\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return this._compiler.injector; }\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    compileModuleSync(moduleType) {\n        return this._compiler.compileModuleSync(moduleType);\n    }\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    compileModuleAsync(moduleType) {\n        return this._compiler.compileModuleAsync(moduleType);\n    }\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    compileModuleAndAllComponentsSync(moduleType) {\n        return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n    }\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    compileModuleAndAllComponentsAsync(moduleType) {\n        return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    getComponentFactory(component) {\n        return this._compiler.getComponentFactory(component);\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    checkOverrideAllowed(type) {\n        if (this._compiler.hasAotSummary(type)) {\n            throw new Error(`${ɵstringify(type)} was AOT compiled, so its metadata cannot be changed.`);\n        }\n    }\n    /**\n     * @param {?} ngModule\n     * @param {?} override\n     * @return {?}\n     */\n    overrideModule(ngModule, override) {\n        this.checkOverrideAllowed(ngModule);\n        /** @type {?} */\n        const oldMetadata = this._moduleResolver.resolve(ngModule, false);\n        this._moduleResolver.setNgModule(ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\n        this.clearCacheFor(ngModule);\n    }\n    /**\n     * @param {?} directive\n     * @param {?} override\n     * @return {?}\n     */\n    overrideDirective(directive, override) {\n        this.checkOverrideAllowed(directive);\n        /** @type {?} */\n        const oldMetadata = this._directiveResolver.resolve(directive, false);\n        this._directiveResolver.setDirective(directive, this._overrider.overrideMetadata(Directive, (/** @type {?} */ (oldMetadata)), override));\n        this.clearCacheFor(directive);\n    }\n    /**\n     * @param {?} component\n     * @param {?} override\n     * @return {?}\n     */\n    overrideComponent(component, override) {\n        this.checkOverrideAllowed(component);\n        /** @type {?} */\n        const oldMetadata = this._directiveResolver.resolve(component, false);\n        this._directiveResolver.setDirective(component, this._overrider.overrideMetadata(Component, (/** @type {?} */ (oldMetadata)), override));\n        this.clearCacheFor(component);\n    }\n    /**\n     * @param {?} pipe\n     * @param {?} override\n     * @return {?}\n     */\n    overridePipe(pipe, override) {\n        this.checkOverrideAllowed(pipe);\n        /** @type {?} */\n        const oldMetadata = this._pipeResolver.resolve(pipe, false);\n        this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\n        this.clearCacheFor(pipe);\n    }\n    /**\n     * @param {?} summaries\n     * @return {?}\n     */\n    loadAotSummaries(summaries) { this._compiler.loadAotSummaries(summaries); }\n    /**\n     * @return {?}\n     */\n    clearCache() { this._compiler.clearCache(); }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    clearCacheFor(type) { this._compiler.clearCacheFor(type); }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    getComponentFromError(error) { return ((/** @type {?} */ (error)))[ERROR_COMPONENT_TYPE] || null; }\n    /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    getModuleId(moduleType) {\n        return this._moduleResolver.resolve(moduleType, true).id;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    TestingCompilerImpl.prototype._overrider;\n    /**\n     * @type {?}\n     * @private\n     */\n    TestingCompilerImpl.prototype._compiler;\n    /**\n     * @type {?}\n     * @private\n     */\n    TestingCompilerImpl.prototype._directiveResolver;\n    /**\n     * @type {?}\n     * @private\n     */\n    TestingCompilerImpl.prototype._pipeResolver;\n    /**\n     * @type {?}\n     * @private\n     */\n    TestingCompilerImpl.prototype._moduleResolver;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/testing/src/platform_core_dynamic_testing.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0 = { providers: COMPILER_PROVIDERS };\n/**\n * Platform for dynamic tests\n *\n * \\@publicApi\n * @type {?}\n */\nconst platformCoreDynamicTesting = createPlatformFactory(ɵplatformCoreDynamic, 'coreDynamicTesting', [\n    { provide: COMPILER_OPTIONS, useValue: ɵ0, multi: true }, {\n        provide: ɵTestingCompilerFactory,\n        useClass: TestingCompilerFactoryImpl,\n        deps: [Injector, CompilerFactory]\n    }\n]);\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/testing/src/private_export_testing.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/testing/src/testing.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst platformBrowserDynamicTesting = createPlatformFactory(platformCoreDynamicTesting, 'browserDynamicTesting', ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n/**\n * NgModule for testing.\n *\n * \\@publicApi\n */\nclass BrowserDynamicTestingModule {\n}\nBrowserDynamicTestingModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [BrowserTestingModule],\n                providers: [\n                    { provide: TestComponentRenderer, useClass: DOMTestComponentRenderer },\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/testing/public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/platform-browser-dynamic/testing/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserDynamicTestingModule, platformBrowserDynamicTesting, DOMTestComponentRenderer as ɵDOMTestComponentRenderer, COMPILER_PROVIDERS as ɵangular_packages_platform_browser_dynamic_testing_testing_a, TestingCompilerFactoryImpl as ɵangular_packages_platform_browser_dynamic_testing_testing_b, platformCoreDynamicTesting as ɵplatformCoreDynamicTesting };\n"]}