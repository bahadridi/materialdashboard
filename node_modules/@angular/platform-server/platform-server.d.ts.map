{"version":3,"file":"platform-server.d.ts","sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/platform-server/platform-server.d.ts"],"sourcesContent":["/**\n * @license Angular v9.0.1\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { EventManager } from '@angular/platform-browser';\r\nimport { HttpBackend } from '@angular/common/http';\r\nimport { HttpEvent } from '@angular/common/http';\r\nimport { HttpRequest } from '@angular/common/http';\r\nimport { InjectionToken } from '@angular/core';\r\nimport { Injector } from '@angular/core';\r\nimport { NgModuleFactory } from '@angular/core';\r\nimport { NgZone } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { PlatformRef } from '@angular/core';\r\nimport { Provider } from '@angular/core';\r\nimport { Renderer2 } from '@angular/core';\r\nimport { RendererFactory2 } from '@angular/core';\r\nimport { RendererType2 } from '@angular/core';\r\nimport { StaticProvider } from '@angular/core';\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { Type } from '@angular/core';\r\nimport { Version } from '@angular/core';\r\nimport { XhrFactory } from '@angular/common/http';\r\nimport { ɵAnimationEngine } from '@angular/animations/browser';\r\nimport { ɵAnimationRendererFactory } from '@angular/platform-browser/animations';\r\nimport { ɵSharedStylesHost } from '@angular/platform-browser';\r\n\r\n/**\r\n * A function that will be executed when calling `renderModuleFactory` or `renderModule` just\r\n * before current platform state is rendered to string.\r\n *\r\n * @publicApi\r\n */\r\nexport declare const BEFORE_APP_SERIALIZED: InjectionToken<(() => void | Promise<void>)[]>;\r\n\r\n/**\r\n * The DI token for setting the initial config for the platform.\r\n *\r\n * @publicApi\r\n */\r\nexport declare const INITIAL_CONFIG: InjectionToken<PlatformConfig>;\r\n\r\n/**\r\n * Config object passed to initialize the platform.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface PlatformConfig {\r\n    document?: string;\r\n    url?: string;\r\n}\r\n\r\n/**\r\n * The server platform that supports the runtime compiler.\r\n *\r\n * @publicApi\r\n */\r\nexport declare const platformDynamicServer: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport declare const platformServer: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;\r\n\r\n\r\n/**\r\n * Representation of the current platform state.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class PlatformState {\r\n    private _doc;\r\n    constructor(_doc: any);\r\n    /**\r\n     * Renders the current state of the platform to string.\r\n     */\r\n    renderToString(): string;\r\n    /**\r\n     * Returns the current DOM state.\r\n     */\r\n    getDocument(): any;\r\n}\r\n\r\n/**\r\n * Renders a Module to string.\r\n *\r\n * `document` is the full document HTML of the page to render, as a string.\r\n * `url` is the URL for the current render request.\r\n * `extraProviders` are the platform level providers for the current render request.\r\n *\r\n * Do not use this in a production server environment. Use pre-compiled {@link NgModuleFactory} with\r\n * {@link renderModuleFactory} instead.\r\n *\r\n * @publicApi\r\n */\r\nexport declare function renderModule<T>(module: Type<T>, options: {\r\n    document?: string;\r\n    url?: string;\r\n    extraProviders?: StaticProvider[];\r\n}): Promise<string>;\r\n\r\n/**\r\n * Renders a {@link NgModuleFactory} to string.\r\n *\r\n * `document` is the full document HTML of the page to render, as a string.\r\n * `url` is the URL for the current render request.\r\n * `extraProviders` are the platform level providers for the current render request.\r\n *\r\n * @publicApi\r\n */\r\nexport declare function renderModuleFactory<T>(moduleFactory: NgModuleFactory<T>, options: {\r\n    document?: string;\r\n    url?: string;\r\n    extraProviders?: StaticProvider[];\r\n}): Promise<string>;\r\n\r\n/**\r\n * The ng module for the server.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class ServerModule {\r\n}\r\n\r\n/**\r\n * NgModule to install on the server side while using the `TransferState` to transfer state from\r\n * server to client.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class ServerTransferStateModule {\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport declare const VERSION: Version;\r\n\r\ndeclare class ZoneClientBackend extends ZoneMacroTaskWrapper<HttpRequest<any>, HttpEvent<any>> implements HttpBackend {\r\n    private backend;\r\n    constructor(backend: HttpBackend);\r\n    handle(request: HttpRequest<any>): Observable<HttpEvent<any>>;\r\n    protected delegate(request: HttpRequest<any>): Observable<HttpEvent<any>>;\r\n}\r\n\r\ndeclare abstract class ZoneMacroTaskWrapper<S, R> {\r\n    wrap(request: S): Observable<R>;\r\n    protected abstract delegate(request: S): Observable<R>;\r\n}\r\n\r\nexport declare function ɵangular_packages_platform_server_platform_server_a(renderer: RendererFactory2, engine: ɵAnimationEngine, zone: NgZone): ɵAnimationRendererFactory;\r\n\r\nexport declare function ɵangular_packages_platform_server_platform_server_b(doc: Document, appId: string, transferStore: TransferState): () => void;\r\n\r\nexport declare class ɵangular_packages_platform_server_platform_server_c extends ɵSharedStylesHost {\r\n    private doc;\r\n    private transitionId;\r\n    private head;\r\n    constructor(doc: any, transitionId: string);\r\n    private _addStyle;\r\n    onStylesAdded(additions: Set<string>): void;\r\n}\r\n\r\n\r\nexport declare class ɵangular_packages_platform_server_platform_server_d {\r\n    private doc;\r\n    constructor(doc: any);\r\n    supports(eventName: string): boolean;\r\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\r\n    addGlobalEventListener(element: string, eventName: string, handler: Function): Function;\r\n}\r\n\r\nexport declare class ɵangular_packages_platform_server_platform_server_e implements XhrFactory {\r\n    build(): XMLHttpRequest;\r\n}\r\n\r\nexport declare function ɵangular_packages_platform_server_platform_server_f(backend: HttpBackend, injector: Injector): ZoneClientBackend;\r\n\r\nexport declare const ɵangular_packages_platform_server_platform_server_g: Provider[];\r\n\r\nexport declare const ɵINTERNAL_SERVER_PLATFORM_PROVIDERS: StaticProvider[];\r\n\r\nexport declare const ɵSERVER_RENDER_PROVIDERS: Provider[];\r\n\r\nexport declare class ɵServerRendererFactory2 implements RendererFactory2 {\r\n    private eventManager;\r\n    private ngZone;\r\n    private document;\r\n    private sharedStylesHost;\r\n    private rendererByCompId;\r\n    private defaultRenderer;\r\n    private schema;\r\n    constructor(eventManager: EventManager, ngZone: NgZone, document: any, sharedStylesHost: ɵSharedStylesHost);\r\n    createRenderer(element: any, type: RendererType2 | null): Renderer2;\r\n    begin(): void;\r\n    end(): void;\r\n}\r\n\r\nexport { }\r\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;;;;AASA;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;"}