{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/platform-server/fesm5/platform-server.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAmIgC,AAEzB;;;;;;;;;;kCAEe;;;;;;;;;;;;;;;kFAe4D;;;;;gDAGhE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yCAsMuB,AAElC;;;;;;;;;;;;;;;kCAEwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2CA8BY,AAEpC;;;;;;;;;;kCAE0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yCAkDQ,AAElC;;;;;;;;;;sEAEwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAuOI,AAE5B;;;;;;;;;;;;;;;;kCAGkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAkDpB;;;;;;;;;;;;;;;;;;;;;;gDAYgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA8ChB;;;;;;;;;;;;;;;;;;;;;;gDAY6B","file":"platform-server.js","sourcesContent":["/**\n * @license Angular v9.0.1\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { __extends, __decorate, __param, __metadata, __values } from 'tslib';\nimport { ɵsetRootDomAdapter, DOCUMENT, ɵgetDOM, ɵPLATFORM_SERVER_ID, PlatformLocation, ViewportScroller, ɵNullViewportScroller } from '@angular/common';\nimport { Injectable, Inject, Injector, InjectionToken, Optional, ViewEncapsulation, NgZone, PLATFORM_ID, PLATFORM_INITIALIZER, ɵALLOW_MULTIPLE_PLATFORMS, RendererFactory2, NgModule, Testability, ɵsetDocument, createPlatformFactory, platformCore, APP_ID, ApplicationRef, ɵisPromise, Version } from '@angular/core';\nimport { ɵBrowserDomAdapter, ɵflattenStyles, EventManager, ɵSharedStylesHost, ɵNAMESPACE_URIS, ɵshimContentAttribute, ɵshimHostAttribute, ɵTRANSITION_ID, EVENT_MANAGER_PLUGINS, BrowserModule, ɵescapeHtml, TransferState } from '@angular/platform-browser';\nimport { ɵAnimationEngine } from '@angular/animations/browser';\nimport { ɵHttpInterceptingHandler, XhrFactory, HttpHandler, HttpBackend, HttpClientModule } from '@angular/common/http';\nimport { ɵplatformCoreDynamic } from '@angular/platform-browser-dynamic';\nimport { ɵAnimationRendererFactory, NoopAnimationsModule } from '@angular/platform-browser/animations';\nimport { Observable, Subject } from 'rxjs';\nimport { parse } from 'url';\nimport { DomElementSchemaRegistry } from '@angular/compiler';\nimport { first } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar domino = require('domino');\nfunction _notImplemented(methodName) {\n    return new Error('This method is not implemented in DominoAdapter: ' + methodName);\n}\nfunction setDomTypes() {\n    // Make all Domino types available as types in the global env.\n    Object.assign(global, domino.impl);\n    global['KeyboardEvent'] = domino.impl.Event;\n}\n/**\n * Parses a document string to a Document object.\n */\nfunction parseDocument(html, url) {\n    if (url === void 0) { url = '/'; }\n    var window = domino.createWindow(html, url);\n    var doc = window.document;\n    return doc;\n}\n/**\n * Serializes a document to string.\n */\nfunction serializeDocument(doc) {\n    return doc.serialize();\n}\n/**\n * DOM Adapter for the server platform based on https://github.com/fgnass/domino.\n */\nvar DominoAdapter = /** @class */ (function (_super) {\n    __extends(DominoAdapter, _super);\n    function DominoAdapter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DominoAdapter.makeCurrent = function () {\n        setDomTypes();\n        ɵsetRootDomAdapter(new DominoAdapter());\n    };\n    DominoAdapter.prototype.log = function (error) {\n        // tslint:disable-next-line:no-console\n        console.log(error);\n    };\n    DominoAdapter.prototype.logGroup = function (error) { console.error(error); };\n    DominoAdapter.prototype.logGroupEnd = function () { };\n    DominoAdapter.prototype.supportsDOMEvents = function () { return false; };\n    DominoAdapter.prototype.createHtmlDocument = function () {\n        return parseDocument('<html><head><title>fakeTitle</title></head><body></body></html>');\n    };\n    DominoAdapter.prototype.getDefaultDocument = function () {\n        if (!DominoAdapter.defaultDoc) {\n            DominoAdapter.defaultDoc = domino.createDocument();\n        }\n        return DominoAdapter.defaultDoc;\n    };\n    DominoAdapter.prototype.isElementNode = function (node) {\n        return node ? node.nodeType === DominoAdapter.defaultDoc.ELEMENT_NODE : false;\n    };\n    DominoAdapter.prototype.isShadowRoot = function (node) { return node.shadowRoot == node; };\n    DominoAdapter.prototype.getProperty = function (el, name) {\n        if (name === 'href') {\n            // Domino tries to resolve href-s which we do not want. Just return the\n            // attribute value.\n            return el.getAttribute('href');\n        }\n        else if (name === 'innerText') {\n            // Domino does not support innerText. Just map it to textContent.\n            return el.textContent;\n        }\n        return el[name];\n    };\n    DominoAdapter.prototype.getGlobalEventTarget = function (doc, target) {\n        if (target === 'window') {\n            return doc.defaultView;\n        }\n        if (target === 'document') {\n            return doc;\n        }\n        if (target === 'body') {\n            return doc.body;\n        }\n        return null;\n    };\n    DominoAdapter.prototype.getBaseHref = function (doc) {\n        var base = doc.documentElement.querySelector('base');\n        var href = '';\n        if (base) {\n            href = base.getAttribute('href');\n        }\n        // TODO(alxhub): Need relative path logic from BrowserDomAdapter here?\n        return href;\n    };\n    DominoAdapter.prototype.dispatchEvent = function (el, evt) {\n        el.dispatchEvent(evt);\n        // Dispatch the event to the window also.\n        var doc = el.ownerDocument || el;\n        var win = doc.defaultView;\n        if (win) {\n            win.dispatchEvent(evt);\n        }\n    };\n    DominoAdapter.prototype.getHistory = function () { throw _notImplemented('getHistory'); };\n    DominoAdapter.prototype.getLocation = function () { throw _notImplemented('getLocation'); };\n    DominoAdapter.prototype.getUserAgent = function () { return 'Fake user agent'; };\n    DominoAdapter.prototype.performanceNow = function () { return Date.now(); };\n    DominoAdapter.prototype.supportsCookies = function () { return false; };\n    DominoAdapter.prototype.getCookie = function (name) { throw _notImplemented('getCookie'); };\n    return DominoAdapter;\n}(ɵBrowserDomAdapter));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Representation of the current platform state.\n *\n * @publicApi\n */\nvar PlatformState = /** @class */ (function () {\n    function PlatformState(_doc) {\n        this._doc = _doc;\n    }\n    /**\n     * Renders the current state of the platform to string.\n     */\n    PlatformState.prototype.renderToString = function () { return serializeDocument(this._doc); };\n    /**\n     * Returns the current DOM state.\n     */\n    PlatformState.prototype.getDocument = function () { return this._doc; };\n    PlatformState = __decorate([\n        Injectable(),\n        __param(0, Inject(DOCUMENT)),\n        __metadata(\"design:paramtypes\", [Object])\n    ], PlatformState);\n    return PlatformState;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar xhr2 = require('xhr2');\nvar ServerXhr = /** @class */ (function () {\n    function ServerXhr() {\n    }\n    ServerXhr.prototype.build = function () { return new xhr2.XMLHttpRequest(); };\n    ServerXhr = __decorate([\n        Injectable()\n    ], ServerXhr);\n    return ServerXhr;\n}());\nvar ZoneMacroTaskWrapper = /** @class */ (function () {\n    function ZoneMacroTaskWrapper() {\n    }\n    ZoneMacroTaskWrapper.prototype.wrap = function (request) {\n        var _this = this;\n        return new Observable(function (observer) {\n            var task = null;\n            var scheduled = false;\n            var sub = null;\n            var savedResult = null;\n            var savedError = null;\n            var scheduleTask = function (_task) {\n                task = _task;\n                scheduled = true;\n                var delegate = _this.delegate(request);\n                sub = delegate.subscribe(function (res) { return savedResult = res; }, function (err) {\n                    if (!scheduled) {\n                        throw new Error('An http observable was completed twice. This shouldn\\'t happen, please file a bug.');\n                    }\n                    savedError = err;\n                    scheduled = false;\n                    task.invoke();\n                }, function () {\n                    if (!scheduled) {\n                        throw new Error('An http observable was completed twice. This shouldn\\'t happen, please file a bug.');\n                    }\n                    scheduled = false;\n                    task.invoke();\n                });\n            };\n            var cancelTask = function (_task) {\n                if (!scheduled) {\n                    return;\n                }\n                scheduled = false;\n                if (sub) {\n                    sub.unsubscribe();\n                    sub = null;\n                }\n            };\n            var onComplete = function () {\n                if (savedError !== null) {\n                    observer.error(savedError);\n                }\n                else {\n                    observer.next(savedResult);\n                    observer.complete();\n                }\n            };\n            // MockBackend for Http is synchronous, which means that if scheduleTask is by\n            // scheduleMacroTask, the request will hit MockBackend and the response will be\n            // sent, causing task.invoke() to be called.\n            var _task = Zone.current.scheduleMacroTask('ZoneMacroTaskWrapper.subscribe', onComplete, {}, function () { return null; }, cancelTask);\n            scheduleTask(_task);\n            return function () {\n                if (scheduled && task) {\n                    task.zone.cancelTask(task);\n                    scheduled = false;\n                }\n                if (sub) {\n                    sub.unsubscribe();\n                    sub = null;\n                }\n            };\n        });\n    };\n    return ZoneMacroTaskWrapper;\n}());\nvar ZoneClientBackend = /** @class */ (function (_super) {\n    __extends(ZoneClientBackend, _super);\n    function ZoneClientBackend(backend) {\n        var _this = _super.call(this) || this;\n        _this.backend = backend;\n        return _this;\n    }\n    ZoneClientBackend.prototype.handle = function (request) { return this.wrap(request); };\n    ZoneClientBackend.prototype.delegate = function (request) {\n        return this.backend.handle(request);\n    };\n    return ZoneClientBackend;\n}(ZoneMacroTaskWrapper));\nfunction zoneWrappedInterceptingHandler(backend, injector) {\n    var realBackend = new ɵHttpInterceptingHandler(backend, injector);\n    return new ZoneClientBackend(realBackend);\n}\nvar SERVER_HTTP_PROVIDERS = [\n    { provide: XhrFactory, useClass: ServerXhr }, {\n        provide: HttpHandler,\n        useFactory: zoneWrappedInterceptingHandler,\n        deps: [HttpBackend, Injector]\n    }\n];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The DI token for setting the initial config for the platform.\n *\n * @publicApi\n */\nvar INITIAL_CONFIG = new InjectionToken('Server.INITIAL_CONFIG');\n/**\n * A function that will be executed when calling `renderModuleFactory` or `renderModule` just\n * before current platform state is rendered to string.\n *\n * @publicApi\n */\nvar BEFORE_APP_SERIALIZED = new InjectionToken('Server.RENDER_MODULE_HOOK');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction parseUrl(urlStr) {\n    var parsedUrl = parse(urlStr);\n    return {\n        hostname: parsedUrl.hostname || '',\n        protocol: parsedUrl.protocol || '',\n        port: parsedUrl.port || '',\n        pathname: parsedUrl.pathname || '',\n        search: parsedUrl.search || '',\n        hash: parsedUrl.hash || '',\n    };\n}\n/**\n * Server-side implementation of URL state. Implements `pathname`, `search`, and `hash`\n * but not the state stack.\n */\nvar ServerPlatformLocation = /** @class */ (function () {\n    function ServerPlatformLocation(_doc, _config) {\n        this._doc = _doc;\n        this.href = '/';\n        this.hostname = '/';\n        this.protocol = '/';\n        this.port = '/';\n        this.pathname = '/';\n        this.search = '';\n        this.hash = '';\n        this._hashUpdate = new Subject();\n        var config = _config;\n        if (!!config && !!config.url) {\n            var parsedUrl = parseUrl(config.url);\n            this.hostname = parsedUrl.hostname;\n            this.protocol = parsedUrl.protocol;\n            this.port = parsedUrl.port;\n            this.pathname = parsedUrl.pathname;\n            this.search = parsedUrl.search;\n            this.hash = parsedUrl.hash;\n        }\n    }\n    ServerPlatformLocation.prototype.getBaseHrefFromDOM = function () { return ɵgetDOM().getBaseHref(this._doc); };\n    ServerPlatformLocation.prototype.onPopState = function (fn) {\n        // No-op: a state stack is not implemented, so\n        // no events will ever come.\n    };\n    ServerPlatformLocation.prototype.onHashChange = function (fn) { this._hashUpdate.subscribe(fn); };\n    Object.defineProperty(ServerPlatformLocation.prototype, \"url\", {\n        get: function () { return \"\" + this.pathname + this.search + this.hash; },\n        enumerable: true,\n        configurable: true\n    });\n    ServerPlatformLocation.prototype.setHash = function (value, oldUrl) {\n        var _this = this;\n        if (this.hash === value) {\n            // Don't fire events if the hash has not changed.\n            return;\n        }\n        this.hash = value;\n        var newUrl = this.url;\n        scheduleMicroTask(function () { return _this._hashUpdate.next({\n            type: 'hashchange', state: null, oldUrl: oldUrl, newUrl: newUrl\n        }); });\n    };\n    ServerPlatformLocation.prototype.replaceState = function (state, title, newUrl) {\n        var oldUrl = this.url;\n        var parsedUrl = parseUrl(newUrl);\n        this.pathname = parsedUrl.pathname;\n        this.search = parsedUrl.search;\n        this.setHash(parsedUrl.hash, oldUrl);\n    };\n    ServerPlatformLocation.prototype.pushState = function (state, title, newUrl) {\n        this.replaceState(state, title, newUrl);\n    };\n    ServerPlatformLocation.prototype.forward = function () { throw new Error('Not implemented'); };\n    ServerPlatformLocation.prototype.back = function () { throw new Error('Not implemented'); };\n    // History API isn't available on server, therefore return undefined\n    ServerPlatformLocation.prototype.getState = function () { return undefined; };\n    ServerPlatformLocation = __decorate([\n        Injectable(),\n        __param(0, Inject(DOCUMENT)), __param(1, Optional()), __param(1, Inject(INITIAL_CONFIG)),\n        __metadata(\"design:paramtypes\", [Object, Object])\n    ], ServerPlatformLocation);\n    return ServerPlatformLocation;\n}());\nfunction scheduleMicroTask(fn) {\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ServerEventManagerPlugin = /** @class */ (function () {\n    function ServerEventManagerPlugin(doc) {\n        this.doc = doc;\n    }\n    // Handle all events on the server.\n    ServerEventManagerPlugin.prototype.supports = function (eventName) { return true; };\n    ServerEventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) {\n        return ɵgetDOM().onAndCancel(element, eventName, handler);\n    };\n    ServerEventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {\n        var target = ɵgetDOM().getGlobalEventTarget(this.doc, element);\n        if (!target) {\n            throw new Error(\"Unsupported event target \" + target + \" for event \" + eventName);\n        }\n        return this.addEventListener(target, eventName, handler);\n    };\n    ServerEventManagerPlugin = __decorate([\n        Injectable(),\n        __param(0, Inject(DOCUMENT)),\n        __metadata(\"design:paramtypes\", [Object])\n    ], ServerEventManagerPlugin);\n    return ServerEventManagerPlugin;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar EMPTY_ARRAY = [];\nvar DEFAULT_SCHEMA = new DomElementSchemaRegistry();\nvar ServerRendererFactory2 = /** @class */ (function () {\n    function ServerRendererFactory2(eventManager, ngZone, document, sharedStylesHost) {\n        this.eventManager = eventManager;\n        this.ngZone = ngZone;\n        this.document = document;\n        this.sharedStylesHost = sharedStylesHost;\n        this.rendererByCompId = new Map();\n        this.schema = DEFAULT_SCHEMA;\n        this.defaultRenderer = new DefaultServerRenderer2(eventManager, document, ngZone, this.schema);\n    }\n    ServerRendererFactory2.prototype.createRenderer = function (element, type) {\n        if (!element || !type) {\n            return this.defaultRenderer;\n        }\n        switch (type.encapsulation) {\n            case ViewEncapsulation.Native:\n            case ViewEncapsulation.Emulated: {\n                var renderer = this.rendererByCompId.get(type.id);\n                if (!renderer) {\n                    renderer = new EmulatedEncapsulationServerRenderer2(this.eventManager, this.document, this.ngZone, this.sharedStylesHost, this.schema, type);\n                    this.rendererByCompId.set(type.id, renderer);\n                }\n                renderer.applyToHost(element);\n                return renderer;\n            }\n            default: {\n                if (!this.rendererByCompId.has(type.id)) {\n                    var styles = ɵflattenStyles(type.id, type.styles, []);\n                    this.sharedStylesHost.addStyles(styles);\n                    this.rendererByCompId.set(type.id, this.defaultRenderer);\n                }\n                return this.defaultRenderer;\n            }\n        }\n    };\n    ServerRendererFactory2.prototype.begin = function () { };\n    ServerRendererFactory2.prototype.end = function () { };\n    ServerRendererFactory2 = __decorate([\n        Injectable(),\n        __param(2, Inject(DOCUMENT)),\n        __metadata(\"design:paramtypes\", [EventManager, NgZone, Object, ɵSharedStylesHost])\n    ], ServerRendererFactory2);\n    return ServerRendererFactory2;\n}());\nvar DefaultServerRenderer2 = /** @class */ (function () {\n    function DefaultServerRenderer2(eventManager, document, ngZone, schema) {\n        this.eventManager = eventManager;\n        this.document = document;\n        this.ngZone = ngZone;\n        this.schema = schema;\n        this.data = Object.create(null);\n    }\n    DefaultServerRenderer2.prototype.destroy = function () { };\n    DefaultServerRenderer2.prototype.createElement = function (name, namespace, debugInfo) {\n        if (namespace) {\n            var doc = this.document || ɵgetDOM().getDefaultDocument();\n            // TODO(FW-811): Ivy may cause issues here because it's passing around\n            // full URIs for namespaces, therefore this lookup will fail.\n            return doc.createElementNS(ɵNAMESPACE_URIS[namespace], name);\n        }\n        return ɵgetDOM().createElement(name, this.document);\n    };\n    DefaultServerRenderer2.prototype.createComment = function (value, debugInfo) {\n        return ɵgetDOM().getDefaultDocument().createComment(value);\n    };\n    DefaultServerRenderer2.prototype.createText = function (value, debugInfo) {\n        var doc = ɵgetDOM().getDefaultDocument();\n        return doc.createTextNode(value);\n    };\n    DefaultServerRenderer2.prototype.appendChild = function (parent, newChild) { parent.appendChild(newChild); };\n    DefaultServerRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {\n        if (parent) {\n            parent.insertBefore(newChild, refChild);\n        }\n    };\n    DefaultServerRenderer2.prototype.removeChild = function (parent, oldChild) {\n        if (parent) {\n            parent.removeChild(oldChild);\n        }\n    };\n    DefaultServerRenderer2.prototype.selectRootElement = function (selectorOrNode, debugInfo) {\n        var el;\n        if (typeof selectorOrNode === 'string') {\n            el = this.document.querySelector(selectorOrNode);\n            if (!el) {\n                throw new Error(\"The selector \\\"\" + selectorOrNode + \"\\\" did not match any elements\");\n            }\n        }\n        else {\n            el = selectorOrNode;\n        }\n        while (el.firstChild) {\n            el.removeChild(el.firstChild);\n        }\n        return el;\n    };\n    DefaultServerRenderer2.prototype.parentNode = function (node) { return node.parentNode; };\n    DefaultServerRenderer2.prototype.nextSibling = function (node) { return node.nextSibling; };\n    DefaultServerRenderer2.prototype.setAttribute = function (el, name, value, namespace) {\n        if (namespace) {\n            // TODO(FW-811): Ivy may cause issues here because it's passing around\n            // full URIs for namespaces, therefore this lookup will fail.\n            el.setAttributeNS(ɵNAMESPACE_URIS[namespace], namespace + ':' + name, value);\n        }\n        else {\n            el.setAttribute(name, value);\n        }\n    };\n    DefaultServerRenderer2.prototype.removeAttribute = function (el, name, namespace) {\n        if (namespace) {\n            // TODO(FW-811): Ivy may cause issues here because it's passing around\n            // full URIs for namespaces, therefore this lookup will fail.\n            el.removeAttributeNS(ɵNAMESPACE_URIS[namespace], name);\n        }\n        else {\n            el.removeAttribute(name);\n        }\n    };\n    DefaultServerRenderer2.prototype.addClass = function (el, name) { el.classList.add(name); };\n    DefaultServerRenderer2.prototype.removeClass = function (el, name) { el.classList.remove(name); };\n    DefaultServerRenderer2.prototype.setStyle = function (el, style, value, flags) {\n        style = style.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n        var styleMap = _readStyleAttribute(el);\n        styleMap[style] = value == null ? '' : value;\n        _writeStyleAttribute(el, styleMap);\n    };\n    DefaultServerRenderer2.prototype.removeStyle = function (el, style, flags) {\n        // IE requires '' instead of null\n        // see https://github.com/angular/angular/issues/7916\n        this.setStyle(el, style, '', flags);\n    };\n    // The value was validated already as a property binding, against the property name.\n    // To know this value is safe to use as an attribute, the security context of the\n    // attribute with the given name is checked against that security context of the\n    // property.\n    DefaultServerRenderer2.prototype._isSafeToReflectProperty = function (tagName, propertyName) {\n        return this.schema.securityContext(tagName, propertyName, true) ===\n            this.schema.securityContext(tagName, propertyName, false);\n    };\n    DefaultServerRenderer2.prototype.setProperty = function (el, name, value) {\n        checkNoSyntheticProp(name, 'property');\n        if (name === 'innerText') {\n            // Domino does not support innerText. Just map it to textContent.\n            el.textContent = value;\n        }\n        el[name] = value;\n        // Mirror property values for known HTML element properties in the attributes.\n        // Skip `innerhtml` which is conservatively marked as an attribute for security\n        // purposes but is not actually an attribute.\n        var tagName = el.tagName.toLowerCase();\n        if (value != null && (typeof value === 'number' || typeof value == 'string') &&\n            name.toLowerCase() !== 'innerhtml' && this.schema.hasElement(tagName, EMPTY_ARRAY) &&\n            this.schema.hasProperty(tagName, name, EMPTY_ARRAY) &&\n            this._isSafeToReflectProperty(tagName, name)) {\n            this.setAttribute(el, name, value.toString());\n        }\n    };\n    DefaultServerRenderer2.prototype.setValue = function (node, value) { node.textContent = value; };\n    DefaultServerRenderer2.prototype.listen = function (target, eventName, callback) {\n        checkNoSyntheticProp(eventName, 'listener');\n        if (typeof target === 'string') {\n            return this.eventManager.addGlobalEventListener(target, eventName, this.decoratePreventDefault(callback));\n        }\n        return this.eventManager.addEventListener(target, eventName, this.decoratePreventDefault(callback));\n    };\n    DefaultServerRenderer2.prototype.decoratePreventDefault = function (eventHandler) {\n        var _this = this;\n        return function (event) {\n            // Ivy uses `Function` as a special token that allows us to unwrap the function\n            // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.\n            if (event === Function) {\n                return eventHandler;\n            }\n            // Run the event handler inside the ngZone because event handlers are not patched\n            // by Zone on the server. This is required only for tests.\n            var allowDefaultBehavior = _this.ngZone.runGuarded(function () { return eventHandler(event); });\n            if (allowDefaultBehavior === false) {\n                event.preventDefault();\n                event.returnValue = false;\n            }\n            return undefined;\n        };\n    };\n    return DefaultServerRenderer2;\n}());\nvar AT_CHARCODE = '@'.charCodeAt(0);\nfunction checkNoSyntheticProp(name, nameKind) {\n    if (name.charCodeAt(0) === AT_CHARCODE) {\n        throw new Error(\"Found the synthetic \" + nameKind + \" \" + name + \". Please include either \\\"BrowserAnimationsModule\\\" or \\\"NoopAnimationsModule\\\" in your application.\");\n    }\n}\nvar EmulatedEncapsulationServerRenderer2 = /** @class */ (function (_super) {\n    __extends(EmulatedEncapsulationServerRenderer2, _super);\n    function EmulatedEncapsulationServerRenderer2(eventManager, document, ngZone, sharedStylesHost, schema, component) {\n        var _this = _super.call(this, eventManager, document, ngZone, schema) || this;\n        _this.component = component;\n        // Add a 's' prefix to style attributes to indicate server.\n        var componentId = 's' + component.id;\n        var styles = ɵflattenStyles(componentId, component.styles, []);\n        sharedStylesHost.addStyles(styles);\n        _this.contentAttr = ɵshimContentAttribute(componentId);\n        _this.hostAttr = ɵshimHostAttribute(componentId);\n        return _this;\n    }\n    EmulatedEncapsulationServerRenderer2.prototype.applyToHost = function (element) { _super.prototype.setAttribute.call(this, element, this.hostAttr, ''); };\n    EmulatedEncapsulationServerRenderer2.prototype.createElement = function (parent, name) {\n        var el = _super.prototype.createElement.call(this, parent, name, this.document);\n        _super.prototype.setAttribute.call(this, el, this.contentAttr, '');\n        return el;\n    };\n    return EmulatedEncapsulationServerRenderer2;\n}(DefaultServerRenderer2));\nfunction _readStyleAttribute(element) {\n    var styleMap = {};\n    var styleAttribute = element.getAttribute('style');\n    if (styleAttribute) {\n        var styleList = styleAttribute.split(/;+/g);\n        for (var i = 0; i < styleList.length; i++) {\n            var style = styleList[i].trim();\n            if (style.length > 0) {\n                var colonIndex = style.indexOf(':');\n                if (colonIndex === -1) {\n                    throw new Error(\"Invalid CSS style: \" + style);\n                }\n                var name_1 = style.substr(0, colonIndex).trim();\n                styleMap[name_1] = style.substr(colonIndex + 1).trim();\n            }\n        }\n    }\n    return styleMap;\n}\nfunction _writeStyleAttribute(element, styleMap) {\n    var styleAttrValue = '';\n    for (var key in styleMap) {\n        var newValue = styleMap[key];\n        if (newValue != null) {\n            styleAttrValue += key + ':' + styleMap[key] + ';';\n        }\n    }\n    element.setAttribute('style', styleAttrValue);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ServerStylesHost = /** @class */ (function (_super) {\n    __extends(ServerStylesHost, _super);\n    function ServerStylesHost(doc, transitionId) {\n        var _this = _super.call(this) || this;\n        _this.doc = doc;\n        _this.transitionId = transitionId;\n        _this.head = null;\n        _this.head = doc.getElementsByTagName('head')[0];\n        return _this;\n    }\n    ServerStylesHost.prototype._addStyle = function (style) {\n        var adapter = ɵgetDOM();\n        var el = adapter.createElement('style');\n        el.textContent = style;\n        if (!!this.transitionId) {\n            el.setAttribute('ng-transition', this.transitionId);\n        }\n        this.head.appendChild(el);\n    };\n    ServerStylesHost.prototype.onStylesAdded = function (additions) {\n        var _this = this;\n        additions.forEach(function (style) { return _this._addStyle(style); });\n    };\n    ServerStylesHost = __decorate([\n        Injectable(),\n        __param(0, Inject(DOCUMENT)),\n        __param(1, Optional()), __param(1, Inject(ɵTRANSITION_ID)),\n        __metadata(\"design:paramtypes\", [Object, String])\n    ], ServerStylesHost);\n    return ServerStylesHost;\n}(ɵSharedStylesHost));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction notSupported(feature) {\n    throw new Error(\"platform-server does not support '\" + feature + \"'.\");\n}\nvar INTERNAL_SERVER_PLATFORM_PROVIDERS = [\n    { provide: DOCUMENT, useFactory: _document, deps: [Injector] },\n    { provide: PLATFORM_ID, useValue: ɵPLATFORM_SERVER_ID },\n    { provide: PLATFORM_INITIALIZER, useFactory: initDominoAdapter, multi: true, deps: [Injector] }, {\n        provide: PlatformLocation,\n        useClass: ServerPlatformLocation,\n        deps: [DOCUMENT, [Optional, INITIAL_CONFIG]]\n    },\n    { provide: PlatformState, deps: [DOCUMENT] },\n    // Add special provider that allows multiple instances of platformServer* to be created.\n    { provide: ɵALLOW_MULTIPLE_PLATFORMS, useValue: true }\n];\nfunction initDominoAdapter(injector) {\n    return function () { DominoAdapter.makeCurrent(); };\n}\nfunction instantiateServerRendererFactory(renderer, engine, zone) {\n    return new ɵAnimationRendererFactory(renderer, engine, zone);\n}\nvar SERVER_RENDER_PROVIDERS = [\n    ServerRendererFactory2,\n    {\n        provide: RendererFactory2,\n        useFactory: instantiateServerRendererFactory,\n        deps: [ServerRendererFactory2, ɵAnimationEngine, NgZone]\n    },\n    ServerStylesHost,\n    { provide: ɵSharedStylesHost, useExisting: ServerStylesHost },\n    { provide: EVENT_MANAGER_PLUGINS, multi: true, useClass: ServerEventManagerPlugin },\n];\n/**\n * The ng module for the server.\n *\n * @publicApi\n */\nvar ServerModule = /** @class */ (function () {\n    function ServerModule() {\n    }\n    ServerModule = __decorate([\n        NgModule({\n            exports: [BrowserModule],\n            imports: [HttpClientModule, NoopAnimationsModule],\n            providers: [\n                SERVER_RENDER_PROVIDERS,\n                SERVER_HTTP_PROVIDERS,\n                { provide: Testability, useValue: null },\n                { provide: ViewportScroller, useClass: ɵNullViewportScroller },\n            ],\n        })\n    ], ServerModule);\n    return ServerModule;\n}());\nfunction _document(injector) {\n    var config = injector.get(INITIAL_CONFIG, null);\n    var document = config && config.document ? parseDocument(config.document, config.url) :\n        ɵgetDOM().createHtmlDocument();\n    // Tell ivy about the global document\n    ɵsetDocument(document);\n    return document;\n}\n/**\n * @publicApi\n */\nvar platformServer = createPlatformFactory(platformCore, 'server', INTERNAL_SERVER_PLATFORM_PROVIDERS);\n/**\n * The server platform that supports the runtime compiler.\n *\n * @publicApi\n */\nvar platformDynamicServer = createPlatformFactory(ɵplatformCoreDynamic, 'serverDynamic', INTERNAL_SERVER_PLATFORM_PROVIDERS);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction serializeTransferStateFactory(doc, appId, transferStore) {\n    return function () {\n        var script = doc.createElement('script');\n        script.id = appId + '-state';\n        script.setAttribute('type', 'application/json');\n        script.textContent = ɵescapeHtml(transferStore.toJson());\n        doc.body.appendChild(script);\n    };\n}\n/**\n * NgModule to install on the server side while using the `TransferState` to transfer state from\n * server to client.\n *\n * @publicApi\n */\nvar ServerTransferStateModule = /** @class */ (function () {\n    function ServerTransferStateModule() {\n    }\n    ServerTransferStateModule = __decorate([\n        NgModule({\n            providers: [\n                TransferState, {\n                    provide: BEFORE_APP_SERIALIZED,\n                    useFactory: serializeTransferStateFactory,\n                    deps: [DOCUMENT, APP_ID, TransferState],\n                    multi: true,\n                }\n            ]\n        })\n    ], ServerTransferStateModule);\n    return ServerTransferStateModule;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction _getPlatform(platformFactory, options) {\n    var extraProviders = options.extraProviders ? options.extraProviders : [];\n    return platformFactory([\n        { provide: INITIAL_CONFIG, useValue: { document: options.document, url: options.url } },\n        extraProviders\n    ]);\n}\nfunction _render(platform, moduleRefPromise) {\n    return moduleRefPromise.then(function (moduleRef) {\n        var transitionId = moduleRef.injector.get(ɵTRANSITION_ID, null);\n        if (!transitionId) {\n            throw new Error(\"renderModule[Factory]() requires the use of BrowserModule.withServerTransition() to ensure\\nthe server-rendered app can be properly bootstrapped into a client app.\");\n        }\n        var applicationRef = moduleRef.injector.get(ApplicationRef);\n        return applicationRef.isStable.pipe((first(function (isStable) { return isStable; })))\n            .toPromise()\n            .then(function () {\n            var e_1, _a;\n            var platformState = platform.injector.get(PlatformState);\n            var asyncPromises = [];\n            // Run any BEFORE_APP_SERIALIZED callbacks just before rendering to string.\n            var callbacks = moduleRef.injector.get(BEFORE_APP_SERIALIZED, null);\n            if (callbacks) {\n                try {\n                    for (var callbacks_1 = __values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {\n                        var callback = callbacks_1_1.value;\n                        try {\n                            var callbackResult = callback();\n                            if (ɵisPromise(callbackResult)) {\n                                // TODO: in TS3.7, callbackResult is void.\n                                asyncPromises.push(callbackResult);\n                            }\n                        }\n                        catch (e) {\n                            // Ignore exceptions.\n                            console.warn('Ignoring BEFORE_APP_SERIALIZED Exception: ', e);\n                        }\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n            var complete = function () {\n                var output = platformState.renderToString();\n                platform.destroy();\n                return output;\n            };\n            if (asyncPromises.length === 0) {\n                return complete();\n            }\n            return Promise\n                .all(asyncPromises.map(function (asyncPromise) {\n                return asyncPromise.catch(function (e) { console.warn('Ignoring BEFORE_APP_SERIALIZED Exception: ', e); });\n            }))\n                .then(complete);\n        });\n    });\n}\n/**\n * Renders a Module to string.\n *\n * `document` is the full document HTML of the page to render, as a string.\n * `url` is the URL for the current render request.\n * `extraProviders` are the platform level providers for the current render request.\n *\n * Do not use this in a production server environment. Use pre-compiled {@link NgModuleFactory} with\n * {@link renderModuleFactory} instead.\n *\n * @publicApi\n */\nfunction renderModule(module, options) {\n    var platform = _getPlatform(platformDynamicServer, options);\n    return _render(platform, platform.bootstrapModule(module));\n}\n/**\n * Renders a {@link NgModuleFactory} to string.\n *\n * `document` is the full document HTML of the page to render, as a string.\n * `url` is the URL for the current render request.\n * `extraProviders` are the platform level providers for the current render request.\n *\n * @publicApi\n */\nfunction renderModuleFactory(moduleFactory, options) {\n    var platform = _getPlatform(platformServer, options);\n    return _render(platform, platform.bootstrapModuleFactory(moduleFactory));\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nvar VERSION = new Version('9.0.1');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BEFORE_APP_SERIALIZED, INITIAL_CONFIG, PlatformState, ServerModule, ServerTransferStateModule, VERSION, platformDynamicServer, platformServer, renderModule, renderModuleFactory, INTERNAL_SERVER_PLATFORM_PROVIDERS as ɵINTERNAL_SERVER_PLATFORM_PROVIDERS, SERVER_RENDER_PROVIDERS as ɵSERVER_RENDER_PROVIDERS, ServerRendererFactory2 as ɵServerRendererFactory2, instantiateServerRendererFactory as ɵangular_packages_platform_server_platform_server_a, serializeTransferStateFactory as ɵangular_packages_platform_server_platform_server_b, ServerStylesHost as ɵangular_packages_platform_server_platform_server_c, ServerEventManagerPlugin as ɵangular_packages_platform_server_platform_server_d, ServerXhr as ɵangular_packages_platform_server_platform_server_e, zoneWrappedInterceptingHandler as ɵangular_packages_platform_server_platform_server_f, SERVER_HTTP_PROVIDERS as ɵangular_packages_platform_server_platform_server_g };\n"]}