{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/compiler/fesm2015/testing.js"],"names":[],"mappings":"AAAA","file":"testing.js","sourcesContent":["/**\n * @license Angular v9.0.1\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ResourceLoader, core, DirectiveResolver, NgModuleResolver, PipeResolver } from '@angular/compiler';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/compiler/testing/src/resource_loader_mock.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A mock implementation of {\\@link ResourceLoader} that allows outgoing requests to be mocked\n * and responded to within a single test, without going to the network.\n */\nclass MockResourceLoader extends ResourceLoader {\n    constructor() {\n        super(...arguments);\n        this._expectations = [];\n        this._definitions = new Map();\n        this._requests = [];\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    get(url) {\n        /** @type {?} */\n        const request = new _PendingRequest(url);\n        this._requests.push(request);\n        return request.getPromise();\n    }\n    /**\n     * @return {?}\n     */\n    hasPendingRequests() { return !!this._requests.length; }\n    /**\n     * Add an expectation for the given URL. Incoming requests will be checked against\n     * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\n     * can be used to check if any expectations have not yet been met.\n     *\n     * The response given will be returned if the expectation matches.\n     * @param {?} url\n     * @param {?} response\n     * @return {?}\n     */\n    expect(url, response) {\n        /** @type {?} */\n        const expectation = new _Expectation(url, response);\n        this._expectations.push(expectation);\n    }\n    /**\n     * Add a definition for the given URL to return the given response. Unlike expectations,\n     * definitions have no order and will satisfy any matching request at any time. Also\n     * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\n     * to return an error.\n     * @param {?} url\n     * @param {?} response\n     * @return {?}\n     */\n    when(url, response) { this._definitions.set(url, response); }\n    /**\n     * Process pending requests and verify there are no outstanding expectations. Also fails\n     * if no requests are pending.\n     * @return {?}\n     */\n    flush() {\n        if (this._requests.length === 0) {\n            throw new Error('No pending requests to flush');\n        }\n        do {\n            this._processRequest((/** @type {?} */ (this._requests.shift())));\n        } while (this._requests.length > 0);\n        this.verifyNoOutstandingExpectations();\n    }\n    /**\n     * Throw an exception if any expectations have not been satisfied.\n     * @return {?}\n     */\n    verifyNoOutstandingExpectations() {\n        if (this._expectations.length === 0)\n            return;\n        /** @type {?} */\n        const urls = [];\n        for (let i = 0; i < this._expectations.length; i++) {\n            /** @type {?} */\n            const expectation = this._expectations[i];\n            urls.push(expectation.url);\n        }\n        throw new Error(`Unsatisfied requests: ${urls.join(', ')}`);\n    }\n    /**\n     * @private\n     * @param {?} request\n     * @return {?}\n     */\n    _processRequest(request) {\n        /** @type {?} */\n        const url = request.url;\n        if (this._expectations.length > 0) {\n            /** @type {?} */\n            const expectation = this._expectations[0];\n            if (expectation.url == url) {\n                remove(this._expectations, expectation);\n                request.complete(expectation.response);\n                return;\n            }\n        }\n        if (this._definitions.has(url)) {\n            /** @type {?} */\n            const response = this._definitions.get(url);\n            request.complete(response == null ? null : response);\n            return;\n        }\n        throw new Error(`Unexpected request ${url}`);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MockResourceLoader.prototype._expectations;\n    /**\n     * @type {?}\n     * @private\n     */\n    MockResourceLoader.prototype._definitions;\n    /**\n     * @type {?}\n     * @private\n     */\n    MockResourceLoader.prototype._requests;\n}\nclass _PendingRequest {\n    /**\n     * @param {?} url\n     */\n    constructor(url) {\n        this.url = url;\n        this.promise = new Promise((/**\n         * @param {?} res\n         * @param {?} rej\n         * @return {?}\n         */\n        (res, rej) => {\n            this.resolve = res;\n            this.reject = rej;\n        }));\n    }\n    /**\n     * @param {?} response\n     * @return {?}\n     */\n    complete(response) {\n        if (response == null) {\n            this.reject(`Failed to load ${this.url}`);\n        }\n        else {\n            this.resolve(response);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getPromise() { return this.promise; }\n}\nif (false) {\n    /** @type {?} */\n    _PendingRequest.prototype.resolve;\n    /** @type {?} */\n    _PendingRequest.prototype.reject;\n    /** @type {?} */\n    _PendingRequest.prototype.promise;\n    /** @type {?} */\n    _PendingRequest.prototype.url;\n}\nclass _Expectation {\n    /**\n     * @param {?} url\n     * @param {?} response\n     */\n    constructor(url, response) {\n        this.url = url;\n        this.response = response;\n    }\n}\nif (false) {\n    /** @type {?} */\n    _Expectation.prototype.url;\n    /** @type {?} */\n    _Expectation.prototype.response;\n}\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove(list, el) {\n    /** @type {?} */\n    const index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/compiler/testing/src/schema_registry_mock.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MockSchemaRegistry {\n    /**\n     * @param {?} existingProperties\n     * @param {?} attrPropMapping\n     * @param {?} existingElements\n     * @param {?} invalidProperties\n     * @param {?} invalidAttributes\n     */\n    constructor(existingProperties, attrPropMapping, existingElements, invalidProperties, invalidAttributes) {\n        this.existingProperties = existingProperties;\n        this.attrPropMapping = attrPropMapping;\n        this.existingElements = existingElements;\n        this.invalidProperties = invalidProperties;\n        this.invalidAttributes = invalidAttributes;\n    }\n    /**\n     * @param {?} tagName\n     * @param {?} property\n     * @param {?} schemas\n     * @return {?}\n     */\n    hasProperty(tagName, property, schemas) {\n        /** @type {?} */\n        const value = this.existingProperties[property];\n        return value === void 0 ? true : value;\n    }\n    /**\n     * @param {?} tagName\n     * @param {?} schemaMetas\n     * @return {?}\n     */\n    hasElement(tagName, schemaMetas) {\n        /** @type {?} */\n        const value = this.existingElements[tagName.toLowerCase()];\n        return value === void 0 ? true : value;\n    }\n    /**\n     * @return {?}\n     */\n    allKnownElementNames() { return Object.keys(this.existingElements); }\n    /**\n     * @param {?} selector\n     * @param {?} property\n     * @param {?} isAttribute\n     * @return {?}\n     */\n    securityContext(selector, property, isAttribute) {\n        return core.SecurityContext.NONE;\n    }\n    /**\n     * @param {?} attrName\n     * @return {?}\n     */\n    getMappedPropName(attrName) { return this.attrPropMapping[attrName] || attrName; }\n    /**\n     * @return {?}\n     */\n    getDefaultComponentElementName() { return 'ng-component'; }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    validateProperty(name) {\n        if (this.invalidProperties.indexOf(name) > -1) {\n            return { error: true, msg: `Binding to property '${name}' is disallowed for security reasons` };\n        }\n        else {\n            return { error: false };\n        }\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    validateAttribute(name) {\n        if (this.invalidAttributes.indexOf(name) > -1) {\n            return {\n                error: true,\n                msg: `Binding to attribute '${name}' is disallowed for security reasons`\n            };\n        }\n        else {\n            return { error: false };\n        }\n    }\n    /**\n     * @param {?} propName\n     * @return {?}\n     */\n    normalizeAnimationStyleProperty(propName) { return propName; }\n    /**\n     * @param {?} camelCaseProp\n     * @param {?} userProvidedProp\n     * @param {?} val\n     * @return {?}\n     */\n    normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {\n        return { error: (/** @type {?} */ (null)), value: val.toString() };\n    }\n}\nif (false) {\n    /** @type {?} */\n    MockSchemaRegistry.prototype.existingProperties;\n    /** @type {?} */\n    MockSchemaRegistry.prototype.attrPropMapping;\n    /** @type {?} */\n    MockSchemaRegistry.prototype.existingElements;\n    /** @type {?} */\n    MockSchemaRegistry.prototype.invalidProperties;\n    /** @type {?} */\n    MockSchemaRegistry.prototype.invalidAttributes;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/compiler/testing/src/directive_resolver_mock.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An implementation of {\\@link DirectiveResolver} that allows overriding\n * various properties of directives.\n */\nclass MockDirectiveResolver extends DirectiveResolver {\n    /**\n     * @param {?} reflector\n     */\n    constructor(reflector) {\n        super(reflector);\n        this._directives = new Map();\n    }\n    /**\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    resolve(type, throwIfNotFound = true) {\n        return this._directives.get(type) || super.resolve(type, throwIfNotFound);\n    }\n    /**\n     * Overrides the {\\@link core.Directive} for a directive.\n     * @param {?} type\n     * @param {?} metadata\n     * @return {?}\n     */\n    setDirective(type, metadata) {\n        this._directives.set(type, metadata);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MockDirectiveResolver.prototype._directives;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/compiler/testing/src/ng_module_resolver_mock.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MockNgModuleResolver extends NgModuleResolver {\n    /**\n     * @param {?} reflector\n     */\n    constructor(reflector) {\n        super(reflector);\n        this._ngModules = new Map();\n    }\n    /**\n     * Overrides the {\\@link NgModule} for a module.\n     * @param {?} type\n     * @param {?} metadata\n     * @return {?}\n     */\n    setNgModule(type, metadata) {\n        this._ngModules.set(type, metadata);\n    }\n    /**\n     * Returns the {\\@link NgModule} for a module:\n     * - Set the {\\@link NgModule} to the overridden view when it exists or fallback to the\n     * default\n     * `NgModuleResolver`, see `setNgModule`.\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    resolve(type, throwIfNotFound = true) {\n        return this._ngModules.get(type) || (/** @type {?} */ (super.resolve(type, throwIfNotFound)));\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MockNgModuleResolver.prototype._ngModules;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/compiler/testing/src/pipe_resolver_mock.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MockPipeResolver extends PipeResolver {\n    /**\n     * @param {?} refector\n     */\n    constructor(refector) {\n        super(refector);\n        this._pipes = new Map();\n    }\n    /**\n     * Overrides the {\\@link Pipe} for a pipe.\n     * @param {?} type\n     * @param {?} metadata\n     * @return {?}\n     */\n    setPipe(type, metadata) { this._pipes.set(type, metadata); }\n    /**\n     * Returns the {\\@link Pipe} for a pipe:\n     * - Set the {\\@link Pipe} to the overridden view when it exists or fallback to the\n     * default\n     * `PipeResolver`, see `setPipe`.\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    resolve(type, throwIfNotFound = true) {\n        /** @type {?} */\n        let metadata = this._pipes.get(type);\n        if (!metadata) {\n            metadata = (/** @type {?} */ (super.resolve(type, throwIfNotFound)));\n        }\n        return metadata;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MockPipeResolver.prototype._pipes;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/compiler/testing/src/testing.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/compiler/testing/public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/compiler/testing/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MockDirectiveResolver, MockNgModuleResolver, MockPipeResolver, MockResourceLoader, MockSchemaRegistry };\n"]}