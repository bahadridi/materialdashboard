{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/compiler/fesm5/testing.js"],"names":[],"mappings":"AAAA","file":"testing.js","sourcesContent":["/**\n * @license Angular v9.0.1\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { __extends } from 'tslib';\nimport { ResourceLoader, core, DirectiveResolver, NgModuleResolver, PipeResolver } from '@angular/compiler';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A mock implementation of {@link ResourceLoader} that allows outgoing requests to be mocked\n * and responded to within a single test, without going to the network.\n */\nvar MockResourceLoader = /** @class */ (function (_super) {\n    __extends(MockResourceLoader, _super);\n    function MockResourceLoader() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._expectations = [];\n        _this._definitions = new Map();\n        _this._requests = [];\n        return _this;\n    }\n    MockResourceLoader.prototype.get = function (url) {\n        var request = new _PendingRequest(url);\n        this._requests.push(request);\n        return request.getPromise();\n    };\n    MockResourceLoader.prototype.hasPendingRequests = function () { return !!this._requests.length; };\n    /**\n     * Add an expectation for the given URL. Incoming requests will be checked against\n     * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\n     * can be used to check if any expectations have not yet been met.\n     *\n     * The response given will be returned if the expectation matches.\n     */\n    MockResourceLoader.prototype.expect = function (url, response) {\n        var expectation = new _Expectation(url, response);\n        this._expectations.push(expectation);\n    };\n    /**\n     * Add a definition for the given URL to return the given response. Unlike expectations,\n     * definitions have no order and will satisfy any matching request at any time. Also\n     * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\n     * to return an error.\n     */\n    MockResourceLoader.prototype.when = function (url, response) { this._definitions.set(url, response); };\n    /**\n     * Process pending requests and verify there are no outstanding expectations. Also fails\n     * if no requests are pending.\n     */\n    MockResourceLoader.prototype.flush = function () {\n        if (this._requests.length === 0) {\n            throw new Error('No pending requests to flush');\n        }\n        do {\n            this._processRequest(this._requests.shift());\n        } while (this._requests.length > 0);\n        this.verifyNoOutstandingExpectations();\n    };\n    /**\n     * Throw an exception if any expectations have not been satisfied.\n     */\n    MockResourceLoader.prototype.verifyNoOutstandingExpectations = function () {\n        if (this._expectations.length === 0)\n            return;\n        var urls = [];\n        for (var i = 0; i < this._expectations.length; i++) {\n            var expectation = this._expectations[i];\n            urls.push(expectation.url);\n        }\n        throw new Error(\"Unsatisfied requests: \" + urls.join(', '));\n    };\n    MockResourceLoader.prototype._processRequest = function (request) {\n        var url = request.url;\n        if (this._expectations.length > 0) {\n            var expectation = this._expectations[0];\n            if (expectation.url == url) {\n                remove(this._expectations, expectation);\n                request.complete(expectation.response);\n                return;\n            }\n        }\n        if (this._definitions.has(url)) {\n            var response = this._definitions.get(url);\n            request.complete(response == null ? null : response);\n            return;\n        }\n        throw new Error(\"Unexpected request \" + url);\n    };\n    return MockResourceLoader;\n}(ResourceLoader));\nvar _PendingRequest = /** @class */ (function () {\n    function _PendingRequest(url) {\n        var _this = this;\n        this.url = url;\n        this.promise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    _PendingRequest.prototype.complete = function (response) {\n        if (response == null) {\n            this.reject(\"Failed to load \" + this.url);\n        }\n        else {\n            this.resolve(response);\n        }\n    };\n    _PendingRequest.prototype.getPromise = function () { return this.promise; };\n    return _PendingRequest;\n}());\nvar _Expectation = /** @class */ (function () {\n    function _Expectation(url, response) {\n        this.url = url;\n        this.response = response;\n    }\n    return _Expectation;\n}());\nfunction remove(list, el) {\n    var index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MockSchemaRegistry = /** @class */ (function () {\n    function MockSchemaRegistry(existingProperties, attrPropMapping, existingElements, invalidProperties, invalidAttributes) {\n        this.existingProperties = existingProperties;\n        this.attrPropMapping = attrPropMapping;\n        this.existingElements = existingElements;\n        this.invalidProperties = invalidProperties;\n        this.invalidAttributes = invalidAttributes;\n    }\n    MockSchemaRegistry.prototype.hasProperty = function (tagName, property, schemas) {\n        var value = this.existingProperties[property];\n        return value === void 0 ? true : value;\n    };\n    MockSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {\n        var value = this.existingElements[tagName.toLowerCase()];\n        return value === void 0 ? true : value;\n    };\n    MockSchemaRegistry.prototype.allKnownElementNames = function () { return Object.keys(this.existingElements); };\n    MockSchemaRegistry.prototype.securityContext = function (selector, property, isAttribute) {\n        return core.SecurityContext.NONE;\n    };\n    MockSchemaRegistry.prototype.getMappedPropName = function (attrName) { return this.attrPropMapping[attrName] || attrName; };\n    MockSchemaRegistry.prototype.getDefaultComponentElementName = function () { return 'ng-component'; };\n    MockSchemaRegistry.prototype.validateProperty = function (name) {\n        if (this.invalidProperties.indexOf(name) > -1) {\n            return { error: true, msg: \"Binding to property '\" + name + \"' is disallowed for security reasons\" };\n        }\n        else {\n            return { error: false };\n        }\n    };\n    MockSchemaRegistry.prototype.validateAttribute = function (name) {\n        if (this.invalidAttributes.indexOf(name) > -1) {\n            return {\n                error: true,\n                msg: \"Binding to attribute '\" + name + \"' is disallowed for security reasons\"\n            };\n        }\n        else {\n            return { error: false };\n        }\n    };\n    MockSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) { return propName; };\n    MockSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) {\n        return { error: null, value: val.toString() };\n    };\n    return MockSchemaRegistry;\n}());\n\n/**\n * An implementation of {@link DirectiveResolver} that allows overriding\n * various properties of directives.\n */\nvar MockDirectiveResolver = /** @class */ (function (_super) {\n    __extends(MockDirectiveResolver, _super);\n    function MockDirectiveResolver(reflector) {\n        var _this = _super.call(this, reflector) || this;\n        _this._directives = new Map();\n        return _this;\n    }\n    MockDirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        return this._directives.get(type) || _super.prototype.resolve.call(this, type, throwIfNotFound);\n    };\n    /**\n     * Overrides the {@link core.Directive} for a directive.\n     */\n    MockDirectiveResolver.prototype.setDirective = function (type, metadata) {\n        this._directives.set(type, metadata);\n    };\n    return MockDirectiveResolver;\n}(DirectiveResolver));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MockNgModuleResolver = /** @class */ (function (_super) {\n    __extends(MockNgModuleResolver, _super);\n    function MockNgModuleResolver(reflector) {\n        var _this = _super.call(this, reflector) || this;\n        _this._ngModules = new Map();\n        return _this;\n    }\n    /**\n     * Overrides the {@link NgModule} for a module.\n     */\n    MockNgModuleResolver.prototype.setNgModule = function (type, metadata) {\n        this._ngModules.set(type, metadata);\n    };\n    /**\n     * Returns the {@link NgModule} for a module:\n     * - Set the {@link NgModule} to the overridden view when it exists or fallback to the\n     * default\n     * `NgModuleResolver`, see `setNgModule`.\n     */\n    MockNgModuleResolver.prototype.resolve = function (type, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        return this._ngModules.get(type) || _super.prototype.resolve.call(this, type, throwIfNotFound);\n    };\n    return MockNgModuleResolver;\n}(NgModuleResolver));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MockPipeResolver = /** @class */ (function (_super) {\n    __extends(MockPipeResolver, _super);\n    function MockPipeResolver(refector) {\n        var _this = _super.call(this, refector) || this;\n        _this._pipes = new Map();\n        return _this;\n    }\n    /**\n     * Overrides the {@link Pipe} for a pipe.\n     */\n    MockPipeResolver.prototype.setPipe = function (type, metadata) { this._pipes.set(type, metadata); };\n    /**\n     * Returns the {@link Pipe} for a pipe:\n     * - Set the {@link Pipe} to the overridden view when it exists or fallback to the\n     * default\n     * `PipeResolver`, see `setPipe`.\n     */\n    MockPipeResolver.prototype.resolve = function (type, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        var metadata = this._pipes.get(type);\n        if (!metadata) {\n            metadata = _super.prototype.resolve.call(this, type, throwIfNotFound);\n        }\n        return metadata;\n    };\n    return MockPipeResolver;\n}(PipeResolver));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MockDirectiveResolver, MockNgModuleResolver, MockPipeResolver, MockResourceLoader, MockSchemaRegistry };\n"]}