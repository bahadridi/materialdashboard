{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/router/fesm2015/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAyCC,uIAGC;;;;;;;yEAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsGD;;;;;;;;;;;;;;;;;;;;0BAkBC","file":"testing.js","sourcesContent":["/**\n * @license Angular v9.0.1\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Location, LocationStrategy } from '@angular/common';\nimport { SpyLocation, MockLocationStrategy } from '@angular/common/testing';\nimport { Injectable, Compiler, NgModule, NgModuleFactoryLoader, Injector, Optional } from '@angular/core';\nimport { Router, ɵflatten, provideRoutes, ROUTER_CONFIGURATION, RouterModule, ɵROUTER_PROVIDERS, UrlSerializer, ChildrenOutletContexts, ROUTES, UrlHandlingStrategy, PreloadingStrategy, NoPreloading } from '@angular/router';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/testing/src/router_testing_module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n *\n * Allows to simulate the loading of ng modules in tests.\n *\n * ```\n * const loader = TestBed.inject(NgModuleFactoryLoader);\n *\n * \\@Component({template: 'lazy-loaded'})\n * class LazyLoadedComponent {}\n * \\@NgModule({\n *   declarations: [LazyLoadedComponent],\n *   imports: [RouterModule.forChild([{path: 'loaded', component: LazyLoadedComponent}])]\n * })\n *\n * class LoadedModule {}\n *\n * // sets up stubbedModules\n * loader.stubbedModules = {lazyModule: LoadedModule};\n *\n * router.resetConfig([\n *   {path: 'lazy', loadChildren: 'lazyModule'},\n * ]);\n *\n * router.navigateByUrl('/lazy/loaded');\n * ```\n *\n * \\@publicApi\n */\nclass SpyNgModuleFactoryLoader {\n    /**\n     * @param {?} compiler\n     */\n    constructor(compiler) {\n        this.compiler = compiler;\n        /**\n         * \\@docsNotRequired\n         */\n        this._stubbedModules = {};\n    }\n    /**\n     * \\@docsNotRequired\n     * @param {?} modules\n     * @return {?}\n     */\n    set stubbedModules(modules) {\n        /** @type {?} */\n        const res = {};\n        for (const t of Object.keys(modules)) {\n            res[t] = this.compiler.compileModuleAsync(modules[t]);\n        }\n        this._stubbedModules = res;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    get stubbedModules() { return this._stubbedModules; }\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    load(path) {\n        if (this._stubbedModules[path]) {\n            return this._stubbedModules[path];\n        }\n        else {\n            return (/** @type {?} */ (Promise.reject(new Error(`Cannot find module ${path}`))));\n        }\n    }\n}\nSpyNgModuleFactoryLoader.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nSpyNgModuleFactoryLoader.ctorParameters = () => [\n    { type: Compiler }\n];\nif (false) {\n    /**\n     * \\@docsNotRequired\n     * @type {?}\n     * @private\n     */\n    SpyNgModuleFactoryLoader.prototype._stubbedModules;\n    /**\n     * @type {?}\n     * @private\n     */\n    SpyNgModuleFactoryLoader.prototype.compiler;\n}\n/**\n * @param {?} opts\n * @return {?}\n */\nfunction isUrlHandlingStrategy(opts) {\n    // This property check is needed because UrlHandlingStrategy is an interface and doesn't exist at\n    // runtime.\n    return 'shouldProcessUrl' in opts;\n}\n/**\n * Router setup factory function used for testing.\n *\n * \\@publicApi\n * @param {?} urlSerializer\n * @param {?} contexts\n * @param {?} location\n * @param {?} loader\n * @param {?} compiler\n * @param {?} injector\n * @param {?} routes\n * @param {?=} opts\n * @param {?=} urlHandlingStrategy\n * @return {?}\n */\nfunction setupTestingRouter(urlSerializer, contexts, location, loader, compiler, injector, routes, opts, urlHandlingStrategy) {\n    /** @type {?} */\n    const router = new Router((/** @type {?} */ (null)), urlSerializer, contexts, location, injector, loader, compiler, ɵflatten(routes));\n    if (opts) {\n        // Handle deprecated argument ordering.\n        if (isUrlHandlingStrategy(opts)) {\n            router.urlHandlingStrategy = opts;\n        }\n        else {\n            // Handle ExtraOptions\n            if (opts.malformedUriErrorHandler) {\n                router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\n            }\n            if (opts.paramsInheritanceStrategy) {\n                router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n            }\n        }\n    }\n    if (urlHandlingStrategy) {\n        router.urlHandlingStrategy = urlHandlingStrategy;\n    }\n    return router;\n}\n/**\n * \\@description\n *\n * Sets up the router to be used for testing.\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of `Location`, `LocationStrategy`, and {\\@link\n * NgModuleFactoryLoader}.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * beforeEach(() => {\n *   TestBed.configureTestModule({\n *     imports: [\n *       RouterTestingModule.withRoutes(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n * \\@publicApi\n */\nclass RouterTestingModule {\n    /**\n     * @param {?} routes\n     * @param {?=} config\n     * @return {?}\n     */\n    static withRoutes(routes, config) {\n        return {\n            ngModule: RouterTestingModule,\n            providers: [\n                provideRoutes(routes),\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n            ]\n        };\n    }\n}\nRouterTestingModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [RouterModule],\n                providers: [\n                    ɵROUTER_PROVIDERS, { provide: Location, useClass: SpyLocation },\n                    { provide: LocationStrategy, useClass: MockLocationStrategy },\n                    { provide: NgModuleFactoryLoader, useClass: SpyNgModuleFactoryLoader }, {\n                        provide: Router,\n                        useFactory: setupTestingRouter,\n                        deps: [\n                            UrlSerializer, ChildrenOutletContexts, Location, NgModuleFactoryLoader, Compiler, Injector,\n                            ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()]\n                        ]\n                    },\n                    { provide: PreloadingStrategy, useExisting: NoPreloading }, provideRoutes([])\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/testing/src/testing.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/testing/public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/testing/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RouterTestingModule, SpyNgModuleFactoryLoader, setupTestingRouter };\n"]}