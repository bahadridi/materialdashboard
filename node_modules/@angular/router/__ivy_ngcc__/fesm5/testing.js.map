{"version":3,"sources":["C:/Users/MounaBouslah/Desktop/Seekmake/Main Project/material-dashboard-pro-angular-v2.4.1/node_modules/@angular/router/fesm5/testing.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2CA6C2C,AAEpC;;;;;;yEAC0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BA0EH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAkBF","file":"testing.js","sourcesContent":["/**\n * @license Angular v9.0.1\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { __values, __decorate, __metadata } from 'tslib';\nimport { Location, LocationStrategy } from '@angular/common';\nimport { SpyLocation, MockLocationStrategy } from '@angular/common/testing';\nimport { Injectable, Compiler, NgModule, NgModuleFactoryLoader, Injector, Optional } from '@angular/core';\nimport { Router, ɵflatten, provideRoutes, ROUTER_CONFIGURATION, RouterModule, ɵROUTER_PROVIDERS, UrlSerializer, ChildrenOutletContexts, ROUTES, UrlHandlingStrategy, PreloadingStrategy, NoPreloading } from '@angular/router';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * Allows to simulate the loading of ng modules in tests.\n *\n * ```\n * const loader = TestBed.inject(NgModuleFactoryLoader);\n *\n * @Component({template: 'lazy-loaded'})\n * class LazyLoadedComponent {}\n * @NgModule({\n *   declarations: [LazyLoadedComponent],\n *   imports: [RouterModule.forChild([{path: 'loaded', component: LazyLoadedComponent}])]\n * })\n *\n * class LoadedModule {}\n *\n * // sets up stubbedModules\n * loader.stubbedModules = {lazyModule: LoadedModule};\n *\n * router.resetConfig([\n *   {path: 'lazy', loadChildren: 'lazyModule'},\n * ]);\n *\n * router.navigateByUrl('/lazy/loaded');\n * ```\n *\n * @publicApi\n */\nvar SpyNgModuleFactoryLoader = /** @class */ (function () {\n    function SpyNgModuleFactoryLoader(compiler) {\n        this.compiler = compiler;\n        /**\n         * @docsNotRequired\n         */\n        this._stubbedModules = {};\n    }\n    Object.defineProperty(SpyNgModuleFactoryLoader.prototype, \"stubbedModules\", {\n        /**\n         * @docsNotRequired\n         */\n        get: function () { return this._stubbedModules; },\n        /**\n         * @docsNotRequired\n         */\n        set: function (modules) {\n            var e_1, _a;\n            var res = {};\n            try {\n                for (var _b = __values(Object.keys(modules)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var t = _c.value;\n                    res[t] = this.compiler.compileModuleAsync(modules[t]);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            this._stubbedModules = res;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SpyNgModuleFactoryLoader.prototype.load = function (path) {\n        if (this._stubbedModules[path]) {\n            return this._stubbedModules[path];\n        }\n        else {\n            return Promise.reject(new Error(\"Cannot find module \" + path));\n        }\n    };\n    SpyNgModuleFactoryLoader = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [Compiler])\n    ], SpyNgModuleFactoryLoader);\n    return SpyNgModuleFactoryLoader;\n}());\nfunction isUrlHandlingStrategy(opts) {\n    // This property check is needed because UrlHandlingStrategy is an interface and doesn't exist at\n    // runtime.\n    return 'shouldProcessUrl' in opts;\n}\n/**\n * Router setup factory function used for testing.\n *\n * @publicApi\n */\nfunction setupTestingRouter(urlSerializer, contexts, location, loader, compiler, injector, routes, opts, urlHandlingStrategy) {\n    var router = new Router(null, urlSerializer, contexts, location, injector, loader, compiler, ɵflatten(routes));\n    if (opts) {\n        // Handle deprecated argument ordering.\n        if (isUrlHandlingStrategy(opts)) {\n            router.urlHandlingStrategy = opts;\n        }\n        else {\n            // Handle ExtraOptions\n            if (opts.malformedUriErrorHandler) {\n                router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\n            }\n            if (opts.paramsInheritanceStrategy) {\n                router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n            }\n        }\n    }\n    if (urlHandlingStrategy) {\n        router.urlHandlingStrategy = urlHandlingStrategy;\n    }\n    return router;\n}\n/**\n * @description\n *\n * Sets up the router to be used for testing.\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of `Location`, `LocationStrategy`, and {@link\n * NgModuleFactoryLoader}.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * beforeEach(() => {\n *   TestBed.configureTestModule({\n *     imports: [\n *       RouterTestingModule.withRoutes(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n * @publicApi\n */\nvar RouterTestingModule = /** @class */ (function () {\n    function RouterTestingModule() {\n    }\n    RouterTestingModule_1 = RouterTestingModule;\n    RouterTestingModule.withRoutes = function (routes, config) {\n        return {\n            ngModule: RouterTestingModule_1,\n            providers: [\n                provideRoutes(routes),\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n            ]\n        };\n    };\n    var RouterTestingModule_1;\n    RouterTestingModule = RouterTestingModule_1 = __decorate([\n        NgModule({\n            exports: [RouterModule],\n            providers: [\n                ɵROUTER_PROVIDERS, { provide: Location, useClass: SpyLocation },\n                { provide: LocationStrategy, useClass: MockLocationStrategy },\n                { provide: NgModuleFactoryLoader, useClass: SpyNgModuleFactoryLoader }, {\n                    provide: Router,\n                    useFactory: setupTestingRouter,\n                    deps: [\n                        UrlSerializer, ChildrenOutletContexts, Location, NgModuleFactoryLoader, Compiler, Injector,\n                        ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()]\n                    ]\n                },\n                { provide: PreloadingStrategy, useExisting: NoPreloading }, provideRoutes([])\n            ]\n        })\n    ], RouterTestingModule);\n    return RouterTestingModule;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RouterTestingModule, SpyNgModuleFactoryLoader, setupTestingRouter };\n"]}